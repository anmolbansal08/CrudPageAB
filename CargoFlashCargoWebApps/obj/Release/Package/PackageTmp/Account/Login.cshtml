@* Remove this section if you are using bundling *@
<script type="text/javascript" src="~/Scripts/Login.js"></script>
<script src='https://www.google.com/recaptcha/api.js'></script>
<style>
    .short {
        font-weight: bold;
        color: #FF0000;
        font-size: 11px;
    }

    .weak {
        font-weight: bold;
        color: orange;
        font-size: 11px;
    }

    .good {
        font-weight: bold;
        color: #2D98F3;
        font-size: 11px;
    }

    .strong {
        font-weight: bold;
        color: limegreen;
        font-size: 11px;
    }


    .divshort {
        color: #FF0000;
        width: 25%;
        border: solid;
        background-color: #FF0000;
    }

    .divweak {
        color: orange;
        width: 50%;
        border: solid;
        background-color: orange;
    }

    .divgood {
        color: #2D98F3;
        width: 75%;
        border: solid;
        background-color: #2D98F3;
    }

    .divstrong {
        color: limegreen;
        width: 97%;
        border: solid;
        background-color: limegreen;
    }
</style>

@{
    Layout = "~/_SiteLayout.cshtml";
    Page.Title = "Log in";


    if (Request.Cookies["UserName"] != null && Request.Cookies["Password"] != null)
    {
        @Html.Hidden("HdnUName", Request.Cookies["UserName"].Value)
        @Html.Hidden("HdnPass", Request.Cookies["Password"].Value)
    }

    // Initialize general page variables
    var email = ""; var CaptchaCode = "";
    var password = "";
    var rememberMe = false;
    var browser = "";
    //var ip = "";
    var SessionID = "";
    var TokenDetails = Request.QueryString["Token"];


    CargoFlash.Cargo.DataService.Common.CommonService CS = new CargoFlash.Cargo.DataService.Common.CommonService();
    int ISCaptcha = CS.GetSystemSettingsBySNo("ISCaptcha");

    if (TokenDetails != null && TokenDetails.Length > 20)
    {
        CargoFlash.Cargo.Model.UserLogin userLogin = new CargoFlash.Cargo.Model.UserLogin();
        CargoFlash.Cargo.DataService.LoginService loginservice = new CargoFlash.Cargo.DataService.LoginService();

        userLogin = (CargoFlash.Cargo.Model.UserLogin)loginservice.GetTokenRecord(TokenDetails);
        if (userLogin.UserSNo == 0)
        {
            Validation.AddFormError("Invalid UserID or Password.");
        }
        else
        {

            Session["UserDetail"] = userLogin;
            Response.Redirect("~/Index.cshtml");
        }
    }

    var hostname = "";
    var returnUrl = Request.QueryString["ReturnUrl"];
    if (returnUrl.IsEmpty())
    {
        // Some external login providers always require a return URL value

        returnUrl = Href("~/");
    }
    var islogout = Request.QueryString["islogout"];
    if (!string.IsNullOrEmpty(islogout))
    {
        Session.Clear();
        Session.Abandon();
        Session["UserDetail"] = null;
        if (Request.Cookies["UserDetail"] != null)
        {
            HttpCookie myCookie = new HttpCookie("UserDetail");
            myCookie.Expires = DateTime.Now.AddDays(-1);
            myCookie.Value = "0";
            Response.Cookies.Add(myCookie);
            Response.Cookies.Remove("UserDetail");
        }
        Response.Redirect("~/Account/GarudaLogin.cshtml");
    }
    // Setup validation

    Validation.RequireField("email", "You must enter User ID.");
    Validation.RequireField("password", "You must enter Password.");
    //Validation.RequireField("CaptchaCode", "You must enter below code.");
    Validation.Add("password",
        Validator.StringLength(
            maxLength: Int32.MaxValue));
    //,
    //minLength: 5,
    //errorMessage: "Invalid UserID and Password."));


    // If this is a POST request, validate and process data
    if (IsPost)
    {
        if (Session["UserDetail"] != null)
        {
            Response.Redirect("~/Index.cshtml");
        }
        // AntiForgery.Validate();
        // is this an external login request?
        string provider = Request.Form["provider"];
        if (!provider.IsEmpty())
        {
            OAuthWebSecurity.RequestAuthentication(provider, Href("~/Account/RegisterService", new { returnUrl }));
            return;
        }
        else if (Validation.IsValid())
        {
            email = Request.Form["email"];
            password = Request.Form["password"];
            rememberMe = Request.Form["rememberMe"].AsBool();
            browser = Request.Browser.Type;
            hostname = Dns.GetHostName();
            SessionID = HttpContext.Current.Session.SessionID;
            string ipAddress = System.Web.HttpContext.Current.Request.ServerVariables["HTTP_FORWARDED_FOR"];
            if (!string.IsNullOrEmpty(ipAddress))
            {
                string[] forwardedIps = ipAddress.Split(new char[] { ',' }, StringSplitOptions.RemoveEmptyEntries);
                ipAddress = forwardedIps[forwardedIps.Length - 1];
            }
            else
            {
                ipAddress = System.Web.HttpContext.Current.Request.ServerVariables["REMOTE_ADDR"];
            }

            CaptchaCode = Request.Form["CaptchaCode"];

            IPAddress ip = Array.FindLast(
    Dns.GetHostEntry(string.Empty).AddressList,
    a => a.AddressFamily == System.Net.Sockets.AddressFamily.InterNetwork);//Dns.GetHostEntry(hostname).AddressList[2].ToString();
            CargoFlash.Cargo.Model.UserLogin userLogin = new CargoFlash.Cargo.Model.UserLogin();
            CargoFlash.Cargo.DataService.LoginService loginservice = new CargoFlash.Cargo.DataService.LoginService();
            CargoFlash.Cargo.DataService.Common.CommonService cmsvc = new CargoFlash.Cargo.DataService.Common.CommonService();

            //***********************************TARUN*************************************
            string res = cmsvc.CompareSession(email, password, "");
            if (!string.IsNullOrEmpty(res))
            {
                <script type="text/javascript">
                    if (confirm("@res")) {
                        $.ajax({
                            type: "GET",
                            contentType: "application/json; charset=utf-8",
                            dataType: "json",
                            async: false,
                            url: "../Services/CommonService.svc/ReLogin?userId=@email&password=@password&UserSNo=",
                            success: function (response) {
                                window.location = '../Index.cshtml';
                            }
                        });
                    }
                </script>
            }
            else
            {

                //***********************************END TARUN*************************************


                ////////Validate Captcha before login/////////////////////////////////////////////////////////////////////////////////////////// by Parvez Khan
                bool Valid = false;
                if (ISCaptcha == 1)
                {
                    var response = Request["g-recaptcha-response"];

                    HttpWebRequest req = (HttpWebRequest)WebRequest.Create(" https://www.google.com/recaptcha/api/siteverify?secret=6LdYXhUUAAAAAG_RXWxWmKimgSPD2v-PhfNNakLZ&response=" + response);
                    using (WebResponse wResponse = req.GetResponse())
                    {
                        using (StreamReader readStream = new StreamReader(wResponse.GetResponseStream()))
                        {
                            string jsonResponse = readStream.ReadToEnd();
                            List<string> lst = new List<string>();
                            System.Web.Script.Serialization.JavaScriptSerializer js = new System.Web.Script.Serialization.JavaScriptSerializer();
                            CargoFlash.Cargo.Model.CaptchaResponse data = js.Deserialize<CargoFlash.Cargo.Model.CaptchaResponse>(jsonResponse);// Deserialize Json
                            Valid = Convert.ToBoolean(data.success);
                        }
                    }
                }
                else { Valid = true; }
                ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

                // AntiForgery.Validate();

                //if (Session["CaptchaCode"].ToString() == CaptchaCode)
                if (Valid)
                {
                    //CargoFlash.Cargo.DataService.Common.CommonService c = new CargoFlash.Cargo.DataService.Common.CommonService();
                    //string val = c.GenerateSHA512String("admin1234");
                    //92F39F7F2A869838CD5085E6F17FC82109BCF98CD62A47CBC379E38DE80BBC0213A23CEE6E4A13DE6CAAE0ADD8A390272D6F0883C274320B1FF60DBCFC6DD750
                    int result = loginservice.GetValidLoginMessage(email, password);
                    if (result == 1 || result == 4) { Validation.AddFormError("Invalid UserID."); }
                    else if (result == 2 || result == 3) { Validation.AddFormError("Invalid Password."); }
                    else if (result == 5) { Validation.AddFormError("Account disabled,Please contact Admin."); }
                    else if (result == 6) { Validation.AddFormError("Account disabled After 3 bad attemps,Please contact Admin."); }
                    else if (result == 7 || result == 8)
                    { @Html.Hidden("HdnPasswordExpire", result);@Html.Hidden("HdnUserEmail", email) }
                    //var captchavalue = Session["CaptchaCode"];

                    if (result == 0)
                    {
                        userLogin = (CargoFlash.Cargo.Model.UserLogin)loginservice.GetLoginRecord(email, password, ip.ToString(), hostname, browser, SessionID);
                        if (userLogin.UserSNo == 0)
                        {
                            Validation.AddFormError("Invalid UserID or Password.");
                        }
                        else
                        {
                            loginservice.RememberMe(rememberMe, email, password);

                            if (Request.Cookies["UserDetail"] == null)
                            {
                                HttpCookie myCookie = new HttpCookie("UserDetail");
                                myCookie.Value = userLogin.SysSetting["SessionTimeout"];
                                myCookie.Expires = DateTime.Now.AddDays(1);
                                Response.Cookies.Add(myCookie);
                            }
                            //  userLogin.SysSetting["SessionTimeout"] = Session.Timeout.ToString();
                            Session["UserDetail"] = userLogin;
                            //Session["DateFormat"] = "dd-MMM-yyyy";
                            //Session["PageRights"] = userLogin.PageRights;
                            Response.Redirect("~/Index.cshtml");
                        }
                    }
                }
                else { Validation.AddFormError("Image code is not valid."); }


            }  //Start And END tarun
        }
    }
}

<hgroup class="title"></hgroup>

<section id="loginForm">
    <h2>User Authentication</h2>
    <form method="post" autocomplete="off">

        @AntiForgery.GetHtml()
        @* If one or more validation errors exist, show an error *@
        @Html.ValidationSummary("", excludeFieldErrors: true, htmlAttributes: null)
        <label for="message" id="message" class="error-label"></label>
        <fieldset>
            <legend>Log in to Your Account</legend>
            <ol>
                <li class="email">
                    <label for="email" @if (!ModelState.IsValidField("email")) { <text> class="error-label" </text>     }>User ID</label>
                    <input type="text" id="email" name="email" autocomplete="off" value="@email" @Validation.For("email") />
                    @* Write any user name validation errors to the page *@
                    @Html.ValidationMessage("email")
                </li>
                <li class="password">
                    <label for="password" @if (!ModelState.IsValidField("password")) { <text> class="error-label" </text>     }>Password</label>
                    <input type="password" id="password" autocomplete="off" name="password" @Validation.For("password") />
                    @*uncoment this id="ForgetPassword" line, it will on all functionality for ForgetPassword *@
                    @*<label id="ForgetPassword" onclick="ForgetPassword();" style="font-size: 12px; text-decoration: underline; cursor: pointer !important; text-align:left;">Forgot my Password?</label>*@

                    @* Write any password validation errors to the page *@
                    @Html.ValidationMessage("password")
                </li>
                @*<li>
                        <label for="CaptchaCode" @if (!ModelState.IsValidField("CaptchaCode")){ <text> class="error-label" </text>    }>Enter below code</label>
                        <input type="text" id="CaptchaCode" name="CaptchaCode" autocomplete="off" value="@CaptchaCode" @Validation.For("CaptchaCode") />
                         @Html.ValidationMessage("CaptchaCode")
                    </li>*@
                @if (ISCaptcha == 1)
                {
                    <li>
                        <div class="g-recaptcha" data-sitekey="6LdYXhUUAAAAALCN4_9-F0tmH64kjpI88z79b8N1"></div>
                    </li>
                }
                @*<li>
                        <img src="~/Handler/CaptchaHandler.ashx" id="imgCaptcha" />
                        <a href="#" onclick="RefreshCaptcha();">Refresh</a>
                    </li>*@
                <li class="remember-me">
                    <input type="checkbox" id="rememberMe" name="rememberMe" value="true" checked="@rememberMe" />
                    <label class="checkbox" for="rememberMe">Remember me?</label>
                </li>
            </ol>
            <input type="submit" value="Log In" id="LogInBtn" />
        </fieldset>

    </form>
    @*<p>
            <a style="color:#FFFFFF" href="~/Account/Register">Don't have a Account?</a><br />
            <a style="color:#FFFFFF" href="~/Account/ForgotPassword">Forgotten your password?</a>
        </p>*@
</section>
<script>
    //Added By Amit Yadav
    var iFramed = (window.location != window.parent.location) ? true : false;
    if (iFramed == true) {
        window.parent.location.href = "GarudaLogin.cshtml";
    }
    //added by Pankaj
    function ForgetPassword() {
        $("#popForgetPassword").remove();
        $("#LogInBtn").after('<div id="popForgetPassword" title="Forget Password" style="font-family: Arial; font-size:10px;"></div>');
        $("#popForgetPassword").append('<table style="margin: 0px auto;"><tr><td><label style="margin-top: 5%;" name="mUserName">User ID</label></td></tr><tr><td><input type="text" style="margin-bottom: 2%;    padding: 6px 10px;    box-sizing: border-box;    border: 1px solid #4CAF50;  border-radius: 4px;" id="UserName" maxlength="30" onblur="requiredfn(this.id)" /></td></tr><tr><td><label name="mEmailID">Email Address</label></td></tr><tr><td><input type="text" style="margin-bottom: 2%;    padding: 6px 10px;    box-sizing: border-box;    border: 1px solid #4CAF50;  border-radius: 4px;" id="EmailID" maxlength="75" onblur="requiredfn(this.id)" /></tr></td><tr><td><label id="mValidateMessage" style="color:red;"></label></td></tr></table>');
        $("#popForgetPassword").dialog(
        {
            autoResize: true,
            maxWidth: 350,
            maxHeight: 275,

            width: 350,
            height: 275,
            modal: true,
            title: 'Forgot my Password',
            draggable: false,
            resizable: false,
            buttons: {
                "Reset": function () {
                    var userName = $('#UserName').val();
                    var EmailID = $('#EmailID').val();
                    resetPassword(userName, EmailID);
                    //$(this).dialog("close");
                },
                Cancel: function () {
                    $(this).dialog("close");
                }
            },
            close: function () {
                $(this).dialog("close");
            }
        });
    }
    function requiredfn(id) {
        var value = $('#' + id).val();
        if (value != "") {
            $('#' + id).css("border", "1px solid #4CAF50");
        }
    }
    function resetPassword(UserName, EmailID) {

        if (UserName == "" || EmailID == "") {
            if (UserName == "")
                $('#UserName').css("border", "1px solid red");
            if (EmailID == "")
                $('#EmailID').css("border", "1px solid red");

            $('#mValidateMessage').text("User ID and Email Address are mandatory !!!");
            return false;
        }
        else {
            if (ValidateEMail(EmailID)) {
                var path = window.location.href.split('/Account')[0].split('//')[1];
                $.ajax({
                    url: "../Services/Permissions/ChangePasswordService.svc/ForgetPassword",
                    async: false,
                    type: "POST",
                    cache: false,
                    data: JSON.stringify({ UserName: UserName, EmailID: EmailID, Path: path }),
                    contentType: "application/json; charset=utf-8",
                    success: function (result) {
                        if (result == 0) {
                            alert("Password reset link has been sent on the respective E-mail Address.");
                            location.href = "http://" + path + "/Account/GarudaLogin.cshtml";
                        }
                        else {
                            if (result == 1)
                                $('#mValidateMessage').text("User profile does not exist !!!");
                            else
                                $('#mValidateMessage').text("Error !!!");
                        }
                    },
                    error: function (result) {
                        $('#mValidateMessage').text("Invaild Attempt !!!");
                    }
                });
            }
            else {
                $('#mValidateMessage').text("Please enter valid email address !!!");
            }
        }

    }

    function ValidateEMail(email) {
        var regex = /^([\w-\.]+)@@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.)|(([\w-]+\.)+))([a-zA-Z]{2,4}|[0-9]{1,3})(\]?)$/;
        return regex.test(email);
    }


