/*

* Note: I have copied same file from kendo.web.js to newkendo.web.js same file if u want further change then do new changed in newkendo.web.js
* Kendo UI Web v2012.2.710 (http://kendoui.com)
* Copyright 2012 Telerik AD. All rights reserved.
*
* Kendo UI Web commercial licenses may be obtained at http://kendoui.com/web-license
* If you do not own a commercial license, this file shall be governed by the
* GNU General Public License (GPL) version 3.
* For GPL requirements, please review: http://www.gnu.org/copyleft/gpl.html
*/
; (function ($, undefined) {
    /**
     * @name kendo
     * @namespace This object contains all code introduced by the Kendo project, plus helper functions that are used across all widgets.
     */

    var kendo = window.kendo = window.kendo || {},
        extend = $.extend,
        each = $.each,
        proxy = $.proxy,
        isArray = $.isArray,
        noop = $.noop,
        isFunction = $.isFunction,
        math = Math,
        Template,
        JSON = window.JSON || {},
        support = {},
        percentRegExp = /%/,
        formatRegExp = /\{(\d+)(:[^\}]+)?\}/g,
        boxShadowRegExp = /(\d+?)px\s*(\d+?)px\s*(\d+?)px\s*(\d+?)?/i,
        FUNCTION = "function",
        STRING = "string",
        NUMBER = "number",
        OBJECT = "object",
        NULL = "null",
        BOOLEAN = "boolean",
        UNDEFINED = "undefined",
        getterCache = {},
        setterCache = {},
        slice = [].slice,
        globalize = window.Globalize;

    function Class() { }

    Class.extend = function (proto) {
        var base = function () { },
            member,
            that = this,
            subclass = proto && proto.init ? proto.init : function () {
                that.apply(this, arguments);
            },
            fn;

        base.prototype = that.prototype;
        fn = subclass.fn = subclass.prototype = new base();

        for (member in proto) {
            if (typeof proto[member] === OBJECT && !(proto[member] instanceof Array) && proto[member] !== null) {
                // Merge object members
                fn[member] = extend(true, {}, base.prototype[member], proto[member]);
            } else {
                fn[member] = proto[member];
            }
        }

        fn.constructor = subclass;
        subclass.extend = that.extend;

        return subclass;
    };

    var Observable = Class.extend(/** @lends kendo.Observable.prototype */{
        /**
         * Creates an observable instance.
         * @constructs
         * @class Represents a class that can trigger events, along with methods that subscribe handlers to these events.
         */
        init: function () {
            this._events = {};
        },

        bind: function (eventName, handlers, one) {
            var that = this,
                idx,
                eventNames = typeof eventName === STRING ? [eventName] : eventName,
                length,
                original,
                handler,
                handlersIsFunction = typeof handlers === FUNCTION,
                events;

            for (idx = 0, length = eventNames.length; idx < length; idx++) {
                eventName = eventNames[idx];

                handler = handlersIsFunction ? handlers : handlers[eventName];

                if (handler) {
                    if (one) {
                        original = handler;
                        handler = function () {
                            that.unbind(eventName, handler);
                            original.apply(that, arguments);
                        };
                    }
                    events = that._events[eventName] = that._events[eventName] || [];
                    events.push(handler);
                }
            }

            return that;
        },

        one: function (eventNames, handlers) {
            return this.bind(eventNames, handlers, true);
        },

        first: function (eventName, handlers) {
            var that = this,
                idx,
                eventNames = typeof eventName === STRING ? [eventName] : eventName,
                length,
                handler,
                handlersIsFunction = typeof handlers === FUNCTION,
                events;

            for (idx = 0, length = eventNames.length; idx < length; idx++) {
                eventName = eventNames[idx];

                handler = handlersIsFunction ? handlers : handlers[eventName];

                if (handler) {
                    events = that._events[eventName] = that._events[eventName] || [];
                    events.unshift(handler);
                }
            }

            return that;
        },

        trigger: function (eventName, e) {
            var that = this,
                events = that._events[eventName],
                idx,
                length,
                isDefaultPrevented = false;

            if (events) {
                e = e || {};

                e.sender = that;

                e.preventDefault = function () {
                    isDefaultPrevented = true;
                };

                e.isDefaultPrevented = function () {
                    return isDefaultPrevented;
                };

                events = events.slice();

                //Do not cache the length of the events array as removing events attached through one will fail
                for (idx = 0, length = events.length; idx < length; idx++) {
                    //Added By Amit Yadav For Chrome 59
                    if (typeof (events[idx]) == "string" && eventName == "select" && events[idx].indexOf("return ") == 0) {
                    } else {
                        events[idx].call(that, e);
                    }
                    // events[idx].call(that, e);
                }
            }

            return isDefaultPrevented;
        },

        unbind: function (eventName, handler) {
            var that = this,
                events = that._events[eventName],
                idx,
                length;

            if (events) {
                if (handler) {
                    for (idx = 0, length = events.length; idx < length; idx++) {
                        if (events[idx] === handler) {
                            events.splice(idx, 1);
                        }
                    }
                } else {
                    that._events[eventName] = [];
                }
            }

            return that;
        }
    });

    function compilePart(part, stringPart) {
        if (stringPart) {
            return "'" +
                part.split("'").join("\\'")
                    .split('\\"').join('\\\\\\"')
                    .replace(/\n/g, "\\n")
                    .replace(/\r/g, "\\r")
                    .replace(/\t/g, "\\t") + "'";
        } else {
            var first = part.charAt(0),
                rest = part.substring(1);

            if (first === "=") {
                return "+(" + rest + ")+";
            } else if (first === ":") {
                return "+e(" + rest + ")+";
            } else {
                return ";" + part + ";o+=";
            }
        }
    }

    var argumentNameRegExp = /^\w+/,
        encodeRegExp = /\$\{([^}]*)\}/g,
        escapedCurlyRegExp = /\\\}/g,
        curlyRegExp = /__CURLY__/g,
        escapedSharpRegExp = /\\#/g,
        sharpRegExp = /__SHARP__/g;


    Template = /** @lends kendo.Template */ {
        paramName: "data", // name of the parameter of the generated template
        useWithBlock: true, // whether to wrap the template in a with() block

        render: function (template, data) {
            var idx,
                length,
                html = "";

            for (idx = 0, length = data.length; idx < length; idx++) {
                html += template(data[idx]);
            }

            return html;
        },

        compile: function (template, options) {
            var settings = extend({}, this, options),
                paramName = settings.paramName,
                argumentName = paramName.match(argumentNameRegExp)[0],
                useWithBlock = settings.useWithBlock,
                functionBody = "var o,e=kendo.htmlEncode;",
                parts,
                idx;

            if (isFunction(template)) {
                if (template.length === 2) {
                    //looks like jQuery.template
                    return function (d) {
                        return template($, { data: d }).join("");
                    };
                }
                return template;
            }

            functionBody += useWithBlock ? "with(" + paramName + "){" : "";

            functionBody += "o=";

            parts = template
                .replace(escapedCurlyRegExp, "__CURLY__")
                .replace(encodeRegExp, "#=e($1)#")
                .replace(curlyRegExp, "}")
                .replace(escapedSharpRegExp, "__SHARP__")
                .split("#");

            for (idx = 0; idx < parts.length; idx++) {
                functionBody += compilePart(parts[idx], idx % 2 === 0);
            }

            functionBody += useWithBlock ? ";}" : ";";

            functionBody += "return o;";

            functionBody = functionBody.replace(sharpRegExp, "#");

            try {
                return new Function(argumentName, functionBody);
            } catch (e) {
                throw new Error(kendo.format("Invalid template:'{0}' Generated code:'{1}'", template, functionBody));
            }
        }
    };

    function pad(number) {
        return number < 10 ? "0" + number : number;
    }

    //JSON stringify
    (function () {
        var escapable = /[\\\"\x00-\x1f\x7f-\x9f\u00ad\u0600-\u0604\u070f\u17b4\u17b5\u200c-\u200f\u2028-\u202f\u2060-\u206f\ufeff\ufff0-\uffff]/g,
            gap,
            indent,
            meta = {
                "\b": "\\b",
                "\t": "\\t",
                "\n": "\\n",
                "\f": "\\f",
                "\r": "\\r",
                "\"": '\\"',
                "\\": "\\\\"
            },
            rep,
            toString = {}.toString;

        if (typeof Date.prototype.toJSON !== FUNCTION) {

            /** @ignore */
            Date.prototype.toJSON = function (key) {
                var that = this;

                return isFinite(that.valueOf()) ?
                    that.getUTCFullYear() + "-" +
                    pad(that.getUTCMonth() + 1) + "-" +
                    pad(that.getUTCDate()) + "T" +
                    pad(that.getUTCHours()) + ":" +
                    pad(that.getUTCMinutes()) + ":" +
                    pad(that.getUTCSeconds()) + "Z" : null;
            };

            String.prototype.toJSON = Number.prototype.toJSON = /** @ignore */ Boolean.prototype.toJSON = function (key) {
                return this.valueOf();
            };
        }

        function quote(string) {
            escapable.lastIndex = 0;
            return escapable.test(string) ? "\"" + string.replace(escapable, function (a) {
                var c = meta[a];
                return typeof c === STRING ? c :
                    "\\u" + ("0000" + a.charCodeAt(0).toString(16)).slice(-4);
            }) + "\"" : "\"" + string + "\"";
        }

        function str(key, holder) {
            var i,
                k,
                v,
                length,
                mind = gap,
                partial,
                value = holder[key],
                type;

            if (value && typeof value === OBJECT && typeof value.toJSON === FUNCTION) {
                value = value.toJSON(key);
            }

            if (typeof rep === FUNCTION) {
                value = rep.call(holder, key, value);
            }

            type = typeof value;
            if (type === STRING) {
                return quote(value);
            } else if (type === NUMBER) {
                return isFinite(value) ? String(value) : NULL;
            } else if (type === BOOLEAN || type === NULL) {
                return String(value);
            } else if (type === OBJECT) {
                if (!value) {
                    return NULL;
                }
                gap += indent;
                partial = [];
                if (toString.apply(value) === "[object Array]") {
                    length = value.length;
                    for (i = 0; i < length; i++) {
                        partial[i] = str(i, value) || NULL;
                    }
                    v = partial.length === 0 ? "[]" : gap ?
                        "[\n" + gap + partial.join(",\n" + gap) + "\n" + mind + "]" :
                        "[" + partial.join(",") + "]";
                    gap = mind;
                    return v;
                }
                if (rep && typeof rep === OBJECT) {
                    length = rep.length;
                    for (i = 0; i < length; i++) {
                        if (typeof rep[i] === STRING) {
                            k = rep[i];
                            v = str(k, value);
                            if (v) {
                                partial.push(quote(k) + (gap ? ": " : ":") + v);
                            }
                        }
                    }
                } else {
                    for (k in value) {
                        if (Object.hasOwnProperty.call(value, k)) {
                            v = str(k, value);
                            if (v) {
                                partial.push(quote(k) + (gap ? ": " : ":") + v);
                            }
                        }
                    }
                }

                v = partial.length === 0 ? "{}" : gap ?
                    "{\n" + gap + partial.join(",\n" + gap) + "\n" + mind + "}" :
                    "{" + partial.join(",") + "}";
                gap = mind;
                return v;
            }
        }

        if (typeof JSON.stringify !== FUNCTION) {
            JSON.stringify = function (value, replacer, space) {
                var i;
                gap = "";
                indent = "";

                if (typeof space === NUMBER) {
                    for (i = 0; i < space; i += 1) {
                        indent += " ";
                    }

                } else if (typeof space === STRING) {
                    indent = space;
                }

                rep = replacer;
                if (replacer && typeof replacer !== FUNCTION && (typeof replacer !== OBJECT || typeof replacer.length !== NUMBER)) {
                    throw new Error("JSON.stringify");
                }

                return str("", { "": value });
            };
        }
    })();

    // Date and Number formatting
    (function () {
        var dateFormatRegExp = /dddd|ddd|dd|d|MMMM|MMM|MM|M|yyyy|yy|HH|H|hh|h|mm|m|fff|ff|f|tt|ss|s|"[^"]*"|'[^']*'/g,
            standardFormatRegExp = /^(n|c|p|e)(\d*)$/i,
            literalRegExp = /["'].*?["']/g,
            commaRegExp = /\,/g,
            EMPTY = "",
            POINT = ".",
            COMMA = ",",
            SHARP = "#",
            ZERO = "0",
            PLACEHOLDER = "??",
            EN = "default";

        //cultures
        kendo.cultures = {
            "default": {
                name: EN,
                numberFormat: {
                    pattern: ["-n"],
                    decimals: 2,
                    ",": "",
                    ".": ".",
                    groupSize: [3],
                    percent: {
                        pattern: ["-n %", "n %"],
                        decimals: 2,
                        ",": "",
                        ".": ".",
                        groupSize: [3],
                        symbol: "%"
                    },
                    currency: {
                        pattern: ["($n)", "$n"],
                        decimals: 2,
                        ",": ",",
                        ".": ".",
                        groupSize: [3],
                        symbol: "$"
                    }
                },
                calendars: {
                    standard: {
                        days: {
                            names: ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"],
                            namesAbbr: ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"],
                            namesShort: ["Su", "Mo", "Tu", "We", "Th", "Fr", "Sa"]
                        },
                        months: {
                            names: ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"],
                            namesAbbr: ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"]
                        },
                        AM: ["AM", "am", "AM"],
                        PM: ["PM", "pm", "PM"],
                        patterns: {
                            d: "M/d/yyyy",
                            D: "dddd, MMMM dd, yyyy",
                            F: "dddd, MMMM dd, yyyy h:mm:ss tt",
                            g: "M/d/yyyy h:mm tt",
                            G: "M/d/yyyy h:mm:ss tt",
                            m: "MMMM dd",
                            M: "MMMM dd",
                            s: "yyyy'-'MM'-'ddTHH':'mm':'ss",
                            t: "h:mm tt",
                            T: "h:mm:ss tt",
                            u: "yyyy'-'MM'-'dd HH':'mm':'ss'Z'",
                            y: "MMMM, yyyy",
                            Y: "MMMM, yyyy"
                        },
                        "/": "/",
                        ":": ":",
                        firstDay: 0
                    }
                }
            }
        };


        function findCulture(culture) {
            if (culture) {
                if (culture.numberFormat) {
                    return culture;
                }

                if (typeof culture === STRING) {
                    var cultures = kendo.cultures;
                    return cultures[culture] || cultures[culture.split("-")[0]] || null;
                }

                return null;
            }

            return null;
        }

        function getCulture(culture) {
            if (culture) {
                culture = findCulture(culture);
            }

            return culture || kendo.cultures.current;
        }

        kendo.culture = function (cultureName) {
            var cultures = kendo.cultures, culture;

            if (cultureName !== undefined) {
                culture = findCulture(cultureName) || cultures[EN];
                culture.calendar = culture.calendars.standard;
                cultures.current = culture;
            } else {
                return cultures.current;
            }
        };

        kendo.findCulture = findCulture;
        kendo.getCulture = getCulture;

        //set current culture to en-US.

        kendo.culture(EN);

        function formatDate(date, format, culture) {
            culture = getCulture(culture);

            var calendar = culture.calendars.standard,
                days = calendar.days,
                months = calendar.months;

            format = calendar.patterns[format] || format;

            return format.replace(dateFormatRegExp, function (match) {
                var result;

                if (match === "d") {
                    result = date.getDate();
                } else if (match === "dd") {
                    result = pad(date.getDate());
                } else if (match === "ddd") {
                    result = days.namesAbbr[date.getDay()];
                } else if (match === "dddd") {
                    result = days.names[date.getDay()];
                } else if (match === "M") {
                    result = date.getMonth() + 1;
                } else if (match === "MM") {
                    result = pad(date.getMonth() + 1);
                } else if (match === "MMM") {
                    result = months.namesAbbr[date.getMonth()];
                } else if (match === "MMMM") {
                    result = months.names[date.getMonth()];
                } else if (match === "yy") {
                    result = pad(date.getFullYear() % 100);
                } else if (match === "yyyy") {
                    result = date.getFullYear();
                } else if (match === "h") {
                    result = date.getHours() % 12 || 12;
                } else if (match === "hh") {
                    result = pad(date.getHours() % 12 || 12);
                } else if (match === "H") {
                    result = date.getHours();
                } else if (match === "HH") {
                    result = pad(date.getHours());
                } else if (match === "m") {
                    result = date.getMinutes();
                } else if (match === "mm") {
                    result = pad(date.getMinutes());
                } else if (match === "s") {
                    result = date.getSeconds();
                } else if (match === "ss") {
                    result = pad(date.getSeconds());
                } else if (match === "f") {
                    result = math.floor(date.getMilliseconds() / 100);
                } else if (match === "ff") {
                    result = math.floor(date.getMilliseconds() / 10);
                } else if (match === "fff") {
                    result = date.getMilliseconds();
                } else if (match === "tt") {
                    result = date.getHours() < 12 ? calendar.AM[0] : calendar.PM[0];
                }

                return result !== undefined ? result : match.slice(1, match.length - 1);
            });
        }

        //number formatting
        function formatNumber(number, format, culture) {
            culture = getCulture(culture);

            var numberFormat = culture.numberFormat,
                groupSize = numberFormat.groupSize[0],
                groupSeparator = numberFormat[COMMA],
                decimal = numberFormat[POINT],
                precision = numberFormat.decimals,
                pattern = numberFormat.pattern[0],
                literals = [],
                symbol,
                isCurrency, isPercent,
                customPrecision,
                formatAndPrecision,
                negative = number < 0,
                integer,
                fraction,
                integerLength,
                fractionLength,
                replacement = EMPTY,
                value = EMPTY,
                idx,
                length,
                ch,
                hasGroup,
                hasNegativeFormat,
                decimalIndex,
                sharpIndex,
                zeroIndex,
                startZeroIndex,
                start = -1,
                end;

            //return empty string if no number
            if (number === undefined) {
                return EMPTY;
            }

            if (!isFinite(number)) {
                return number;
            }

            //if no format then return number.toString() or number.toLocaleString() if culture.name is not defined
            if (!format) {
                return culture.name.length ? number.toLocaleString() : number.toString();
            }

            formatAndPrecision = standardFormatRegExp.exec(format);

            /* standard formatting */
            if (formatAndPrecision) {
                format = formatAndPrecision[1].toLowerCase();

                isCurrency = format === "c";
                isPercent = format === "p";

                if (isCurrency || isPercent) {
                    //get specific number format information if format is currency or percent
                    numberFormat = isCurrency ? numberFormat.currency : numberFormat.percent;
                    groupSize = numberFormat.groupSize[0];
                    groupSeparator = numberFormat[COMMA];
                    decimal = numberFormat[POINT];
                    precision = numberFormat.decimals;
                    symbol = numberFormat.symbol;
                    pattern = numberFormat.pattern[negative ? 0 : 1];
                }

                customPrecision = formatAndPrecision[2];

                if (customPrecision) {
                    precision = +customPrecision;
                }

                //return number in exponential format
                if (format === "e") {
                    return customPrecision ? number.toExponential(precision) : number.toExponential(); // toExponential() and toExponential(undefined) differ in FF #653438.
                }

                // multiply if format is percent
                if (isPercent) {
                    number *= 100;
                }

                number = number.toFixed(precision);
                number = number.split(POINT);

                integer = number[0];
                fraction = number[1];

                //exclude "-" if number is negative.
                if (negative) {
                    integer = integer.substring(1);
                }

                value = integer;
                integerLength = integer.length;

                //add group separator to the number if it is longer enough
                if (integerLength >= groupSize) {
                    value = EMPTY;
                    for (idx = 0; idx < integerLength; idx++) {
                        if (idx > 0 && (integerLength - idx) % groupSize === 0) {
                            value += groupSeparator;
                        }
                        value += integer.charAt(idx);
                    }
                }

                if (fraction) {
                    value += decimal + fraction;
                }

                if (format === "n" && !negative) {
                    return value;
                }

                number = EMPTY;

                for (idx = 0, length = pattern.length; idx < length; idx++) {
                    ch = pattern.charAt(idx);

                    if (ch === "n") {
                        number += value;
                    } else if (ch === "$" || ch === "%") {
                        number += symbol;
                    } else {
                        number += ch;
                    }
                }

                return number;
            }

            //custom formatting
            //
            //separate format by sections.

            //make number positive
            if (negative) {
                number = -number;
            }

            format = format.split(";");
            if (negative && format[1]) {
                //get negative format
                format = format[1];
                hasNegativeFormat = true;
            } else if (number === 0) {
                //format for zeros
                format = format[2] || format[0];
                if (format.indexOf(SHARP) == -1 && format.indexOf(ZERO) == -1) {
                    //return format if it is string constant.
                    return format;
                }
            } else {
                format = format[0];
            }

            if (format.indexOf("'") > -1 || format.indexOf("\"") > -1) {
                format = format.replace(literalRegExp, function (match) {
                    literals.push(match);
                    return PLACEHOLDER;
                });
            }

            isCurrency = format.indexOf("$") != -1;
            isPercent = format.indexOf("%") != -1;

            //multiply number if the format has percent
            if (isPercent) {
                number *= 100;
            }

            if (isCurrency || isPercent) {
                //get specific number format information if format is currency or percent
                numberFormat = isCurrency ? numberFormat.currency : numberFormat.percent;
                groupSize = numberFormat.groupSize[0];
                groupSeparator = numberFormat[COMMA];
                decimal = numberFormat[POINT];
                precision = numberFormat.decimals;
                symbol = numberFormat.symbol;
            }

            hasGroup = format.indexOf(COMMA) > -1;
            if (hasGroup) {
                format = format.replace(commaRegExp, EMPTY);
            }

            decimalIndex = format.indexOf(POINT);
            length = format.length;

            if (decimalIndex != -1) {
                zeroIndex = format.lastIndexOf(ZERO);
                sharpIndex = format.lastIndexOf(SHARP);
                fraction = number.toString().split(POINT)[1] || EMPTY;

                if (sharpIndex > zeroIndex && fraction.length > (sharpIndex - zeroIndex)) {
                    idx = sharpIndex;
                } else if (zeroIndex != -1 && zeroIndex >= decimalIndex) {
                    idx = zeroIndex;
                }

                if (idx) {
                    number = number.toFixed(idx - decimalIndex);
                }

            } else {
                number = number.toFixed(0);
            }

            sharpIndex = format.indexOf(SHARP);
            startZeroIndex = zeroIndex = format.indexOf(ZERO);

            //define the index of the first digit placeholder
            if (sharpIndex == -1 && zeroIndex != -1) {
                start = zeroIndex;
            } else if (sharpIndex != -1 && zeroIndex == -1) {
                start = sharpIndex;
            } else {
                start = sharpIndex > zeroIndex ? zeroIndex : sharpIndex;
            }

            sharpIndex = format.lastIndexOf(SHARP);
            zeroIndex = format.lastIndexOf(ZERO);

            //define the index of the last digit placeholder
            if (sharpIndex == -1 && zeroIndex != -1) {
                end = zeroIndex;
            } else if (sharpIndex != -1 && zeroIndex == -1) {
                end = sharpIndex;
            } else {
                end = sharpIndex > zeroIndex ? sharpIndex : zeroIndex;
            }

            if (start == length) {
                end = start;
            }

            if (start != -1) {
                value = number.toString().split(POINT);
                integer = value[0];
                fraction = value[1] || EMPTY;

                integerLength = integer.length;
                fractionLength = fraction.length;

                //add group separator to the number if it is longer enough
                if (hasGroup) {
                    if (integerLength === groupSize && integerLength < decimalIndex - startZeroIndex) {
                        integer = groupSeparator + integer;
                    } else if (integerLength > groupSize) {
                        value = EMPTY;
                        for (idx = 0; idx < integerLength; idx++) {
                            if (idx > 0 && (integerLength - idx) % groupSize === 0) {
                                value += groupSeparator;
                            }
                            value += integer.charAt(idx);
                        }

                        integer = value;
                    }
                }

                number = format.substring(0, start);

                if (negative && !hasNegativeFormat) {
                    number += "-";
                }

                for (idx = start; idx < length; idx++) {
                    ch = format.charAt(idx);

                    if (decimalIndex == -1) {
                        if (end - idx < integerLength) {
                            number += integer;
                            break;
                        }
                    } else {
                        if (zeroIndex != -1 && zeroIndex < idx) {
                            replacement = EMPTY;
                        }

                        if ((decimalIndex - idx) <= integerLength && decimalIndex - idx > -1) {
                            number += integer;
                            idx = decimalIndex;
                        }

                        if (decimalIndex === idx) {
                            number += (fraction ? decimal : EMPTY) + fraction;
                            idx += end - decimalIndex + 1;
                            continue;
                        }
                    }

                    if (ch === ZERO) {
                        number += ch;
                        replacement = ch;
                    } else if (ch === SHARP) {
                        number += replacement;
                    }
                }

                if (end >= start) {
                    number += format.substring(end + 1);
                }

                //replace symbol placeholders
                if (isCurrency || isPercent) {
                    value = EMPTY;
                    for (idx = 0, length = number.length; idx < length; idx++) {
                        ch = number.charAt(idx);
                        value += (ch === "$" || ch === "%") ? symbol : ch;
                    }
                    number = value;
                }

                if (literals[0]) {
                    length = literals.length;
                    for (idx = 0; idx < length; idx++) {
                        number = number.replace(PLACEHOLDER, literals[idx]);
                    }
                }
            }

            return number;
        }

        var toString = function (value, fmt, culture) {
            if (fmt) {
                if (value instanceof Date) {
                    return formatDate(value, fmt, culture);
                } else if (typeof value === NUMBER) {
                    return formatNumber(value, fmt, culture);
                }
            }

            return value !== undefined ? value : "";
        };

        if (globalize) {
            toString = proxy(globalize.format, globalize);
        }

        kendo.convertCulture = function (controlId, value, defaultCulture) {
            var kendoNumericSpan = null;
            that = $("span[id='" + controlId + "']").data("kendoNumericTextBox");
            if (that != undefined && kendoNumericSpan != "") {
                if (defaultCulture == 1)
                    that.element.text(kendo.toString(parseFloat(that._parse(value, that.options.culture)), that.options.format, that.options.defaultCulture));
                else
                    that.element.text(kendo.toString(parseFloat(that._parse(value, that.options.defaultCulture)), that.options.format, that.options.culture));
                $("input[id='" + controlId + "']").val(value);
            }
            else {
                that = $("input[id='" + controlId + "']").data("kendoNumericTextBox");
                if (that != undefined && kendoNumericSpan != "") {
                    if (defaultCulture == 1) {
                        $("input[id='" + controlId + "']").val(kendo.toString(parseFloat(that._parse(value, that.options.culture)), that.options.format, that.options.defaultCulture));
                    }
                    else {
                        $("input[id='" + controlId + "']").val(kendo.toString(parseFloat(that._parse(value, that.options.defaultCulture)), that.options.format, that.options.culture));
                    }
                }
            }
        };

        kendo.format = function (fmt) {
            var values = arguments;

            return fmt.replace(formatRegExp, function (match, index, placeholderFormat) {
                var value = values[parseInt(index, 10) + 1];

                return toString(value, placeholderFormat ? placeholderFormat.substring(1) : "");
            });
        };

        kendo._extractFormat = function (format) {
            if (format.slice(0, 3) === "{0:") {
                format = format.slice(3, format.length - 1);
            }

            return format;
        };

        kendo.toString = toString;

        kendo.cultureValue = function (controlId, value) {
            var kendoNumericSpan = null;
            that = $("span[id='" + controlId + "']").data("kendoNumericTextBox");
            if (that != undefined && kendoNumericSpan != "") {
                that.element.text(kendo.toString(parseFloat(that._parse(value, that.options.defaultCulture)), that.options.format, that.options.culture));
            }
            $("input[id='" + controlId + "']").val(value);
        };
        kendo.ceil = function (value) {
            if (isNaN(value)) {
                return 0;
            }
            var weightRoundLimit = parseFloat(_SessionWeightRound_);
            var result = parseFloat(value).toFixed(2) - weightRoundLimit;
            return Math.ceil(result);
        }

        kendo.floor = function (value) {
            if (isNaN(value)) {
                return 0;
            }
            var weightRoundLimit = parseFloat(_SessionWeightRound_);
            var result = parseFloat(value).toFixed(2) - weightRoundLimit;
            return Math.floor(result);
        }
    })();



    (function () {
        var nonBreakingSpaceRegExp = /\u00A0/g,
            exponentRegExp = /[eE][\-+]?[0-9]+/,
            shortTimeZoneRegExp = /[+|\-]\d{1,2}/,
            longTimeZoneRegExp = /[+|\-]\d{1,2}:\d{2}/,
            formatsSequence = ["G", "g", "d", "F", "D", "y", "m", "T", "t"];

        function outOfRange(value, start, end) {
            return !(value >= start && value <= end);
        }

        function designatorPredicate(designator) {
            return designator.charAt(0);
        }

        function mapDesignators(designators) {
            return $.map(designators, designatorPredicate);
        }

        function parseExact(value, format, culture) {
            if (!value) {
                return null;
            }

            var lookAhead = function (match) {
                var i = 0;
                while (format[idx] === match) {
                    i++;
                    idx++;
                }
                if (i > 0) {
                    idx -= 1;
                }
                return i;
            },
                getNumber = function (size) {
                    var rg = new RegExp('^\\d{1,' + size + '}'),
                        match = value.substr(valueIdx, size).match(rg);

                    if (match) {
                        match = match[0];
                        valueIdx += match.length;
                        return parseInt(match, 10);
                    }
                    return null;
                },
                getIndexByName = function (names) {
                    var i = 0,
                        length = names.length,
                        name, nameLength;

                    for (; i < length; i++) {
                        name = names[i];
                        nameLength = name.length;

                        if (value.substr(valueIdx, nameLength).toUpperCase() == name.toUpperCase()) {
                            valueIdx += nameLength;
                            return i + 1;
                        }
                    }
                    return null;
                },
                checkLiteral = function () {
                    var result = false;
                    if (value.charAt(valueIdx) === format[idx]) {
                        valueIdx++;
                        result = true;
                    }
                    return result;
                },
                calendar = culture.calendars.standard,
                year = null,
                month = null,
                day = null,
                hours = null,
                minutes = null,
                seconds = null,
                milliseconds = null,
                idx = 0,
                valueIdx = 0,
                literal = false,
                date = new Date(),
                shortYearCutOff = 60,
                defaultYear = date.getFullYear(),
                ch, count, length, pattern,
                pmHour, UTC, ISO8601, matches,
                amDesignators, pmDesignators,
                hoursOffset, minutesOffset;

            if (!format) {
                format = "d"; //shord date format
            }

            //if format is part of the patterns get real format
            pattern = calendar.patterns[format];
            if (pattern) {
                format = pattern;
            }

            format = format.split("");
            length = format.length;

            for (; idx < length; idx++) {
                ch = format[idx];

                if (literal) {
                    if (ch === "'") {
                        literal = false;
                    } else {
                        checkLiteral();
                    }
                } else {
                    if (ch === "d") {
                        count = lookAhead("d");
                        day = count < 3 ? getNumber(2) : getIndexByName(calendar.days[count == 3 ? "namesAbbr" : "names"]);

                        if (day === null || outOfRange(day, 1, 31)) {
                            return null;
                        }
                    } else if (ch === "M") {
                        count = lookAhead("M");
                        month = count < 3 ? getNumber(2) : getIndexByName(calendar.months[count == 3 ? 'namesAbbr' : 'names']);

                        if (month === null || outOfRange(month, 1, 12)) {
                            return null;
                        }
                        month -= 1; //because month is zero based
                    } else if (ch === "y") {
                        count = lookAhead("y");
                        year = getNumber(count < 3 ? 2 : 4);
                        if (year === null) {
                            year = defaultYear;
                        }
                        if (year < shortYearCutOff) {
                            year = (defaultYear - defaultYear % 100) + year;
                        }
                    } else if (ch === "h") {
                        lookAhead("h");
                        hours = getNumber(2);
                        if (hours == 12) {
                            hours = 0;
                        }
                        if (hours === null || outOfRange(hours, 0, 11)) {
                            return null;
                        }
                    } else if (ch === "H") {
                        lookAhead("H");
                        hours = getNumber(2);
                        if (hours === null || outOfRange(hours, 0, 23)) {
                            return null;
                        }
                    } else if (ch === "m") {
                        lookAhead("m");
                        minutes = getNumber(2);
                        if (minutes === null || outOfRange(minutes, 0, 59)) {
                            return null;
                        }
                    } else if (ch === "s") {
                        lookAhead("s");
                        seconds = getNumber(2);
                        if (seconds === null || outOfRange(seconds, 0, 59)) {
                            return null;
                        }
                    } else if (ch === "f") {
                        count = lookAhead("f");
                        milliseconds = getNumber(count);
                        if (milliseconds === null || outOfRange(milliseconds, 0, 999)) {
                            return null;
                        }
                    } else if (ch === "t") {
                        count = lookAhead("t");
                        amDesignators = calendar.AM;
                        pmDesignators = calendar.PM;

                        if (count === 1) {
                            amDesignators = mapDesignators(amDesignators);
                            pmDesignators = mapDesignators(pmDesignators);
                        }

                        pmHour = getIndexByName(pmDesignators);
                        if (!pmHour && !getIndexByName(amDesignators)) {
                            return null;
                        }
                    }
                    else if (ch === "z") {
                        UTC = true;
                        count = lookAhead("z");

                        if (value.substr(valueIdx, 1) === "Z") {
                            if (!ISO8601) {
                                return null;
                            }

                            checkLiteral();
                            continue;
                        }

                        matches = value.substr(valueIdx, 6)
                                       .match(count > 2 ? longTimeZoneRegExp : shortTimeZoneRegExp);

                        if (!matches) {
                            return null;
                        }

                        matches = matches[0];
                        valueIdx = matches.length;
                        matches = matches.split(":");

                        hoursOffset = parseInt(matches[0], 10);
                        if (outOfRange(hoursOffset, -12, 13)) {
                            return null;
                        }

                        if (count > 2) {
                            minutesOffset = parseInt(matches[1], 10);
                            if (isNaN(minutesOffset) || outOfRange(minutesOffset, 0, 59)) {
                                return null;
                            }
                        }
                    } else if (ch === "T") {
                        ISO8601 = checkLiteral();
                    } else if (ch === "'") {
                        literal = true;
                        checkLiteral();
                    } else {
                        checkLiteral();
                    }
                }
            }

            if (pmHour && hours < 12) {
                hours += 12;
            }

            if (day === null) {
                day = 1;
            }

            if (UTC) {
                if (hoursOffset) {
                    hours += -hoursOffset;
                }

                if (minutesOffset) {
                    minutes += -minutesOffset;
                }

                return new Date(Date.UTC(year, month, day, hours, minutes, seconds, milliseconds));
            }

            return new Date(year, month, day, hours, minutes, seconds, milliseconds);
        }

        kendo.parseDate = function (value, formats, culture) {
            if (value instanceof Date) {
                return value;
            }

            var idx = 0,
                date = null,
                length, patterns;

            culture = kendo.getCulture(culture);

            if (!formats) {
                formats = [];
                patterns = culture.calendar.patterns;
                length = formatsSequence.length;

                for (; idx < length; idx++) {
                    formats[idx] = patterns[formatsSequence[idx]];
                }
                formats[idx] = "ddd MMM dd yyyy HH:mm:ss";
                formats[++idx] = "yyyy-MM-ddTHH:mm:ss.fffzzz";
                formats[++idx] = "yyyy-MM-ddTHH:mm:sszzz";
                formats[++idx] = "yyyy-MM-ddTHH:mmzzz";
                formats[++idx] = "yyyy-MM-ddTHH:mmzz";
                formats[++idx] = "yyyy-MM-dd";

                idx = 0;
            }

            formats = isArray(formats) ? formats : [formats];
            length = formats.length;

            for (; idx < length; idx++) {
                date = parseExact(value, formats[idx], culture);
                if (date) {
                    return date;
                }
            }

            return date;
        };

        kendo.parseInt = function (value, culture) {
            var result = kendo.parseFloat(value, culture);
            if (result) {
                result = result | 0;
            }
            return result;
        };

        kendo.parseFloat = function (value, culture, format) {
            if (!value && value !== 0) {
                return null;
            }

            if (typeof value === NUMBER) {
                return value;
            }

            value = value.toString();
            culture = kendo.getCulture(culture);

            var number = culture.numberFormat,
                percent = number.percent,
                currency = number.currency,
                symbol = currency.symbol,
                percentSymbol = percent.symbol,
                negative = value.indexOf("-") > -1,
                parts, isPercent;

            //handle exponential number
            if (exponentRegExp.test(value)) {
                value = parseFloat(value);
                if (isNaN(value)) {
                    value = null;
                }
                return value;
            }

            if (value.indexOf(symbol) > -1 || (format && format.toLowerCase().indexOf("c") > -1)) {
                number = currency;
                parts = number.pattern[0].replace("$", symbol).split("n");
                if (value.indexOf(parts[0]) > -1 && value.indexOf(parts[1]) > -1) {
                    value = value.replace(parts[0], "").replace(parts[1], "");
                    negative = true;
                }
            } else if (value.indexOf(percentSymbol) > -1) {
                isPercent = true;
                number = percent;
                symbol = percentSymbol;
            }

            value = value.replace("-", "")
                         .replace(symbol, "")
                         .replace(nonBreakingSpaceRegExp, " ")
                         .split(number[","].replace(nonBreakingSpaceRegExp, " ")).join("")
                         .replace(number["."], ".");

            value = parseFloat(value);

            if (isNaN(value)) {
                value = null;
            } else if (negative) {
                value *= -1;
            }

            if (value && isPercent) {
                value /= 100;
            }

            return value;
        };

        if (globalize) {
            kendo.parseDate = proxy(globalize.parseDate, globalize);
            kendo.parseFloat = proxy(globalize.parseFloat, globalize);
        }
    })();

    function wrap(element) {
        var browser = $.browser, percentage;

        if (!element.parent().hasClass("k-animation-container")) {
            var shadow = element.css(kendo.support.transitions.css + "box-shadow") || element.css("box-shadow"),
                radius = shadow ? shadow.match(boxShadowRegExp) || [0, 0, 0, 0, 0] : [0, 0, 0, 0, 0],
                blur = math.max((+radius[3]), +(radius[4] || 0)),
                left = (-radius[1]) + blur,
                right = (+radius[1]) + blur,
                bottom = (+radius[2]) + blur,
                width = element[0].style.width,
                height = element[0].style.height,
                percentWidth = percentRegExp.test(width),
                percentHeight = percentRegExp.test(height);

            if (browser.opera) { // Box shadow can't be retrieved in Opera
                left = right = bottom = 5;
            }

            percentage = percentWidth || percentHeight;

            if (!percentWidth) { width = element.outerWidth(); }
            if (!percentHeight) { height = element.outerHeight(); }

            element.wrap(
                         $("<div/>")
                         .addClass("k-animation-container")
                         .css({
                             width: (width > 175 ? 175 : width),
                             height: height,
                             marginLeft: -left,
                             paddingLeft: left,
                             paddingRight: right,
                             paddingBottom: bottom
                         }));

            if (percentage) {
                element.css({
                    width: "100%",
                    height: "100%",
                    boxSizing: "border-box",
                    mozBoxSizing: "border-box",
                    webkitBoxSizing: "border-box"
                });
            }
        } else {
            var wrapper = element.parent(".k-animation-container"),
                wrapperStyle = wrapper[0].style;

            if (wrapper.is(":hidden")) {
                wrapper.show();
            }

            percentage = percentRegExp.test(wrapperStyle.width) || percentRegExp.test(wrapperStyle.height);

            if (!percentage) {
                wrapper.css({
                    width: element.outerWidth(),
                    height: element.outerHeight()
                });
            }
        }

        if (browser.msie && math.floor(browser.version) <= 7) {
            element.css({
                zoom: 1
            });
        }

        return element.parent();
    }

    function deepExtend(destination) {
        var i = 1,
            length = arguments.length;

        for (i = 1; i < length; i++) {
            deepExtendOne(destination, arguments[i]);
        }

        return destination;
    }

    function deepExtendOne(destination, source) {
        var property,
            propValue,
            propType,
            destProp;

        for (property in source) {
            propValue = source[property];
            propType = typeof propValue;
            if (propType === OBJECT && propValue !== null && propValue.constructor !== Array) {
                if (propValue instanceof Date) {
                    destination[property] = new Date(propValue.getTime());
                } else {
                    destProp = destination[property];
                    if (typeof (destProp) === OBJECT) {
                        destination[property] = destProp || {};
                    } else {
                        destination[property] = {};
                    }
                    deepExtendOne(destination[property], propValue);
                }
            } else if (propType !== UNDEFINED) {
                destination[property] = propValue;
            }
        }

        return destination;
    }

    (function () {
        support.scrollbar = function () {
            var div = document.createElement("div"),
                result;

            div.style.cssText = "overflow:scroll;overflow-x:hidden;zoom:1;clear:both";
            div.innerHTML = "&nbsp;";
            document.body.appendChild(div);

            result = div.offsetWidth - div.scrollWidth;

            document.body.removeChild(div);
            return result;
        };

        var table = document.createElement("table");

        // Internet Explorer does not support setting the innerHTML of TBODY and TABLE elements
        try {
            table.innerHTML = "<tr><td></td></tr>";


            support.tbodyInnerHtml = true;
        } catch (e) {
            support.tbodyInnerHtml = false;
        }


        support.touch = "ontouchstart" in window;
        support.pointers = navigator.msPointerEnabled;


        var transitions = support.transitions = false;
        var transforms = support.transforms = false;
        support.isRtl = function (element) {
            return $(element).closest(".k-rtl").length > 0;
        };


        support.hasHW3D = ("WebKitCSSMatrix" in window && "m11" in new window.WebKitCSSMatrix()) || "MozPerspective" in document.documentElement.style || "msPerspective" in document.documentElement.style;
        support.hasNativeScrolling = typeof document.documentElement.style.webkitOverflowScrolling == "string";

        each(["Moz", "webkit", "O", "ms"], function () {
            var prefix = this.toString(),
                hasTransitions = typeof table.style[prefix + "Transition"] === STRING;

            if (hasTransitions || typeof table.style[prefix + "Transform"] === STRING) {
                var lowPrefix = prefix.toLowerCase();

                transforms = {
                    css: "-" + lowPrefix + "-",
                    prefix: prefix,
                    event: (lowPrefix === "o" || lowPrefix === "webkit") ? lowPrefix : ""
                };

                if (hasTransitions) {
                    transitions = transforms;
                    transitions.event = transitions.event ? transitions.event + "TransitionEnd" : "transitionend";
                }

                return false;
            }
        });

        support.transforms = transforms;
        support.transitions = transitions;


        support.devicePixelRatio = window.devicePixelRatio === undefined ? 1 : window.devicePixelRatio;

        support.detectOS = function (ua) {
            var os = false, minorVersion, match = [],
                agentRxs = {
                    fire: /(Silk)\/(\d+)\.(\d+(\.\d+)?)/,
                    android: /(Android|Android.*(?:Opera|Firefox).*?\/)\s*(\d+)\.(\d+(\.\d+)?)/,
                    iphone: /(iPhone|iPod).*OS\s+(\d+)[\._]([\d\._]+)/,
                    ipad: /(iPad).*OS\s+(\d+)[\._]([\d_]+)/,
                    meego: /(MeeGo).+NokiaBrowser\/(\d+)\.([\d\._]+)/,
                    webos: /(webOS)\/(\d+)\.(\d+(\.\d+)?)/,
                    blackberry: /(BlackBerry).*?Version\/(\d+)\.(\d+(\.\d+)?)/,
                    playbook: /(PlayBook).*?Tablet\s*OS\s*(\d+)\.(\d+(\.\d+)?)/,
                    winphone: /(IEMobile)\/(\d+)\.(\d+(\.\d+)?)/,
                    windows: /(MSIE)\s+(\d+)\.(\d+(\.\d+)?)/
                },
                osRxs = {
                    ios: /^i(phone|pad|pod)$/i,
                    android: /^android|fire$/i,
                    blackberry: /^blackberry|playbook/i,
                    windows: /windows|winphone/
                },
                formFactorRxs = {
                    tablet: /playbook|ipad|fire/i
                },
                browserRxs = {
                    omini: /Opera\sMini/i,
                    omobile: /Opera\sMobi/i,
                    firefox: /Firefox|Fennec/i,
                    mobilesafari: /version\/.*safari/i,
                    webkit: /webkit/i,
                    ie: /MSIE|Windows\sPhone/i
                },
                testRx = function (agent, rxs, dflt) {
                    for (var rx in rxs) {
                        if (rxs.hasOwnProperty(rx) && rxs[rx].test(agent)) {
                            return rx;
                        }
                    }
                    return dflt !== undefined ? dflt : agent;
                };

            for (var agent in agentRxs) {
                if (agentRxs.hasOwnProperty(agent)) {
                    match = ua.match(agentRxs[agent]);
                    if (match) {
                        if (agent == "windows" && "plugins" in navigator) { return false; } // Break if not Metro/Mobile Windows

                        os = {};
                        os.device = agent;
                        os.tablet = testRx(agent, formFactorRxs, false);
                        os.browser = testRx(ua, browserRxs, "default");
                        os.name = testRx(agent, osRxs);
                        os[os.name] = true;
                        os.majorVersion = match[2];
                        os.minorVersion = match[3].replace("_", ".");
                        minorVersion = os.minorVersion.replace(".", "").substr(0, 2);
                        os.flatVersion = os.majorVersion + minorVersion + (new Array(3 - (minorVersion.length < 3 ? minorVersion.length : 2)).join("0"));
                        os.appMode = window.navigator.standalone || (/file|local/).test(window.location.protocol) || typeof window.PhoneGap !== UNDEFINED || typeof window.cordova !== UNDEFINED; // Use file protocol to detect appModes.

                        if (os.android && support.devicePixelRatio < 1.5 && (window.outerWidth > 800 || window.outerHeight > 800)) {
                            os.tablet = agent;
                        }

                        break;
                    }
                }
            }
            return os;
        };


        support.mobileOS = support.detectOS(navigator.userAgent);

        support.zoomLevel = function () {
            return support.touch ? (document.documentElement.clientWidth / window.innerWidth) : 1;
        };


        support.eventCapture = document.documentElement.addEventListener;

        support.placeholder = "placeholder" in document.createElement("input");
        support.stableSort = (function () {
            var sorted = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12].sort(function () { return 0; });
            return sorted[0] === 0 && sorted[1] === 1 && sorted[2] === 2 && sorted[3] === 3 && sorted[4] === 4 &&
                sorted[5] === 5 && sorted[6] === 6 && sorted[7] === 7 && sorted[8] === 8 &&
                sorted[9] === 9 && sorted[10] === 10 && sorted[11] === 11 && sorted[12] === 12;
        })();

    })();


    function size(obj) {
        var result = 0, key;
        for (key in obj) {
            if (obj.hasOwnProperty(key) && key != "toJSON") { // Ignore fake IE7 toJSON.
                result++;
            }
        }

        return result;
    }

    function isNodeEmpty(element) {
        return $.trim($(element).contents().filter(function () { return this.nodeType != 8; }).html()) === "";
    }

    function getOffset(element, type) {
        if (!type) {
            type = "offset";
        }

        var result = element[type](),
            mobileOS = support.mobileOS;

        if (support.touch && mobileOS.ios && mobileOS.flatVersion < 410) { // Extra processing only in broken iOS'
            var offset = type == "offset" ? result : element.offset(),
                positioned = (result.left == offset.left && result.top == offset.top);

            if (positioned) {
                return {
                    top: result.top - window.scrollY,
                    left: result.left - window.scrollX
                };
            }
        }

        return result;
    }

    var directions = {
        left: { reverse: "right" },
        right: { reverse: "left" },
        down: { reverse: "up" },
        up: { reverse: "down" },
        top: { reverse: "bottom" },
        bottom: { reverse: "top" },
        "in": { reverse: "out" },
        out: { reverse: "in" }
    };

    function parseEffects(input) {
        var effects = {};

        each((typeof input === "string" ? input.split(" ") : input), function (idx) {
            effects[idx] = this;
        });

        return effects;
    }

    var fx = {
        promise: function (element, options) {
            if (options.show) {
                element.css({ display: element.data("olddisplay") || "block" }).css("display");
            }

            if (options.hide) {
                element.data("olddisplay", element.css("display")).hide();
            }

            if (options.init) {
                options.init();
            }

            if (options.completeCallback) {
                options.completeCallback(element); // call the external complete callback with the element
            }

            element.dequeue();
        },

        transitionPromise: function (element, destination, options) {
            var container = kendo.wrap(element);
            container.append(destination);

            element.hide();
            destination.show();

            if (options.completeCallback) {
                options.completeCallback(element); // call the external complete callback with the element
            }

            return element;
        }
    };

    function prepareAnimationOptions(options, duration, reverse, complete) {
        if (typeof options === STRING) {
            // options is the list of effect names separated by space e.g. animate(element, "fadeIn slideDown")

            // only callback is provided e.g. animate(element, options, function() {});
            if (isFunction(duration)) {
                complete = duration;
                duration = 400;
                reverse = false;
            }

            if (isFunction(reverse)) {
                complete = reverse;
                reverse = false;
            }

            if (typeof duration === BOOLEAN) {
                reverse = duration;
                duration = 400;
            }

            options = {
                effects: options,
                duration: duration,
                reverse: reverse,
                complete: complete
            };
        }

        return extend({
            //default options
            effects: {},
            duration: 400, //jQuery default duration
            reverse: false,
            init: noop,
            teardown: noop,
            hide: false,
            show: false
        }, options, { completeCallback: options.complete, complete: noop }); // Move external complete callback, so deferred.resolve can be always executed.

    }

    function animate(element, options, duration, reverse, complete) {
        element.each(function (idx, el) { // fire separate queues on every element to separate the callback elements
            el = $(el);
            el.queue(function () {
                fx.promise(el, prepareAnimationOptions(options, duration, reverse, complete));
            });
        });

        return element;
    }

    function animateTo(element, destination, options, duration, reverse, complete) {
        return fx.transitionPromise(element, destination, prepareAnimationOptions(options, duration, reverse, complete));
    }

    extend($.fn, /** @lends jQuery.fn */{
        kendoStop: function (clearQueue, gotoEnd) {
            return this.stop(clearQueue, gotoEnd);
        },

        kendoAnimate: function (options, duration, reverse, complete) {
            return animate(this, options, duration, reverse, complete);
        },

        kendoAnimateTo: function (destination, options, duration, reverse, complete) {
            return animateTo(this, destination, options, duration, reverse, complete);
        }
    });

    function toggleClass(element, classes, options, add) {
        if (classes) {
            classes = classes.split(" ");

            each(classes, function (idx, value) {
                element.toggleClass(value, add);
            });
        }

        return element;
    }

    extend($.fn, /** @lends jQuery.fn */{
        kendoAddClass: function (classes, options) {
            return toggleClass(this, classes, options, true);
        },
        kendoRemoveClass: function (classes, options) {
            return toggleClass(this, classes, options, false);
        },
        kendoToggleClass: function (classes, options, toggle) {
            return toggleClass(this, classes, options, toggle);
        }
    });

    var ampRegExp = /&/g,
        ltRegExp = /</g,
        gtRegExp = />/g;

    function htmlEncode(value) {
        return ("" + value).replace(ampRegExp, "&amp;").replace(ltRegExp, "&lt;").replace(gtRegExp, "&gt;");
    }

    var touchLocation = function (e) {
        var originalEvent = typeof e.pageX == UNDEFINED ? e.originalEvent : e;
        return {
            idx: support.pointers ? originalEvent.pointerId : 0,
            x: originalEvent.pageX,
            y: originalEvent.pageY
        };
    };

    var eventTarget = function (e) {
        return e.target;
    };

    if (support.touch) {
        /** @ignore */
        touchLocation = function (e, id) {
            var changedTouches = e.changedTouches || e.originalEvent.changedTouches;

            if (id) {
                var output = null;
                each(changedTouches, function (idx, value) {
                    if (id == value.identifier) {
                        output = {
                            idx: value.identifier,
                            x: value.pageX,
                            y: value.pageY
                        };
                    }
                });
                return output;
            } else {
                return {
                    idx: changedTouches[0].identifier,
                    x: changedTouches[0].pageX,
                    y: changedTouches[0].pageY
                };
            }
        };

        eventTarget = function (e) {
            var touches = "originalEvent" in e ? e.originalEvent.changedTouches : "changedTouches" in e ? e.changedTouches : null;

            return touches ? document.elementFromPoint(touches[0].clientX, touches[0].clientY) : null;
        };

        each(["swipe", "swipeLeft", "swipeRight", "swipeUp", "swipeDown", "doubleTap", "tap"], function (m, value) {
            $.fn[value] = function (callback) {
                return this.bind(value, callback);
            };
        });
    }

    if (support.touch) {
        support.mousedown = "touchstart";
        support.mouseup = "touchend";
        support.mousemove = "touchmove";
        support.mousecancel = "touchcancel";
        support.resize = "orientationchange";
    } else if (support.pointers) {
        support.mousemove = "MSPointerMove";
        support.mousedown = "MSPointerDown";
        support.mouseup = "MSPointerUp";
        support.mousecancel = "MSPointerCancel";
        support.resize = "orientationchange resize";
    } else {
        support.mousemove = "mousemove";
        support.mousedown = "mousedown";
        support.mouseup = "mouseup";
        support.mousecancel = "mouseleave";
        support.resize = "resize";
    }


    var wrapExpression = function (members) {
        var result = "d",
            index,
            idx,
            length,
            member,
            count = 1;

        for (idx = 0, length = members.length; idx < length; idx++) {
            member = members[idx];
            if (member !== "") {
                index = member.indexOf("[");

                if (index !== 0) {
                    if (index == -1) {
                        member = "." + member;
                    } else {
                        count++;
                        member = "." + member.substring(0, index) + " || {})" + member.substring(index);
                    }
                }

                count++;
                result += member + ((idx < length - 1) ? " || {})" : ")");
            }
        }
        return new Array(count).join("(") + result;
    },
    localUrlRe = /^([a-z]+:)?\/\//i;

    extend(kendo, /** @lends kendo */ {

        ui: kendo.ui || {},
        fx: kendo.fx || fx,
        data: kendo.data || {},
        mobile: kendo.mobile || {},
        dataviz: kendo.dataviz || { ui: {} },
        keys: {
            INSERT: 45,
            DELETE: 46,
            BACKSPACE: 8,
            TAB: 9,
            ENTER: 13,
            ESC: 27,
            LEFT: 37,
            UP: 38,
            RIGHT: 39,
            DOWN: 40,
            END: 35,
            HOME: 36,
            SPACEBAR: 32,
            PAGEUP: 33,
            PAGEDOWN: 34,
            F2: 113,
            F10: 121,
            F12: 123
        },
        support: support,
        animate: animate,
        ns: "",
        attr: function (value) {
            return "data-" + kendo.ns + value;
        },
        wrap: wrap,
        deepExtend: deepExtend,
        size: size,
        isNodeEmpty: isNodeEmpty,
        getOffset: getOffset,
        parseEffects: parseEffects,
        toggleClass: toggleClass,
        directions: directions,
        Observable: Observable,
        Class: Class,
        Template: Template,

        template: proxy(Template.compile, Template),

        render: proxy(Template.render, Template),
        stringify: proxy(JSON.stringify, JSON),
        touchLocation: touchLocation,
        eventTarget: eventTarget,
        htmlEncode: htmlEncode,
        isLocalUrl: function (url) {
            return url && !localUrlRe.test(url);
        },
        /** @ignore */
        expr: function (expression, safe) {
            expression = expression || "";

            if (expression && expression.charAt(0) !== "[") {
                expression = "." + expression;
            }

            if (safe) {
                expression = wrapExpression(expression.split("."));
            } else {
                expression = "d" + expression;
            }

            return expression;
        },
        /** @ignore */
        getter: function (expression, safe) {
            return getterCache[expression] = getterCache[expression] || new Function("d", "return " + kendo.expr(expression, safe));
        },
        /** @ignore */
        setter: function (expression) {
            return setterCache[expression] = setterCache[expression] || new Function("d,value", "d." + expression + "=value");
        },
        /** @ignore */
        accessor: function (expression) {
            return {
                get: kendo.getter(expression),
                set: kendo.setter(expression)
            };
        },
        /** @ignore */
        guid: function () {
            var id = "", i, random;

            for (i = 0; i < 32; i++) {
                random = math.random() * 16 | 0;

                if (i == 8 || i == 12 || i == 16 || i == 20) {
                    id += "-";
                }
                id += (i == 12 ? 4 : (i == 16 ? (random & 3 | 8) : random)).toString(16);
            }

            return id;
        },

        roleSelector: function (role) {
            return role.replace(/(\S+)/g, "[" + kendo.attr("role") + "=$1],").slice(0, -1);
        },

        /** @ignore */
        logToConsole: function (message) {
            var console = window.console;

            if (typeof (console) != "undefined" && console.log) {
                console.log(message);
            }
        }
    });

    var Widget = Observable.extend( /** @lends kendo.ui.Widget.prototype */ {

        init: function (element, options) {
            var that = this;

            that.element = $(element);

            Observable.fn.init.call(that);

            that.options = extend(true, {}, that.options, options);

            if (!that.element.attr(kendo.attr("role"))) {
                that.element.attr(kendo.attr("role"), (that.options.name || "").toLowerCase());
            }

            that.element.data("kendo" + that.options.prefix + that.options.name, that);

            that.bind(that.events, that.options);
        },

        events: [],

        options: {
            prefix: ""
        },

        setOptions: function (options) {
            $.extend(this.options, options);

            this.bind(this.events, options);
        }
    });

    kendo.notify = noop;

    var templateRegExp = /template$/i,
        jsonRegExp = /^\s*(?:\{(?:.|\n)*\}|\[(?:.|\n)*\])\s*$/,
        jsonFormatRegExp = /^\{(\d+)(:[^\}]+)?\}/,
        dashRegExp = /([A-Z])/g;

    function parseOption(element, option) {
        var value;

        if (option.indexOf("data") === 0) {
            option = option.substring(4);
            option = option.charAt(0).toLowerCase() + option.substring(1);
        }

        option = option.replace(dashRegExp, "-$1");
        value = element.getAttribute("data-" + kendo.ns + option);

        if (value === null) {
            value = undefined;
        } else if (value === "null") {
            value = null;
        } else if (value === "true") {
            value = true;
        } else if (value === "false") {
            value = false;
        } else if (!isNaN(parseFloat(value))) {
            value = parseFloat(value);
        } else if (jsonRegExp.test(value) && !jsonFormatRegExp.test(value)) {
            value = $.parseJSON(value);
        }

        return value;
    }

    function parseOptions(element, options) {
        var result = {},
            option,
            value;

        for (option in options) {
            value = parseOption(element, option);

            if (value !== undefined) {

                if (templateRegExp.test(option)) {
                    value = kendo.template($("#" + value).html());
                }

                result[option] = value;
            }
        }

        return result;
    }

    kendo.initWidget = function (element, options, roles) {
        var result,
            option,
            widget,
            idx,
            length,
            role,
            value,
            dataSource;

        // Preserve backwards compatibility with (element, options, namespace) signature, where namespace was kendo.ui
        if (!roles) {
            roles = kendo.ui.roles;
        } else if (roles.roles) {
            roles = roles.roles;
        }

        element = element.nodeType ? element : element[0];

        role = element.getAttribute("data-" + kendo.ns + "role");

        if (!role) {
            return;
        }

        widget = roles[role];

        if (!widget) {
            return;
        }

        dataSource = parseOption(element, "dataSource");

        options = $.extend({}, parseOptions(element, widget.fn.options), options);

        if (dataSource) {
            if (typeof dataSource === STRING) {
                options.dataSource = kendo.getter(dataSource)(window);
            } else {
                options.dataSource = dataSource;
            }
        }

        for (idx = 0, length = widget.fn.events.length; idx < length; idx++) {
            option = widget.fn.events[idx];

            value = parseOption(element, option);

            if (value !== undefined) {
                options[option] = kendo.getter(value)(window);
            }
        }

        result = $(element).data("kendo" + widget.fn.options.name);

        if (!result) {
            result = new widget(element, options);
        } else {
            result.setOptions(options);
        }

        return result;
    };

    kendo.init = function (element) {
        var namespaces = slice.call(arguments, 1),
            roles;

        if (!namespaces[0]) {
            namespaces = [kendo.ui, kendo.dataviz.ui];
        }

        roles = $.map(namespaces, function (namespace) { return namespace.roles; }).reverse();

        roles = extend.apply(null, [{}].concat(roles));

        $(element).find("[data-" + kendo.ns + "role]").andSelf().each(function () {
            kendo.initWidget(this, {}, roles);
        });
    };

    kendo.parseOptions = parseOptions;

    extend(kendo.ui, /** @lends kendo.ui */{
        Widget: Widget,
        roles: {},

        progress: function (container, toggle) {
            //var mask = container.find(".k-loading-mask");

            //if (toggle) {
            //    if (!mask.length) {
            //        mask = $("<div class='k-loading-mask'><span class='k-loading-text'>Loading...</span><div class='k-loading-image'/><div class='k-loading-color'/></div>")
            //            .width("100%").height("100%")
            //            .prependTo(container)
            //            .css({ top: container.scrollTop(), left: container.scrollLeft() });
            //    }
            //} else if (mask) {
            //    mask.remove();
            //}
        },

        plugin: function (widget, register, prefix) {
            var name = widget.fn.options.name,
                getter;

            register = register || kendo.ui;
            prefix = prefix || "";

            register[name] = widget;

            register.roles[name.toLowerCase()] = widget;

            getter = "getKendo" + prefix + name;
            name = "kendo" + prefix + name;

            $.fn[name] = function (options) {
                var value = this,
                    args;

                if (typeof options === STRING) {
                    args = slice.call(arguments, 1);

                    this.each(function () {
                        var widget = $.data(this, name),
                            method,
                            result;

                        if (!widget) {
                            throw new Error(kendo.format("Cannot call method '{0}' of {1} before it is initialized", options, name));
                        }

                        method = widget[options];

                        if (typeof method !== FUNCTION) {
                            throw new Error(kendo.format("Cannot find method '{0}' of {1}", options, name));
                        }

                        result = method.apply(widget, args);

                        if (result !== undefined) {
                            value = result;
                            return false;
                        }
                    });
                } else {
                    this.each(function () {
                        new widget(this, options);
                    });
                }

                return value;
            };

            $.fn[getter] = function () {
                return this.data(name);
            };
        }
    });

    var MobileWidget = Widget.extend(/** @lends kendo.mobile.ui.Widget.prototype */{

        init: function (element, options) {
            Widget.fn.init.call(this, element, options);
            this.wrapper = this.element;
        },

        options: {
            prefix: "Mobile"
        },

        events: [],

        viewShow: $.noop,

        view: function () {
            var viewElement = this.element.closest(kendo.roleSelector("view") + "," + kendo.roleSelector("splitview"));
            return viewElement.data("kendoMobileView") || viewElement.data("kendoMobileSplitView");
        }
    });


    extend(kendo.mobile, {
        init: function (element) {
            kendo.init(element, kendo.mobile.ui, kendo.ui, kendo.dataviz.ui);
        },


        ui: {
            Widget: MobileWidget,
            roles: {},
            plugin: function (widget) {
                kendo.ui.plugin(widget, kendo.mobile.ui, "Mobile");
            }
        }
    });


    kendo.touchScroller = function (element, options) {
        if (support.touch && kendo.mobile.ui.Scroller && !element.data("kendoMobileScroller")) {
            element.kendoMobileScroller(options);
            return element.data("kendoMobileScroller");
        } else {
            return false;
        }
    };

    kendo.preventDefault = function (e) {
        e.preventDefault();
    };

    /**
     * Retrieves the widget for a given element (if any)
     */
    kendo.widgetInstance = function (element, suite) {
        var widget = suite.roles[element.data(kendo.ns + "role")];

        if (widget) {
            return element.data("kendo" + widget.fn.options.prefix + widget.fn.options.name);
        }
    };


    kendo.onResize = function (callback) {
        var handler = callback;
        if (support.mobileOS.android) {
            handler = function () { setTimeout(callback, 200); };
        }

        $(window).on(support.resize, handler);
    };

    kendo.data = function (element, key) {
        return element.data(kendo.ns + key);
    };
})(jQuery);
(function ($, undefined) {

    var kendo = window.kendo,
        fx = kendo.fx,
        each = $.each,
        extend = $.extend,
        proxy = $.proxy,
        size = kendo.size,
        browser = $.browser,
        support = kendo.support,
        transforms = support.transforms,
        transitions = support.transitions,
        scaleProperties = { scale: 0, scalex: 0, scaley: 0, scale3d: 0 },
        translateProperties = { translate: 0, translatex: 0, translatey: 0, translate3d: 0 },
        hasZoom = (typeof document.documentElement.style.zoom !== "undefined") && !transforms,
        matrix3dRegExp = /matrix3?d?\s*\(.*,\s*([\d\.\-]+)\w*?,\s*([\d\.\-]+)\w*?,\s*([\d\.\-]+)\w*?,\s*([\d\.\-]+)\w*?/i,
        cssParamsRegExp = /^(-?[\d\.\-]+)?[\w\s]*,?\s*(-?[\d\.\-]+)?[\w\s]*/i,
        translateXRegExp = /translatex?$/i,
        oldEffectsRegExp = /(zoom|fade|expand)(\w+)/,
        singleEffectRegExp = /(zoom|fade|expand)/,
        unitRegExp = /[xy]$/i,
        transformProps = ["perspective", "rotate", "rotatex", "rotatey", "rotatez", "rotate3d", "scale", "scalex", "scaley", "scalez", "scale3d", "skew", "skewx", "skewy", "translate", "translatex", "translatey", "translatez", "translate3d", "matrix", "matrix3d"],
        transform2d = ["rotate", "scale", "scalex", "scaley", "skew", "skewx", "skewy", "translate", "translatex", "translatey", "matrix"],
        transform2units = { "rotate": "deg", scale: "", skew: "px", translate: "px" },
        cssPrefix = transforms.css,
        round = Math.round,
        BLANK = "",
        PX = "px",
        NONE = "none",
        AUTO = "auto",
        WIDTH = "width",
        HEIGHT = "height",
        HIDDEN = "hidden",
        ORIGIN = "origin",
        ABORT_ID = "abortId",
        OVERFLOW = "overflow",
        TRANSLATE = "translate",
        TRANSITION = cssPrefix + "transition",
        TRANSFORM = cssPrefix + "transform",
        PERSPECTIVE = cssPrefix + "perspective",
        BACKFACE = cssPrefix + "backface-visibility";

    kendo.directions = {
        left: {
            reverse: "right",
            property: "left",
            transition: "translatex",
            vertical: false,
            modifier: -1
        },
        right: {
            reverse: "left",
            property: "left",
            transition: "translatex",
            vertical: false,
            modifier: 1
        },
        down: {
            reverse: "up",
            property: "top",
            transition: "translatey",
            vertical: true,
            modifier: 1
        },
        up: {
            reverse: "down",
            property: "top",
            transition: "translatey",
            vertical: true,
            modifier: -1
        },
        top: {
            reverse: "bottom"
        },
        bottom: {
            reverse: "top"
        },
        "in": {
            reverse: "out",
            modifier: -1
        },
        out: {
            reverse: "in",
            modifier: 1
        }
    };

    extend($.fn, {
        kendoStop: function (clearQueue, gotoEnd) {
            if (transitions) {
                return kendo.fx.stopQueue(this, clearQueue || false, gotoEnd || false);
            } else {
                return this.stop(clearQueue, gotoEnd);
            }
        }
    });

    /* jQuery support for all transform animations (FF 3.5/3.6, Opera 10.x, IE9 */

    if (transforms && !transitions) {
        each(transform2d, function (idx, value) {
            $.fn[value] = function (val) {
                if (typeof val == "undefined") {
                    return animationProperty(this, value);
                } else {
                    var that = $(this)[0],
                        transformValue = value + "(" + val + transform2units[value.replace(unitRegExp, "")] + ")";

                    if (that.style.cssText.indexOf(TRANSFORM) == -1) {
                        $(this).css(TRANSFORM, transformValue);
                    } else {
                        that.style.cssText = that.style.cssText.replace(new RegExp(value + "\\(.*?\\)", "i"), transformValue);
                    }
                }
                return this;
            };

            $.fx.step[value] = function (fx) {
                $(fx.elem)[value](fx.now);
            };
        });

        var curProxy = $.fx.prototype.cur;
        $.fx.prototype.cur = function () {
            if (transform2d.indexOf(this.prop) != -1) {
                return parseFloat($(this.elem)[this.prop]());
            }

            return curProxy.apply(this, arguments);
        };
    }

    kendo.toggleClass = function (element, classes, options, add) {
        if (classes) {
            classes = classes.split(" ");

            if (transitions) {
                options = extend({
                    exclusive: "all",
                    duration: 400,
                    ease: "ease-out"
                }, options);

                element.css(TRANSITION, options.exclusive + " " + options.duration + "ms " + options.ease);
                setTimeout(function () {
                    element.css(TRANSITION, "").css(HEIGHT);
                }, options.duration); // TODO: this should fire a kendoAnimate session instead.
            }

            each(classes, function (idx, value) {
                element.toggleClass(value, add);
            });
        }

        return element;
    };

    kendo.parseEffects = function (input, mirror) {
        var effects = {};

        if (typeof input === "string") {
            each(input.split(" "), function (idx, value) {
                var redirectedEffect = !singleEffectRegExp.test(value),
                    resolved = value.replace(oldEffectsRegExp, function (match, $1, $2) {
                        return $1 + ":" + $2.toLowerCase();
                    }), // Support for old zoomIn/fadeOut style, now deprecated.
                    effect = resolved.split(":"),
                    direction = effect[1],
                    effectBody = {};

                if (effect.length > 1) {
                    effectBody.direction = (mirror && redirectedEffect ? kendo.directions[direction].reverse : direction);
                }

                effects[effect[0]] = effectBody;
            });
        } else {
            each(input, function (idx) {
                var direction = this.direction;

                if (direction && mirror && !singleEffectRegExp.test(idx)) {
                    this.direction = kendo.directions[direction].reverse;
                }

                effects[idx] = this;
            });
        }

        return effects;
    };

    function parseInteger(value) {
        return parseInt(value, 10);
    }

    function parseCSS(element, property) {
        return parseInteger(element.css(property));
    }

    function getComputedStyles(element, properties) {
        var styles = {};

        if (properties) {
            if (document.defaultView && document.defaultView.getComputedStyle) {
                var computedStyle = document.defaultView.getComputedStyle(element, "");

                each(properties, function (idx, value) {
                    styles[value] = computedStyle.getPropertyValue(value);
                });
            } else
                if (element.currentStyle) { // Not really needed
                    var style = element.currentStyle;

                    each(properties, function (idx, value) {
                        styles[value] = style[value.replace(/\-(\w)/g, function (strMatch, g1) { return g1.toUpperCase(); })];
                    });
                }
        } else {
            styles = document.defaultView.getComputedStyle(element, "");
        }

        return styles;
    }

    function slideToSlideIn(options) {
        options.effects.slideIn = options.effects.slide;
        delete options.effects.slide;
        delete options.complete;
        return options;
    }

    function parseTransitionEffects(options) {
        var effects = options.effects,
            mirror;

        if (effects === "zoom") {
            effects = "zoomIn fadeIn";
        }
        if (effects === "slide") {
            effects = "slide:left";
        }
        if (effects === "fade") {
            effects = "fadeIn";
        }
        if (effects === "overlay") {
            effects = "slideIn:left";
        }
        if (/^overlay:(.+)$/.test(effects)) {
            effects = "slideIn:" + RegExp.$1;
        }

        mirror = options.reverse && /^(slide:)/.test(effects);

        if (mirror) {
            delete options.reverse;
        }

        options.effects = $.extend(kendo.parseEffects(effects, mirror), { show: true });

        return options;
    }

    function keys(obj) {
        var acc = [];
        for (var propertyName in obj) {
            acc.push(propertyName);
        }
        return acc;
    }

    function stopTransition(element, transition) {
        if (element.data(ABORT_ID)) {
            clearTimeout(element.data(ABORT_ID));
            element.removeData(ABORT_ID);
        }

        element.css(TRANSITION, "").css(TRANSITION);
        element.dequeue();
        transition.complete.call(element);
    }

    function activateTask(currentTransition) {
        var element = currentTransition.object, delay = 0;

        if (!currentTransition) {
            return;
        }

        element.css(currentTransition.setup).css(TRANSITION);
        element.css(currentTransition.CSS).css(TRANSFORM);

        if (browser.mozilla) {
            element.one(transitions.event, function () { stopTransition(element, currentTransition); });
            delay = 50;
        }
        element.data(ABORT_ID, setTimeout(stopTransition, currentTransition.duration + delay, element, currentTransition));
    }

    function strip3DTransforms(properties) {
        for (var key in properties) {
            if (transformProps.indexOf(key) != -1 && transform2d.indexOf(key) == -1) {
                delete properties[key];
            }
        }

        return properties;
    }

    function evaluateCSS(element, properties, options) {
        var key, value;

        for (key in properties) {
            if ($.isFunction(properties[key])) {
                value = properties[key](element, options);
                if (value !== undefined) {
                    properties[key] = value;
                } else {
                    delete properties[key];
                }
            }

        }

        return properties;
    }

    function normalizeCSS(element, properties, options) {
        var transformation = [], cssValues = {}, lowerKey, key, value, exitValue, isTransformed;

        for (key in properties) {
            lowerKey = key.toLowerCase();
            isTransformed = transforms && transformProps.indexOf(lowerKey) != -1;

            if (!support.hasHW3D && isTransformed && transform2d.indexOf(lowerKey) == -1) {
                delete properties[key];
            } else {
                exitValue = false;

                if ($.isFunction(properties[key])) {
                    value = properties[key](element, options);
                    if (value !== undefined) {
                        exitValue = value;
                    }
                } else {
                    exitValue = properties[key];
                }

                if (exitValue !== false) {
                    if (isTransformed) {
                        transformation.push(key + "(" + exitValue + ")");
                    } else {
                        cssValues[key] = exitValue;
                    }
                }
            }
        }

        if (transformation.length) {
            cssValues[TRANSFORM] = transformation.join(" ");
        }

        return cssValues;
    }

    if (transitions) {

        extend(kendo.fx, {
            transition: function (element, properties, options) {

                options = extend({
                    duration: 200,
                    ease: "ease-out",
                    complete: null,
                    exclusive: "all"
                },
                    options
                );

                options.duration = $.fx ? $.fx.speeds[options.duration] || options.duration : options.duration;

                var css = normalizeCSS(element, properties, options),
                    currentTask = {
                        keys: keys(css),
                        CSS: css,
                        object: element,
                        setup: {},
                        duration: options.duration,
                        complete: options.complete
                    };
                currentTask.setup[TRANSITION] = options.exclusive + " " + options.duration + "ms " + options.ease;

                var oldKeys = element.data("keys") || [];
                $.merge(oldKeys, currentTask.keys);
                element.data("keys", $.unique(oldKeys));

                activateTask(currentTask);
            },

            stopQueue: function (element, clearQueue, gotoEnd) {

                if (element.data(ABORT_ID)) {
                    clearTimeout(element.data(ABORT_ID));
                    element.removeData(ABORT_ID);
                }

                var that = this, cssValues,
                    taskKeys = element.data("keys"),
                    retainPosition = (gotoEnd === false && taskKeys);

                if (retainPosition) {
                    cssValues = getComputedStyles(element[0], taskKeys);
                }

                element.css(TRANSITION, "").css(TRANSITION);

                if (retainPosition) {
                    element.css(cssValues);
                }

                element.removeData("keys");

                if (that.complete) {
                    that.complete.call(element);
                }

                element.stop(clearQueue);
                return element;
            }

        });
    }

    function animationProperty(element, property) {
        if (transforms) {
            var transform = element.css(TRANSFORM);
            if (transform == NONE) {
                return property == "scale" ? 1 : 0;
            }

            var match = transform.match(new RegExp(property + "\\s*\\(([\\d\\w\\.]+)")),
                computed = 0;

            if (match) {
                computed = parseInteger(match[1]);
            } else {
                match = transform.match(matrix3dRegExp) || [0, 0, 0, 0, 0];
                property = property.toLowerCase();

                if (translateXRegExp.test(property)) {
                    computed = parseFloat(match[3] / match[2]);
                } else if (property == "translatey") {
                    computed = parseFloat(match[4] / match[2]);
                } else if (property == "scale") {
                    computed = parseFloat(match[2]);
                } else if (property == "rotate") {
                    computed = parseFloat(Math.atan2(match[2], match[1]));
                }
            }

            return computed;
        } else {
            return parseFloat(element.css(property));
        }
    }

    function initDirection(element, direction, reverse) {
        var real = kendo.directions[direction],
            dir = reverse ? kendo.directions[real.reverse] : real;

        return { direction: dir, offset: -dir.modifier * (dir.vertical ? element.outerHeight() : element.outerWidth()) };
    }

    kendo.fx.promise = function (element, options) {
        var promises = [], effects;

        effects = kendo.parseEffects(options.effects);
        options.effects = effects;

        element.data("animating", true);

        var props = { keep: [], restore: [] }, css = {}, target,
            methods = { setup: [], teardown: [] }, properties = {},

            // create a promise for each effect
            promise = $.Deferred(function (deferred) {
                if (size(effects)) {
                    var opts = extend({}, options, { complete: deferred.resolve });

                    each(effects, function (effectName, settings) {
                        var effect = kendo.fx[effectName];

                        if (effect) {
                            var dir = kendo.directions[settings.direction];
                            if (settings.direction && dir) {
                                settings.direction = (options.reverse ? dir.reverse : settings.direction);
                            }

                            opts = extend(true, opts, settings);

                            each(methods, function (idx) {
                                if (effect[idx]) {
                                    methods[idx].push(effect[idx]);
                                }
                            });

                            each(props, function (idx) {
                                if (effect[idx]) {
                                    $.merge(props[idx], effect[idx]);
                                }
                            });

                            if (effect.css) {
                                css = extend(css, effect.css);
                            }
                        }
                    });

                    if (methods.setup.length) {
                        each($.unique(props.keep), function (idx, value) {
                            if (!element.data(value)) {
                                element.data(value, element.css(value));
                            }
                        });

                        if (options.show) {
                            css = extend(css, { display: element.data("olddisplay") || "block" }); // Add show to the set
                        }

                        if (transforms && !options.reset) {
                            css = evaluateCSS(element, css, opts);

                            target = element.data("targetTransform");

                            if (target) {
                                css = extend(target, css);
                            }
                        }
                        css = normalizeCSS(element, css, opts);

                        if (transforms && !transitions) {
                            css = strip3DTransforms(css);
                        }

                        element.css(css)
                               .css(TRANSFORM); // Nudge

                        each(methods.setup, function () { properties = extend(properties, this(element, opts)); });

                        if (kendo.fx.animate) {
                            options.init();
                            element.data("targetTransform", properties);
                            kendo.fx.animate(element, properties, opts);
                        }

                        return;
                    }
                } else if (options.show) {
                    element.css({ display: element.data("olddisplay") || "block" }).css("display");
                    options.init();
                }

                deferred.resolve();
            }).promise();

        promises.push(promise);

        //wait for all effects to complete
        $.when.apply(null, promises).then(function () {
            element
                .removeData("animating")
                .dequeue(); // call next animation from the queue

            if (options.hide) {
                element.data("olddisplay", element.css("display")).hide();
            }

            if (size(effects)) {
                var restore = function () {
                    each($.unique(props.restore), function (idx, value) {
                        element.css(value, element.data(value));
                    });
                };

                restore();
                if (hasZoom && !transforms) {
                    setTimeout(restore, 0); // Again jQuery callback in IE8-.
                }

                each(methods.teardown, function () { this(element, options); }); // call the internal completion callbacks
            }

            if (options.completeCallback) {
                options.completeCallback(element); // call the external complete callback with the element
            }
        });
    };

    kendo.fx.transitionPromise = function (element, destination, options) {
        kendo.fx.animateTo(element, destination, options);
        return element;
    };

    extend(kendo.fx, {
        animate: function (elements, properties, options) {
            var useTransition = options.transition !== false;
            delete options.transition;

            if (transitions && "transition" in fx && useTransition) {
                fx.transition(elements, properties, options);
            } else {
                if (transforms) {
                    elements.animate(strip3DTransforms(properties), { queue: false, show: false, hide: false, duration: options.duration, complete: options.complete }); // Stop animate from showing/hiding the element to be able to hide it later on.
                } else {
                    elements.each(function () {
                        var element = $(this),
                            multiple = {};

                        each(transformProps, function (idx, value) { // remove transforms to avoid IE and older browsers confusion
                            var params,
                                currentValue = properties ? properties[value] + " " : null; // We need to match

                            if (currentValue) {
                                var single = properties;

                                if (value in scaleProperties && properties[value] !== undefined) {
                                    params = currentValue.match(cssParamsRegExp);
                                    if (hasZoom) {
                                        var half = (1 - params[1]) / 2;
                                        extend(single, {
                                            zoom: +params[1],
                                            marginLeft: element.width() * half,
                                            marginTop: element.height() * half
                                        });
                                    } else if (transforms) {
                                        extend(single, {
                                            scale: +params[0]
                                        });
                                    }
                                } else {
                                    if (value in translateProperties && properties[value] !== undefined) {
                                        var position = element.css("position"),
                                            isFixed = (position == "absolute" || position == "fixed");

                                        if (!element.data(TRANSLATE)) {
                                            if (isFixed) {
                                                element.data(TRANSLATE, {
                                                    top: parseCSS(element, "top") || 0,
                                                    left: parseCSS(element, "left") || 0,
                                                    bottom: parseCSS(element, "bottom"),
                                                    right: parseCSS(element, "right")
                                                });
                                            } else {
                                                element.data(TRANSLATE, {
                                                    top: parseCSS(element, "marginTop") || 0,
                                                    left: parseCSS(element, "marginLeft") || 0
                                                });
                                            }
                                        }

                                        var originalPosition = element.data(TRANSLATE);

                                        params = currentValue.match(cssParamsRegExp);
                                        if (params) {

                                            var dX = value == TRANSLATE + "y" ? +null : +params[1],
                                                dY = value == TRANSLATE + "y" ? +params[1] : +params[2];

                                            if (isFixed) {
                                                if (!isNaN(originalPosition.right)) {
                                                    if (!isNaN(dX)) { extend(single, { right: originalPosition.right - dX }); }
                                                } else {
                                                    if (!isNaN(dX)) { extend(single, { left: originalPosition.left + dX }); }
                                                }

                                                if (!isNaN(originalPosition.bottom)) {
                                                    if (!isNaN(dY)) { extend(single, { bottom: originalPosition.bottom - dY }); }
                                                } else {
                                                    if (!isNaN(dY)) { extend(single, { top: originalPosition.top + dY }); }
                                                }
                                            } else {
                                                if (!isNaN(dX)) { extend(single, { marginLeft: originalPosition.left + dX }); }
                                                if (!isNaN(dY)) { extend(single, { marginTop: originalPosition.top + dY }); }
                                            }
                                        }
                                    }
                                }

                                if (!transforms && value != "scale" && value in single) {
                                    delete single[value];
                                }

                                if (single) {
                                    extend(multiple, single);
                                }
                            }
                        });

                        if (browser.msie) {
                            delete multiple.scale;
                        }

                        element.animate(multiple, { queue: false, show: false, hide: false, duration: options.duration, complete: options.complete }); // Stop animate from showing/hiding the element to be able to hide it later on.
                    });
                }
            }
        },

        animateTo: function (element, destination, options) {
            var direction,
                commonParent = element.parents().filter(destination.parents()).first(),
                originalOverflow;

            options = parseTransitionEffects(options);
            if (!support.mobileOS.android) {
                originalOverflow = commonParent.css(OVERFLOW);
                commonParent.css(OVERFLOW, "hidden");
            }

            $.each(options.effects, function (name, definition) {
                direction = direction || definition.direction;
            });

            function complete(animatedElement) {
                destination[0].style.cssText = "";
                element[0].style.cssText = ""; // Removing the whole style attribute breaks Android.
                if (!support.mobileOS.android) {
                    commonParent.css(OVERFLOW, originalOverflow);
                }
                if (options.completeCallback) {
                    options.completeCallback.call(element, animatedElement);
                }
            }

            options.complete = browser.msie ? function () { setTimeout(complete, 0); } : complete;
            options.reset = true; // Reset transforms if there are any.

            if ("slide" in options.effects) {
                element.kendoAnimate(options);
                destination.kendoAnimate(slideToSlideIn(options));
            } else {
                (options.reverse ? element : destination).kendoAnimate(options);
            }
        },

        fade: {
            keep: ["opacity"],
            css: {
                opacity: function (element, options) {
                    var opacity = element[0].style.opacity;
                    return options.effects.fade.direction == "in" && (!opacity || opacity == 1) ? 0 : 1;
                }
            },
            restore: ["opacity"],
            setup: function (element, options) {
                return extend({ opacity: options.effects.fade.direction == "out" ? 0 : 1 }, options.properties);
            }
        },
        zoom: {
            css: {
                scale: function (element, options) {
                    var scale = animationProperty(element, "scale");
                    return options.effects.zoom.direction == "in" ? (scale != 1 ? scale : "0.01") : 1;
                },
                zoom: function (element, options) {
                    var zoom = element[0].style.zoom;
                    return options.effects.zoom.direction == "in" && hasZoom ? (zoom ? zoom : "0.01") : undefined;
                }
            },
            setup: function (element, options) {
                var reverse = options.effects.zoom.direction == "out";

                if (hasZoom) {
                    var version = browser.version,
                        style = element[0].currentStyle,
                        width = style.width.indexOf("%") != -1 ? element.parent().width() : element.width(),
                        height = style.height.indexOf("%") != -1 ? element.parent().height() : parseInteger(style.height),
                        half = version < 9 && options.effects.fade ? 0 : (1 - (parseInteger(element.css("zoom")) / 100)) / 2; // Kill margins in IE7/8 if using fade

                    element.css({
                        marginLeft: width * (version < 8 ? 0 : half),
                        marginTop: height * half
                    });
                }

                return extend({ scale: reverse ? 0.01 : 1 }, options.properties);
            }
        },
        slide: {
            setup: function (element, options) {
                var reverse = options.reverse, extender = {},
                    init = initDirection(element, options.effects.slide.direction, reverse),
                    property = transforms && options.transition !== false ? init.direction.transition : init.direction.property;

                init.offset /= -(options.divisor || 1);
                if (!reverse) {
                    var origin = element.data(ORIGIN);
                    if (!origin && origin !== 0) {
                        element.data(ORIGIN, animationProperty(element, property));
                    }
                }

                extender[property] = reverse ? (element.data(ORIGIN) || 0) : (element.data(ORIGIN) || 0) + init.offset + PX;

                return extend(extender, options.properties);
            }
        },
        slideMargin: {
            setup: function (element, options) {
                var origin = element.data(ORIGIN),
                    offset = options.offset, margin,
                    extender = {}, reverse = options.reverse;

                if (!reverse && !origin && origin !== 0) {
                    element.data(ORIGIN, parseFloat(element.css("margin-" + options.axis)));
                }

                margin = (element.data(ORIGIN) || 0);
                extender["margin-" + options.axis] = !reverse ? margin + offset : margin;
                return extend(extender, options.properties);
            }
        },
        slideTo: {
            setup: function (element, options) {
                var offset = (options.offset + "").split(","),
                    extender = {}, reverse = options.reverse;

                if (transforms && options.transition !== false) {
                    extender.translatex = !reverse ? offset[0] : 0;
                    extender.translatey = !reverse ? offset[1] : 0;
                } else {
                    extender.left = !reverse ? offset[0] : 0;
                    extender.top = !reverse ? offset[1] : 0;
                }
                element.css("left");

                return extend(extender, options.properties);
            }
        },
        slideIn: {
            css: {
                translatex: function (element, options) {
                    var init = initDirection(element, options.effects.slideIn.direction, options.reverse);
                    return init.direction.transition == "translatex" ? (!options.reverse ? init.offset : 0) + PX : undefined;
                },
                translatey: function (element, options) {
                    var init = initDirection(element, options.effects.slideIn.direction, options.reverse);
                    return init.direction.transition == "translatey" ? (!options.reverse ? init.offset : 0) + PX : undefined;
                }
            },
            setup: function (element, options) {
                var reverse = options.reverse,
                    init = initDirection(element, options.effects.slideIn.direction, reverse),
                    extender = {};

                if (transforms && options.transition !== false) {
                    extender[init.direction.transition] = (reverse ? init.offset : 0) + PX;
                } else {
                    if (!reverse) {
                        element.css(init.direction.property, init.offset + PX);
                    }
                    extender[init.direction.property] = (reverse ? init.offset : 0) + PX;
                    element.css(init.direction.property);
                }

                return extend(extender, options.properties);
            }
        },
        expand: {
            keep: [OVERFLOW],
            css: { overflow: HIDDEN },
            restore: [OVERFLOW],
            setup: function (element, options) {
                var reverse = options.reverse,
                    direction = options.effects.expand.direction,
                    property = (direction ? direction == "vertical" : true) ? HEIGHT : WIDTH,
                    setLength = element[0].style[property],
                    oldLength = element.data(property),
                    length = parseFloat(oldLength || setLength) || round(element.css(property, AUTO)[property]()),
                    completion = {};

                completion[property] = (reverse ? 0 : length) + PX;
                element.css(property, reverse ? length : 0).css(property);
                if (oldLength === undefined) {
                    element.data(property, setLength);
                }

                return extend(completion, options.properties);
            },
            teardown: function (element, options) {
                var direction = options.effects.expand.direction,
                    property = (direction ? direction == "vertical" : true) ? HEIGHT : WIDTH,
                    length = element.data(property);
                if (length == AUTO || length === BLANK) {
                    setTimeout(function () { element.css(property, AUTO).css(property); }, 0); // jQuery animate complete callback in IE is called before the last animation step!
                }
            }
        },
        flip: {
            css: {
                rotatex: function (element, options) {
                    return options.effects.flip.direction == "vertical" ? options.reverse ? "180deg" : "0deg" : undefined;
                },
                rotatey: function (element, options) {
                    return options.effects.flip.direction == "horizontal" ? options.reverse ? "180deg" : "0deg" : undefined;
                }
            },
            setup: function (element, options) {
                var rotation = options.effects.flip.direction == "horizontal" ? "rotatey" : "rotatex",
                    reverse = options.reverse, parent = element.parent(),
                    degree = options.degree, face = options.face, back = options.back,
                    faceRotation = rotation + (reverse ? "(180deg)" : "(0deg)"),
                    backRotation = rotation + (reverse ? "(0deg)" : "(180deg)"),
                    completion = {};

                if (support.hasHW3D) {
                    if (parent.css(PERSPECTIVE) == NONE) {
                        parent.css(PERSPECTIVE, 500);
                    }

                    element.css(cssPrefix + "transform-style", "preserve-3d");
                    face.css(BACKFACE, HIDDEN).css(TRANSFORM, faceRotation).css("z-index", reverse ? 0 : -1);
                    back.css(BACKFACE, HIDDEN).css(TRANSFORM, backRotation).css("z-index", reverse ? -1 : 0);
                    completion[rotation] = (reverse ? "-" : "") + (degree ? degree : 180) + "deg";
                } else {
                    if (kendo.size(options.effects) == 1) {
                        options.duration = 0;
                    }
                }
                face.show();
                back.show();

                return extend(completion, options.properties);
            },
            teardown: function (element, options) {
                options[options.reverse ? "back" : "face"].hide();

                if (support.hasHW3D) {
                    $().add(options.face).add(options.back).add(element)
                        .css(BACKFACE, "");
                }
            }
        },
        simple: {
            setup: function (element, options) {
                return options.properties;
            }
        }
    });

    kendo.fx.expandVertical = kendo.fx.expand; // expandVertical is deprecated.

    var animationFrame = window.requestAnimationFrame ||
                          window.webkitRequestAnimationFrame ||
                          window.mozRequestAnimationFrame ||
                          window.oRequestAnimationFrame ||
                          window.msRequestAnimationFrame ||
                          function (callback) { setTimeout(callback, 1000 / 60); };

    var Animation = kendo.Class.extend({
        init: function () {
            var that = this;
            that._tickProxy = proxy(that._tick, that);
            that._started = false;
        },

        tick: $.noop,
        done: $.noop,
        onEnd: $.noop,
        onCancel: $.noop,

        start: function () {
            this._started = true;
            animationFrame(this._tickProxy);
        },

        cancel: function () {
            this._started = false;
            this.onCancel();
        },

        _tick: function () {
            var that = this;
            if (!that._started) { return; }

            that.tick();

            if (!that.done()) {
                animationFrame(that._tickProxy);
            } else {
                that._started = false;
                that.onEnd();
            }
        }
    });

    var Transition = Animation.extend({
        init: function (options) {
            var that = this;
            extend(that, options);
            Animation.fn.init.call(that);
        },

        done: function () {
            return this.timePassed() >= this.duration;
        },

        timePassed: function () {
            return Math.min(this.duration, (+new Date()) - this.startDate);
        },

        moveTo: function (options) {
            var that = this,
                movable = that.movable;

            that.initial = movable[that.axis];
            that.delta = options.location - that.initial;

            that.duration = options.duration || 300;

            that.tick = that._easeProxy(options.ease);

            that.startDate = +new Date();
            that.start();
        },

        _easeProxy: function (ease) {
            var that = this;

            return function () {
                that.movable.moveAxis(that.axis, ease(that.timePassed(), that.initial, that.delta, that.duration));
            };
        }
    });

    extend(Transition, {
        easeOutExpo: function (t, b, c, d) {
            return (t == d) ? b + c : c * (-Math.pow(2, -10 * t / d) + 1) + b;
        },

        easeOutBack: function (t, b, c, d, s) {
            s = 1.70158;
            return c * ((t = t / d - 1) * t * ((s + 1) * t + s) + 1) + b;
        }
    });

    fx.Animation = Animation;
    fx.Transition = Transition;
})(jQuery);
(function ($, undefined) {
    var kendo = window.kendo,
        extend = $.extend,
        odataFilters = {
            eq: "eq",
            neq: "ne",
            gt: "gt",
            gte: "ge",
            lt: "lt",
            lte: "le",
            contains: "substringof",
            endswith: "endswith",
            startswith: "startswith"
        },
        mappers = {
            pageSize: $.noop,
            page: $.noop,
            filter: function (params, filter) {
                if (filter) {
                    params.$filter = toOdataFilter(filter);
                }
            },
            sort: function (params, orderby) {
                var expr = $.map(orderby, function (value) {
                    var order = value.field.replace(/\./g, "/");

                    if (value.dir === "desc") {
                        order += " desc";
                    }

                    return order;
                }).join(",");

                if (expr) {
                    params.$orderby = expr;
                }
            },
            skip: function (params, skip) {
                if (skip) {
                    params.$skip = skip;
                }
            },
            take: function (params, take) {
                if (take) {
                    params.$top = take;
                }
            }
        },
        defaultDataType = {
            read: {
                dataType: "jsonp"
            }
        };

    function toOdataFilter(filter) {
        var result = [],
            logic = filter.logic || "and",
            idx,
            length,
            field,
            type,
            format,
            operator,
            value,
            ignoreCase,
            filters = filter.filters;

        for (idx = 0, length = filters.length; idx < length; idx++) {
            filter = filters[idx];
            field = filter.field;
            value = filter.value;
            operator = filter.operator;

            if (filter.filters) {
                filter = toOdataFilter(filter);
            } else {
                ignoreCase = filter.ignoreCase;
                field = field.replace(/\./g, "/");
                filter = odataFilters[operator];

                if (filter && value !== undefined) {
                    type = $.type(value);
                    if (type === "string") {
                        format = "'{1}'";
                        value = value.replace(/'/g, "''");

                        if (ignoreCase === true) {
                            field = "tolower(" + field + ")";
                        }

                    } else if (type === "date") {
                        format = "datetime'{1:yyyy-MM-ddTHH:mm:ss}'";
                    } else {
                        format = "{1}";
                    }

                    if (filter.length > 3) {
                        if (filter !== "substringof") {
                            format = "{0}({2}," + format + ")";
                        } else {
                            format = "{0}(" + format + ",{2})";
                        }
                    } else {
                        format = "{2} {0} " + format;
                    }

                    filter = kendo.format(format, filter, value, field);
                }
            }

            result.push(filter);
        }

        filter = result.join(" " + logic + " ");

        if (result.length > 1) {
            filter = "(" + filter + ")";
        }

        return filter;
    }

    extend(true, kendo.data, {
        schemas: {
            odata: {
                type: "json",
                data: function (data) {
                    return data.d.results || [data.d];
                },
                total: "d.__count"
            }
        },
        transports: {
            odata: {
                read: {
                    cache: true, // to prevent jQuery from adding cache buster
                    dataType: "jsonp",
                    jsonp: "$callback"
                },
                update: {
                    cache: true,
                    dataType: "json",
                    contentType: "application/json", // to inform the server the the request body is JSON encoded
                    type: "PUT" // can be PUT or MERGE
                },
                create: {
                    cache: true,
                    dataType: "json",
                    contentType: "application/json",
                    type: "POST" // must be POST to create new entity
                },
                destroy: {
                    cache: true,
                    dataType: "json",
                    type: "DELETE"
                },
                parameterMap: function (options, type) {
                    var params,
                        value,
                        option,
                        dataType;

                    options = options || {};
                    type = type || "read";
                    dataType = (this.options || defaultDataType)[type];
                    dataType = dataType ? dataType.dataType : "json";

                    if (type === "read") {
                        params = {
                            $inlinecount: "allpages"
                        };

                        if (dataType != "json") {
                            params.$format = "json";
                        }

                        for (option in options) {
                            if (mappers[option]) {
                                mappers[option](params, options[option]);
                            } else {
                                params[option] = options[option];
                            }
                        }
                    } else {
                        if (dataType !== "json") {
                            throw new Error("Only json dataType can be used for " + type + " operation.");
                        }

                        if (type !== "destroy") {
                            for (option in options) {
                                value = options[option];
                                if (typeof value === "number") {
                                    options[option] = value + "";
                                }
                            }

                            params = kendo.stringify(options);
                        }
                    }

                    return params;
                }
            }
        }
    });
})(jQuery);
(function ($, undefined) {
    var kendo = window.kendo,
        isArray = $.isArray,
        isPlainObject = $.isPlainObject,
        map = $.map,
        each = $.each,
        extend = $.extend,
        getter = kendo.getter,
        Class = kendo.Class;

    var XmlDataReader = Class.extend({
        init: function (options) {
            var that = this,
                total = options.total,
                model = options.model,
                data = options.data;

            if (model) {
                if (isPlainObject(model)) {
                    if (model.fields) {
                        each(model.fields, function (field, value) {
                            if (isPlainObject(value) && value.field) {
                                value = extend(value, { field: that.getter(value.field) });
                            } else {
                                value = { field: that.getter(value) };
                            }
                            model.fields[field] = value;
                        });
                    }
                    var id = model.id;
                    if (id) {
                        var idField = {};

                        idField[that.xpathToMember(id, true)] = { field: that.getter(id) };
                        model.fields = extend(idField, model.fields);
                        model.id = that.xpathToMember(id);
                    }
                    model = kendo.data.Model.define(model);
                }

                that.model = model;
            }

            if (total) {
                total = that.getter(total);
                that.total = function (data) {
                    return parseInt(total(data), 10);
                };
            }

            if (data) {
                data = that.xpathToMember(data);
                that.data = function (value) {
                    var result = that.evaluate(value, data),
                        modelInstance;

                    result = isArray(result) ? result : [result];

                    if (that.model && model.fields) {
                        modelInstance = new that.model();

                        return map(result, function (value) {
                            if (value) {
                                var record = {}, field;

                                for (field in model.fields) {
                                    record[field] = modelInstance._parse(field, model.fields[field].field(value));
                                }

                                return record;
                            }
                        });
                    }

                    return result;
                };
            }
        },
        total: function (result) {
            return this.data(result).length;
        },
        errors: function (data) {
            return data ? data.errors : null;
        },
        parseDOM: function (element) {
            var result = {},
                parsedNode,
                node,
                nodeType,
                nodeName,
                member,
                attribute,
                attributes = element.attributes,
                attributeCount = attributes.length,
                idx;

            for (idx = 0; idx < attributeCount; idx++) {
                attribute = attributes[idx];
                result["@" + attribute.nodeName] = attribute.nodeValue;
            }

            for (node = element.firstChild; node; node = node.nextSibling) {
                nodeType = node.nodeType;

                if (nodeType === 3 || nodeType === 4) {
                    // text nodes or CDATA are stored as #text field
                    result["#text"] = node.nodeValue;
                } else if (nodeType === 1) {
                    // elements are stored as fields
                    parsedNode = this.parseDOM(node);

                    nodeName = node.nodeName;

                    member = result[nodeName];

                    if (isArray(member)) {
                        // elements of same nodeName are stored as array
                        member.push(parsedNode);
                    } else if (member !== undefined) {
                        member = [member, parsedNode];
                    } else {
                        member = parsedNode;
                    }

                    result[nodeName] = member;
                }
            }
            return result;
        },

        evaluate: function (value, expression) {
            var members = expression.split("."),
                member,
                result,
                length,
                intermediateResult,
                idx;

            while (member = members.shift()) {
                value = value[member];

                if (isArray(value)) {
                    result = [];
                    expression = members.join(".");

                    for (idx = 0, length = value.length; idx < length; idx++) {
                        intermediateResult = this.evaluate(value[idx], expression);

                        intermediateResult = isArray(intermediateResult) ? intermediateResult : [intermediateResult];

                        result.push.apply(result, intermediateResult);
                    }

                    return result;
                }
            }

            return value;
        },

        parse: function (xml) {
            var documentElement,
                tree,
                result = {};

            documentElement = xml.documentElement || $.parseXML(xml).documentElement;

            tree = this.parseDOM(documentElement);

            result[documentElement.nodeName] = tree;

            return result;
        },

        xpathToMember: function (member, raw) {
            if (!member) {
                return "";
            }

            member = member.replace(/^\//, "") // remove the first "/"
                           .replace(/\//g, "."); // replace all "/" with "."

            if (member.indexOf("@") >= 0) {
                // replace @attribute with '["@attribute"]'
                return member.replace(/\.?(@.*)/, raw ? '$1' : '["$1"]');
            }

            if (member.indexOf("text()") >= 0) {
                // replace ".text()" with '["#text"]'
                return member.replace(/(\.?text\(\))/, raw ? '#text' : '["#text"]');
            }

            return member;
        },
        getter: function (member) {
            return getter(this.xpathToMember(member), true);
        }
    });

    $.extend(true, kendo.data, {
        XmlDataReader: XmlDataReader,
        readers: {
            xml: XmlDataReader
        }
    });
})(jQuery);
//(function($, undefined) {
//    var kendo = window.kendo,
//        isArray = $.isArray,
//        isPlainObject = $.isPlainObject,
//        map = $.map,
//        each = $.each,
//        extend = $.extend,
//        getter = kendo.getter,
//        Class = kendo.Class;

//    var XmlDataReader = Class.extend({
//        init: function(options) {
//            var that = this,
//                total = options.total,
//                model = options.model,
//                data = options.data;

//            if (model) {
//                if (isPlainObject(model)) {
//                    if (model.fields) {
//                        each(model.fields, function(field, value) {
//                            if (isPlainObject(value) && value.field) {
//                                value = extend(value, { field: that.getter(value.field) });
//                            } else {
//                                value = { field: that.getter(value) };
//                            }
//                            model.fields[field] = value;
//                        });
//                    }
//                    var id = model.id;
//                    if (id) {
//                        var idField = {};

//                        idField[that.xpathToMember(id, true)] = { field : that.getter(id) };
//                        model.fields = extend(idField, model.fields);
//                        model.id = that.xpathToMember(id);
//                    }
//                    model = kendo.data.Model.define(model);
//                }

//                that.model = model;
//            }

//            if (total) {
//                total = that.getter(total);
//                that.total = function(data) {
//                    return parseInt(total(data), 10);
//                };
//            }

//            if (data) {
//                data = that.xpathToMember(data);
//                that.data = function(value) {
//                    var result = that.evaluate(value, data),
//                        modelInstance;

//                    result = isArray(result) ? result : [result];

//                    if (that.model && model.fields) {
//                        modelInstance = new that.model();

//                        return map(result, function(value) {
//                            if (value) {
//                                var record = {}, field;

//                                for (field in model.fields) {
//                                    record[field] = modelInstance._parse(field, model.fields[field].field(value));
//                                }

//                                return record;
//                            }
//                        });
//                    }

//                    return result;
//                };
//            }
//        },
//        total: function(result) {
//            return this.data(result).length;
//        },
//        errors: function(data) {
//            return data ? data.errors : null;
//        },
//        parseDOM: function(element) {
//            var result = {},
//                parsedNode,
//                node,
//                nodeType,
//                nodeName,
//                member,
//                attribute,
//                attributes = element.attributes,
//                attributeCount = attributes.length,
//                idx;

//            for (idx = 0; idx < attributeCount; idx++) {
//                attribute = attributes[idx];
//                result["@" + attribute.nodeName] = attribute.nodeValue;
//            }

//            for (node = element.firstChild; node; node = node.nextSibling) {
//                nodeType = node.nodeType;

//                if (nodeType === 3 || nodeType === 4) {
//                    // text nodes or CDATA are stored as #text field
//                    result["#text"] = node.nodeValue;
//                } else if (nodeType === 1) {
//                    // elements are stored as fields
//                    parsedNode = this.parseDOM(node);

//                    nodeName = node.nodeName;

//                    member = result[nodeName];

//                    if (isArray(member)) {
//                        // elements of same nodeName are stored as array
//                        member.push(parsedNode);
//                    } else if (member !== undefined) {
//                        member = [member, parsedNode];
//                    } else {
//                        member = parsedNode;
//                    }

//                    result[nodeName] = member;
//                }
//            }
//            return result;
//        },

//        evaluate: function(value, expression) {
//            var members = expression.split("."),
//                member,
//                result,
//                length,
//                intermediateResult,
//                idx;

//            while (member = members.shift()) {
//                value = value[member];

//                if (isArray(value)) {
//                    result = [];
//                    expression = members.join(".");

//                    for (idx = 0, length = value.length; idx < length; idx++) {
//                        intermediateResult = this.evaluate(value[idx], expression);

//                        intermediateResult = isArray(intermediateResult) ? intermediateResult : [intermediateResult];

//                        result.push.apply(result, intermediateResult);
//                    }

//                    return result;
//                }
//            }

//            return value;
//        },

//        parse: function(xml) {
//            var documentElement,
//                tree,
//                result = {};

//            documentElement = xml.documentElement || $.parseXML(xml).documentElement;

//            tree = this.parseDOM(documentElement);

//            result[documentElement.nodeName] = tree;

//            return result;
//        },

//        xpathToMember: function(member, raw) {
//            if (!member) {
//                return "";
//            }

//            member = member.replace(/^\//, "") // remove the first "/"
//                           .replace(/\//g, "."); // replace all "/" with "."

//            if (member.indexOf("@") >= 0) {
//                // replace @attribute with '["@attribute"]'
//                return member.replace(/\.?(@.*)/, raw? '$1':'["$1"]');
//            }

//            if (member.indexOf("text()") >= 0) {
//                // replace ".text()" with '["#text"]'
//                return member.replace(/(\.?text\(\))/, raw? '#text':'["#text"]');
//            }

//            return member;
//        },
//        getter: function(member) {
//            return getter(this.xpathToMember(member), true);
//        }
//    });

//    $.extend(true, kendo.data, {
//        XmlDataReader: XmlDataReader,
//        readers: {
//            xml: XmlDataReader
//        }
//    });
//})(jQuery);
(function ($, undefined) {
    var extend = $.extend,
        proxy = $.proxy,
        isFunction = $.isFunction,
        isPlainObject = $.isPlainObject,
        isEmptyObject = $.isEmptyObject,
        isArray = $.isArray,
        grep = $.grep,
        ajax = $.ajax,
        map,
        each = $.each,
        noop = $.noop,
        kendo = window.kendo,
        Observable = kendo.Observable,
        Class = kendo.Class,
        STRING = "string",
        FUNCTION = "function",
        CREATE = "create",
        SAVE = "save",
        READ = "read",
        UPDATE = "update",
        DESTROY = "destroy",
        CHANGE = "change",
        GET = "get",
        ERROR = "error",
        REQUESTSTART = "requestStart",
        crud = [CREATE, READ, UPDATE, DESTROY, SAVE],
        identity = function (o) { return o; },
        getter = kendo.getter,
        stringify = kendo.stringify,
        math = Math,
        push = [].push,
        join = [].join,
        pop = [].pop,
        splice = [].splice,
        shift = [].shift,
        slice = [].slice,
        unshift = [].unshift,
        toString = {}.toString,
        stableSort = kendo.support.stableSort,
        dateRegExp = /^\/Date\((.*?)\)\/$/,
        quoteRegExp = /(?=['\\])/g;

    var ObservableArray = Observable.extend({
        init: function (array, type) {
            var that = this;

            that.type = type || ObservableObject;

            Observable.fn.init.call(that);

            that.length = array.length;

            that.wrapAll(array, that);
        },

        toJSON: function () {
            var idx, length = this.length, value, json = new Array(length);

            for (idx = 0; idx < length; idx++) {
                value = this[idx];

                if (value instanceof ObservableObject) {
                    value = value.toJSON();
                }

                json[idx] = value;
            }

            return json;
        },

        parent: noop,

        wrapAll: function (source, target) {
            var that = this,
                idx,
                length,
                parent = function () {
                    return that;
                };

            target = target || [];

            for (idx = 0, length = source.length; idx < length; idx++) {
                target[idx] = that.wrap(source[idx], parent);
            }

            return target;
        },

        wrap: function (object, parent) {
            var that = this,
                observable;

            if (object !== null && toString.call(object) === "[object Object]") {
                observable = object instanceof that.type || object instanceof Model;

                if (!observable) {
                    object = object instanceof ObservableObject ? object.toJSON() : object;
                    object = new that.type(object);
                }

                object.parent = parent;

                object.bind(CHANGE, function (e) {
                    that.trigger(CHANGE, {
                        field: e.field,
                        node: e.node,
                        index: e.index,
                        items: e.items || [this],
                        action: e.action || "itemchange"
                    });
                });
            }

            return object;
        },

        push: function () {
            var index = this.length,
                items = this.wrapAll(arguments),
                result;

            result = push.apply(this, items);

            this.trigger(CHANGE, {
                action: "add",
                index: index,
                items: items
            });

            return result;
        },

        slice: slice,

        join: join,

        pop: function () {
            var length = this.length, result = pop.apply(this);

            if (length) {
                this.trigger(CHANGE, {
                    action: "remove",
                    index: length - 1,
                    items: [result]
                });
            }

            return result;
        },

        splice: function (index, howMany, item) {
            var items = this.wrapAll(slice.call(arguments, 2)),
                result, i, len;

            result = splice.apply(this, [index, howMany].concat(items));

            if (result.length) {
                this.trigger(CHANGE, {
                    action: "remove",
                    index: index,
                    items: result
                });

                for (i = 0, len = result.length; i < len; i++) {
                    if (result[i].children) {
                        result[i].unbind(CHANGE);
                    }
                }
            }

            if (item) {
                this.trigger(CHANGE, {
                    action: "add",
                    index: index,
                    items: items
                });
            }
            return result;
        },

        shift: function () {
            var length = this.length, result = shift.apply(this);

            if (length) {
                this.trigger(CHANGE, {
                    action: "remove",
                    index: 0,
                    items: [result]
                });
            }

            return result;
        },

        unshift: function () {
            var items = this.wrapAll(arguments),
                result;

            result = unshift.apply(this, items);

            this.trigger(CHANGE, {
                action: "add",
                index: 0,
                items: items
            });

            return result;
        },

        indexOf: function (item) {
            var that = this,
                idx,
                length;

            for (idx = 0, length = that.length; idx < length; idx++) {
                if (that[idx] === item) {
                    return idx;
                }
            }
            return -1;
        }
    });

    var ObservableObject = Observable.extend({
        init: function (value) {
            var that = this,
                member,
                field,
                parent = function () {
                    return that;
                },
                type;

            Observable.fn.init.call(this);

            for (field in value) {
                member = value[field];
                if (field.charAt(0) != "_") {
                    type = toString.call(member);

                    member = that.wrap(member, field, parent);
                }
                that[field] = member;
            }

            that.uid = kendo.guid();
        },

        shouldSerialize: function (field) {
            return this.hasOwnProperty(field) && field !== "_events" && typeof this[field] !== FUNCTION && field !== "uid";
        },

        toJSON: function () {
            var result = {}, value, field;

            for (field in this) {
                if (this.shouldSerialize(field)) {
                    value = this[field];

                    if (value instanceof ObservableObject || value instanceof ObservableArray) {
                        value = value.toJSON();
                    }

                    result[field] = value;
                }
            }

            return result;
        },

        get: function (field) {
            var that = this, result;

            that.trigger(GET, { field: field });

            if (field === "this") {
                result = that;
            } else {
                result = kendo.getter(field, true)(that);
            }

            return result;
        },

        _set: function (field, value) {
            var that = this;
            if (field.indexOf(".")) {
                var paths = field.split("."),
                    path = "";

                while (paths.length > 1) {
                    path += paths.shift();
                    var obj = kendo.getter(path, true)(that);
                    if (obj instanceof ObservableObject) {
                        obj.set(paths.join("."), value);
                        return;
                    }
                    path += ".";
                }
            }

            kendo.setter(field)(that, value);
        },

        set: function (field, value) {
            var that = this,
                current = that[field],
                parent = function () { return that; };

            if (current !== value) {
                if (!that.trigger("set", { field: field, value: value })) {

                    that._set(field, that.wrap(value, field, parent));

                    that.trigger(CHANGE, { field: field });
                }
            }
        },

        parent: noop,

        wrap: function (object, field, parent) {
            var that = this,
                type = toString.call(object),
                isObservableArray = object instanceof ObservableArray;

            if (object !== null && type === "[object Object]" && !(object instanceof DataSource) && !isObservableArray) {
                if (!(object instanceof ObservableObject)) {
                    object = new ObservableObject(object);
                }

                object.parent = parent;

                (function (field) {
                    object.bind(GET, function (e) {
                        e.field = field + "." + e.field;
                        that.trigger(GET, e);
                    });

                    object.bind(CHANGE, function (e) {
                        e.field = field + "." + e.field;
                        that.trigger(CHANGE, e);
                    });
                })(field);
            } else if (object !== null && (type === "[object Array]" || isObservableArray)) {
                if (!isObservableArray) {
                    object = new ObservableArray(object);
                }
                object.parent = parent;

                (function (field) {
                    object.bind(CHANGE, function (e) {
                        that.trigger(CHANGE, { field: field, index: e.index, items: e.items, action: e.action });
                    });
                })(field);
            } else if (object !== null && object instanceof DataSource) {
                object._parent = parent; // assign parent to the DataSource if part of observable object
            }


            return object;
        }
    });

    function equal(x, y) {
        if (x === y) {
            return true;
        }

        var xtype = $.type(x), ytype = $.type(y), field;

        if (xtype !== ytype) {
            return false;
        }

        if (xtype === "date") {
            return x.getTime() === y.getTime();
        }

        if (xtype !== "object" && xtype !== "array") {
            return false;
        }

        for (field in x) {
            if (!equal(x[field], y[field])) {
                return false;
            }
        }

        return true;
    }

    var parsers = {
        "number": function (value) {
            return kendo.parseFloat(value);
        },

        "date": function (value) {
            if (typeof value === STRING) {
                var date = dateRegExp.exec(value);
                if (date) {
                    return new Date(parseInt(date[1], 10));
                }
            }
            return kendo.parseDate(value);
        },

        "boolean": function (value) {
            if (typeof value === STRING) {
                return value.toLowerCase() === "true";
            }
            return !!value;
        },

        "string": function (value) {
            return value + "";
        },

        "default": function (value) {
            return value;
        }
    };

    var defaultValues = {
        "string": "",
        "number": 0,
        "date": new Date(),
        "boolean": false,
        "default": ""
    };

    var Model = ObservableObject.extend({
        init: function (data) {
            var that = this;

            if (!data || $.isEmptyObject(data)) {
                data = $.extend({}, that.defaults, data);
            }

            ObservableObject.fn.init.call(that, data);

            that.dirty = false;

            if (that.idField) {
                that.id = that.get(that.idField);

                if (that.id === undefined) {
                    that.id = that._defaultId;
                }
            }
        },

        shouldSerialize: function (field) {
            return ObservableObject.fn.shouldSerialize.call(this, field) && field !== "uid" && !(this.idField !== "id" && field === "id") && field !== "dirty" && field !== "_accessors";
        },

        _parse: function (field, value) {
            var that = this,
            parse;

            field = (that.fields || {})[field];
            if (field) {
                parse = field.parse;
                if (!parse && field.type) {
                    parse = parsers[field.type.toLowerCase()];
                }
            }

            return parse ? parse(value) : value;
        },

        editable: function (field) {
            field = (this.fields || {})[field];
            return field ? field.editable !== false : true;
        },

        set: function (field, value, initiator) {
            var that = this;

            if (that.editable(field)) {
                value = that._parse(field, value);

                if (!equal(value, that.get(field))) {
                    that.dirty = true;
                    ObservableObject.fn.set.call(that, field, value, initiator);
                }
            }
        },

        accept: function (data) {
            var that = this;

            extend(that, data);

            if (that.idField) {
                that.id = that.get(that.idField);
            }
            that.dirty = false;
        },

        isNew: function () {
            return this.id === this._defaultId;
        }
    });

    Model.define = function (base, options) {
        if (options === undefined) {
            options = base;
            base = Model;
        }

        var model,
            proto = extend({}, { defaults: {} }, options),
            name,
            field,
            type,
            value,
            id = proto.id;

        if (id) {
            proto.idField = id;
        }

        if (proto.id) {
            delete proto.id;
        }

        if (id) {
            proto.defaults[id] = proto._defaultId = "";
        }

        for (name in proto.fields) {
            field = proto.fields[name];
            type = field.type || "default";
            value = null;

            name = typeof (field.field) === STRING ? field.field : name;

            if (!field.nullable) {
                value = proto.defaults[name] = field.defaultValue !== undefined ? field.defaultValue : defaultValues[type.toLowerCase()];
            }

            if (options.id === name) {
                proto._defaultId = value;
            }

            proto.defaults[name] = value;

            field.parse = field.parse || parsers[type];
        }

        model = base.extend(proto);
        model.define = function (options) {
            return Model.define(model, options);
        };

        if (proto.fields) {
            model.fields = proto.fields;
            model.idField = proto.idField;
        }

        return model;
    };

    var Comparer = {
        selector: function (field) {
            return isFunction(field) ? field : getter(field);
        },

        asc: function (field) {
            var selector = this.selector(field);
            return function (a, b) {
                a = selector(a);
                b = selector(b);

                return a > b ? 1 : (a < b ? -1 : 0);
            };
        },

        desc: function (field) {
            var selector = this.selector(field);
            return function (a, b) {
                a = selector(a);
                b = selector(b);

                return a < b ? 1 : (a > b ? -1 : 0);
            };
        },

        create: function (descriptor) {
            return this[descriptor.dir.toLowerCase()](descriptor.field);
        },

        combine: function (comparers) {
            return function (a, b) {
                var result = comparers[0](a, b),
                    idx,
                    length;

                for (idx = 1, length = comparers.length; idx < length; idx++) {
                    result = result || comparers[idx](a, b);
                }

                return result;
            };
        }
    };

    var PositionComparer = extend({}, Comparer, {
        asc: function (field) {
            var selector = this.selector(field);
            return function (a, b) {
                var valueA = selector(a);
                var valueB = selector(b);

                if (valueA === valueB) {
                    return a.__position - b.__position;
                }
                return valueA > valueB ? 1 : (valueA < valueB ? -1 : 0);
            };
        },

        desc: function (field) {
            var selector = this.selector(field);
            return function (a, b) {
                var valueA = selector(a);
                var valueB = selector(b);

                if (valueA === valueB) {
                    return a.__position - b.__position;
                }

                return valueA < valueB ? 1 : (valueA > valueB ? -1 : 0);
            };
        }
    });

    map = function (array, callback) {
        var idx, length = array.length, result = new Array(length);

        for (idx = 0; idx < length; idx++) {
            result[idx] = callback(array[idx], idx, array);
        }

        return result;
    };

    var operators = (function () {

        function quote(value) {
            return value.replace(quoteRegExp, "\\");
        }

        function operator(op, a, b, ignore) {
            var date;

            if (b != null) {
                if (typeof b === STRING) {
                    b = quote(b);
                    date = dateRegExp.exec(b);
                    if (date) {
                        b = new Date(+date[1]);
                    } else if (ignore) {
                        b = "'" + b.toLowerCase() + "'";
                        a = "(" + a + " || '').toLowerCase()";
                    } else {
                        b = "'" + b + "'";
                    }
                }

                if (b.getTime) {
                    //b looks like a Date
                    a = "(" + a + "?" + a + ".getTime():" + a + ")";
                    b = b.getTime();
                }
            }

            return a + " " + op + " " + b;
        }

        return {
            eq: function (a, b, ignore) {
                return operator("==", a, b, ignore);
            },
            neq: function (a, b, ignore) {
                return operator("!=", a, b, ignore);
            },
            gt: function (a, b, ignore) {
                return operator(">", a, b, ignore);
            },
            gte: function (a, b, ignore) {
                return operator(">=", a, b, ignore);
            },
            lt: function (a, b, ignore) {
                return operator("<", a, b, ignore);
            },
            lte: function (a, b, ignore) {
                return operator("<=", a, b, ignore);
            },
            startswith: function (a, b, ignore) {
                if (ignore) {
                    a = a + ".toLowerCase()";
                    if (b) {
                        b = b.toLowerCase();
                    }
                }

                if (b) {
                    b = quote(b);
                }

                return a + ".lastIndexOf('" + b + "', 0) == 0";
            },
            endswith: function (a, b, ignore) {
                if (ignore) {
                    a = a + ".toLowerCase()";
                    if (b) {
                        b = b.toLowerCase();
                    }
                }

                if (b) {
                    b = quote(b);
                }

                return a + ".lastIndexOf('" + b + "') == " + a + ".length - " + (b || "").length;
            },
            contains: function (a, b, ignore) {
                if (ignore) {
                    a = "(" + a + " || '').toLowerCase()";
                    if (b) {
                        b = b.toLowerCase();
                    }
                }

                if (b) {
                    b = quote(b);
                }

                return a + ".indexOf('" + b + "') >= 0";
            },
            doesnotcontain: function (a, b, ignore) {
                if (ignore) {
                    a = "(" + a + " || '').toLowerCase()";
                    if (b) {
                        b = b.toLowerCase();
                    }
                }

                if (b) {
                    b = quote(b);
                }

                return a + ".indexOf('" + b + "') == -1";
            }
        };
    })();

    function Query(data) {
        this.data = data || [];
    }

    Query.filterExpr = function (expression) {
        var expressions = [],
            logic = { and: " && ", or: " || " },
            idx,
            length,
            filter,
            expr,
            fieldFunctions = [],
            operatorFunctions = [],
            field,
            operator,
            filters = expression.filters;

        for (idx = 0, length = filters.length; idx < length; idx++) {
            filter = filters[idx];
            field = filter.field;
            operator = filter.operator;

            if (filter.filters) {
                expr = Query.filterExpr(filter);
                //Nested function fields or operators - update their index e.g. __o[0] -> __o[1]
                filter = expr.expression
                .replace(/__o\[(\d+)\]/g, function (match, index) {
                    index = +index;
                    return "__o[" + (operatorFunctions.length + index) + "]";
                })
                .replace(/__f\[(\d+)\]/g, function (match, index) {
                    index = +index;
                    return "__f[" + (fieldFunctions.length + index) + "]";
                });

                operatorFunctions.push.apply(operatorFunctions, expr.operators);
                fieldFunctions.push.apply(fieldFunctions, expr.fields);
            } else {
                if (typeof field === FUNCTION) {
                    expr = "__f[" + fieldFunctions.length + "](d)";
                    fieldFunctions.push(field);
                } else {
                    expr = kendo.expr(field);
                }

                if (typeof operator === FUNCTION) {
                    filter = "__o[" + operatorFunctions.length + "](" + expr + ", " + filter.value + ")";
                    operatorFunctions.push(operator);
                } else {
                    filter = operators[(operator || "eq").toLowerCase()](expr, filter.value, filter.ignoreCase !== undefined ? filter.ignoreCase : true);
                }
            }

            expressions.push(filter);
        }

        return { expression: "(" + expressions.join(logic[expression.logic]) + ")", fields: fieldFunctions, operators: operatorFunctions };
    };

    function normalizeSort(field, dir) {
        if (field) {
            var descriptor = typeof field === STRING ? { field: field, dir: dir } : field,
            descriptors = isArray(descriptor) ? descriptor : (descriptor !== undefined ? [descriptor] : []);

            return grep(descriptors, function (d) { return !!d.dir; });
        }
    }

    var operatorMap = {
        "==": "eq",
        equals: "eq",
        isequalto: "eq",
        equalto: "eq",
        equal: "eq",
        "!=": "neq",
        ne: "neq",
        notequals: "neq",
        isnotequalto: "neq",
        notequalto: "neq",
        notequal: "neq",
        "<": "lt",
        islessthan: "lt",
        lessthan: "lt",
        less: "lt",
        "<=": "lte",
        le: "lte",
        islessthanorequalto: "lte",
        lessthanequal: "lte",
        ">": "gt",
        isgreaterthan: "gt",
        greaterthan: "gt",
        greater: "gt",
        ">=": "gte",
        isgreaterthanorequalto: "gte",
        greaterthanequal: "gte",
        ge: "gte",
        notsubstringof: "doesnotcontain"
    };

    function normalizeOperator(expression) {
        var idx,
        length,
        filter,
        operator,
        filters = expression.filters;

        if (filters) {
            for (idx = 0, length = filters.length; idx < length; idx++) {
                filter = filters[idx];
                operator = filter.operator;

                if (operator && typeof operator === STRING) {
                    filter.operator = operatorMap[operator.toLowerCase()] || operator;
                }

                normalizeOperator(filter);
            }
        }
    }

    function normalizeFilter(expression) {
        if (expression && !isEmptyObject(expression)) {
            if (isArray(expression) || !expression.filters) {
                expression = {
                    logic: "and",
                    filters: isArray(expression) ? expression : [expression]
                };
            }

            normalizeOperator(expression);

            return expression;
        }
    }

    Query.normalizeFilter = normalizeFilter;

    function normalizeAggregate(expressions) {
        return isArray(expressions) ? expressions : [expressions];
    }

    function normalizeGroup(field, dir) {
        var descriptor = typeof field === STRING ? { field: field, dir: dir } : field,
        descriptors = isArray(descriptor) ? descriptor : (descriptor !== undefined ? [descriptor] : []);

        return map(descriptors, function (d) { return { field: d.field, dir: d.dir || "asc", aggregates: d.aggregates }; });
    }

    Query.prototype = {
        toArray: function () {
            return this.data;
        },
        range: function (index, count) {
            return new Query(this.data.slice(index, index + count));
        },
        skip: function (count) {
            return new Query(this.data.slice(count));
        },
        take: function (count) {
            return new Query(this.data.slice(0, count));
        },
        select: function (selector) {
            return new Query(map(this.data, selector));
        },
        orderBy: function (selector) {
            var result = this.data.slice(0),
            comparer = isFunction(selector) || !selector ? Comparer.asc(selector) : selector.compare;

            return new Query(result.sort(comparer));
        },
        orderByDescending: function (selector) {
            return new Query(this.data.slice(0).sort(Comparer.desc(selector)));
        },
        sort: function (field, dir, comparer) {
            var idx,
            length,
            descriptors = normalizeSort(field, dir),
            comparers = [];

            comparer = comparer || Comparer;

            if (descriptors.length) {
                for (idx = 0, length = descriptors.length; idx < length; idx++) {
                    comparers.push(comparer.create(descriptors[idx]));
                }

                return this.orderBy({ compare: comparer.combine(comparers) });
            }

            return this;
        },

        filter: function (expressions) {
            var idx,
            current,
            length,
            compiled,
            predicate,
            data = this.data,
            fields,
            operators,
            result = [],
            filter;

            expressions = normalizeFilter(expressions);

            if (!expressions || expressions.filters.length === 0) {
                return this;
            }

            compiled = Query.filterExpr(expressions);
            fields = compiled.fields;
            operators = compiled.operators;

            predicate = filter = new Function("d, __f, __o", "return " + compiled.expression);

            if (fields.length || operators.length) {
                filter = function (d) {
                    return predicate(d, fields, operators);
                };
            }

            for (idx = 0, length = data.length; idx < length; idx++) {
                current = data[idx];

                if (filter(current)) {
                    result.push(current);
                }
            }
            return new Query(result);
        },

        group: function (descriptors, allData) {
            descriptors = normalizeGroup(descriptors || []);
            allData = allData || this.data;

            var that = this,
            result = new Query(that.data),
            descriptor;

            if (descriptors.length > 0) {
                descriptor = descriptors[0];
                result = result.groupBy(descriptor).select(function (group) {
                    var data = new Query(allData).filter([{ field: group.field, operator: "eq", value: group.value }]);
                    return {
                        field: group.field,
                        value: group.value,
                        items: descriptors.length > 1 ? new Query(group.items).group(descriptors.slice(1), data.toArray()).toArray() : group.items,
                        hasSubgroups: descriptors.length > 1,
                        aggregates: data.aggregate(descriptor.aggregates)
                    };
                });
            }
            return result;
        },

        groupBy: function (descriptor) {
            if (isEmptyObject(descriptor) || !this.data.length) {
                return new Query([]);
            }

            var field = descriptor.field,
                sorted = this._sortForGrouping(field, descriptor.dir || "asc"),
                accessor = kendo.accessor(field),
                item,
                groupValue = accessor.get(sorted[0], field),
                group = {
                    field: field,
                    value: groupValue,
                    items: []
                },
                currentValue,
                idx,
                len,
                result = [group];

            for (idx = 0, len = sorted.length; idx < len; idx++) {
                item = sorted[idx];
                currentValue = accessor.get(item, field);
                if (!groupValueComparer(groupValue, currentValue)) {
                    groupValue = currentValue;
                    group = {
                        field: field,
                        value: groupValue,
                        items: []
                    };
                    result.push(group);
                }
                group.items.push(item);
            }
            return new Query(result);
        },

        _sortForGrouping: function (field, dir) {
            var idx, length,
                data = this.data;

            if (!stableSort) {
                for (idx = 0, length = data.length; idx < length; idx++) {
                    data[idx].__position = idx;
                }

                data = new Query(data).sort(field, dir, PositionComparer).toArray();

                for (idx = 0, length = data.length; idx < length; idx++) {
                    delete data[idx].__position;
                }
                return data;
            }
            return this.sort(field, dir).toArray();
        },

        aggregate: function (aggregates) {
            var idx,
            len,
            result = {};

            if (aggregates && aggregates.length) {
                for (idx = 0, len = this.data.length; idx < len; idx++) {
                    calculateAggregate(result, aggregates, this.data[idx], idx, len);
                }
            }
            return result;
        }
    };

    function groupValueComparer(a, b) {
        if (a && a.getTime && b && b.getTime) {
            return a.getTime() === b.getTime();
        }
        return a === b;
    }

    function calculateAggregate(accumulator, aggregates, item, index, length) {
        aggregates = aggregates || [];
        var idx,
        aggr,
        functionName,
        len = aggregates.length;

        for (idx = 0; idx < len; idx++) {
            aggr = aggregates[idx];
            functionName = aggr.aggregate;
            var field = aggr.field;
            accumulator[field] = accumulator[field] || {};
            accumulator[field][functionName] = functions[functionName.toLowerCase()](accumulator[field][functionName], item, kendo.accessor(field), index, length);
        }
    }

    var functions = {
        sum: function (accumulator, item, accessor) {
            return (accumulator || 0) + accessor.get(item);
        },
        count: function (accumulator, item, accessor) {
            return (accumulator || 0) + 1;
        },
        average: function (accumulator, item, accessor, index, length) {
            accumulator = (accumulator || 0) + accessor.get(item);
            if (index == length - 1) {
                accumulator = accumulator / length;
            }
            return accumulator;
        },
        max: function (accumulator, item, accessor) {
            var value = accessor.get(item);

            accumulator = accumulator || 0;

            if (accumulator < value) {
                accumulator = value;
            }
            return accumulator;
        },
        min: function (accumulator, item, accessor) {
            var value = accessor.get(item);

            accumulator = (accumulator || value);

            if (accumulator > value) {
                accumulator = value;
            }
            return accumulator;
        }
    };

    function toJSON(array) {
        var idx, length = array.length, result = new Array(length);

        for (idx = 0; idx < length; idx++) {
            result[idx] = array[idx].toJSON();
        }

        return result;
    }

    function process(data, options) {
        options = options || {};

        var query = new Query(data),
            group = options.group,
            sort = normalizeGroup(group || []).concat(normalizeSort(options.sort || [])),
            total,
            filter = options.filter,
            skip = options.skip,
            take = options.take;

        if (filter) {
            query = query.filter(filter);
            total = query.toArray().length;
        }

        if (sort) {
            query = query.sort(sort);

            if (group) {
                data = query.toArray();
            }
        }

        if (skip !== undefined && take !== undefined) {
            query = query.range(skip, take);
        }

        if (group) {
            query = query.group(group, data);
        }

        return {
            total: total,
            data: query.toArray()
        };
    }

    function calculateAggregates(data, options) {
        options = options || {};

        var query = new Query(data),
            aggregates = options.aggregate,
            filter = options.filter;

        if (filter) {
            query = query.filter(filter);
        }

        return query.aggregate(aggregates);
    }

    var LocalTransport = Class.extend({
        init: function (options) {
            this.data = options.data;
        },

        read: function (options) {
            options.success(this.data);
        },
        update: function (options) {
            options.success(options.data);
        },
        create: function (options) {
            options.success(options.data);
        },
        destroy: noop
    });

    var RemoteTransport = Class.extend({
        init: function (options) {
            var that = this, parameterMap;

            options = that.options = extend({}, that.options, options);

            each(crud, function (index, type) {
                if (typeof options[type] === STRING) {
                    options[type] = {
                        url: options[type]
                    };
                }
            });

            that.cache = options.cache ? Cache.create(options.cache) : {
                find: noop,
                add: noop
            };

            parameterMap = options.parameterMap;

            that.parameterMap = isFunction(parameterMap) ? parameterMap : function (options) {
                var result = {};

                each(options, function (option, value) {
                    if (option in parameterMap) {
                        option = parameterMap[option];
                        if (isPlainObject(option)) {
                            value = option.value(value);
                            option = option.key;
                        }
                    }

                    result[option] = value;
                });

                return result;
            };
        },

        options: {
            parameterMap: identity
        },

        create: function (options) {
            return ajax(this.setup(options, CREATE));
        },

        save: function (options) {
            return ajax(this.setup(options, SAVE));
        },

        read: function (options) {
            var that = this,
                success,
                error,
                result,
                cache = that.cache;

            options = that.setup(options, READ);

            success = options.success || noop;
            error = options.error || noop;

            result = cache.find(options.data);

            if (result !== undefined) {
                success(result);
            } else {
                options.success = function (result) {
                    cache.add(options.data, result);

                    success(result);
                    //SUCCESSGRID && ERRORGRID
                    that.options.read.queryString = result.FilterCondition;
                    that.options.read.sortString = result.SortCondition;
                    that.options.read.storedProcedure = result.StoredProcedure;
                    if (that.options.read.error != undefined && that.options.read.error != null && result.Total == 0) {
                        that.options.read.error(result.Total);
                    }
                    if (that.options.read.success != undefined && that.options.read.success != null && result.Total > 0) {
                        that.options.read.success(result.Total);
                    }
                };

                $.ajax(options);
            }
        },

        update: function (options) {
            return ajax(this.setup(options, UPDATE));
        },

        destroy: function (options) {
            return ajax(this.setup(options, DESTROY));
        },

        setup: function (options, type) {
            options = options || {};

            var that = this,
                parameters,
                operation = that.options[type],
                data = isFunction(operation.data) ? operation.data(options.data) : operation.data;

            options = extend(true, {}, operation, options);
            parameters = extend(true, {}, data, options.data);

            options.data = that.parameterMap(parameters, type);

            if (isFunction(options.url)) {
                options.url = options.url(parameters);
            }

            return options;
        }
    });

    var Cache = Class.extend({
        init: function () {
            this._store = {};
        },
        add: function (key, data) {
            if (key !== undefined) {
                this._store[stringify(key)] = data;
            }
        },
        find: function (key) {
            return this._store[stringify(key)];
        },
        clear: function () {
            this._store = {};
        },
        remove: function (key) {
            delete this._store[stringify(key)];
        }
    });

    Cache.create = function (options) {
        var store = {
            "inmemory": function () { return new Cache(); }
        };

        if (isPlainObject(options) && isFunction(options.find)) {
            return options;
        }

        if (options === true) {
            return new Cache();
        }

        return store[options]();
    };

    function convertRecords(data, getters, modelInstance) {
        var record,
            getter,
            idx,
            length;

        for (idx = 0, length = data.length; idx < length; idx++) {
            record = data[idx];
            for (getter in getters) {
                record[getter] = modelInstance._parse(getter, getters[getter](record));
            }
        }
    }

    function convertGroup(data, getters, modelInstance) {
        var record,
            idx,
            length;

        for (idx = 0, length = data.length; idx < length; idx++) {
            record = data[idx];
            record.value = modelInstance._parse(record.field, record.value);

            if (record.hasSubgroups) {
                convertGroup(record.items, getters, modelInstance);
            } else {
                convertRecords(record.items, getters, modelInstance);
            }
        }
    }

    function wrapDataAccess(originalFunction, model, converter, getters) {
        return function (data) {
            data = originalFunction(data);

            if (data && !isEmptyObject(getters)) {
                if (toString.call(data) !== "[object Array]" && !(data instanceof ObservableArray)) {
                    data = [data];
                }

                converter(data, getters, new model());
            }

            return data || [];
        };
    }

    var DataReader = Class.extend({
        init: function (schema) {
            var that = this, member, get, model, base;

            schema = schema || {};

            for (member in schema) {
                get = schema[member];

                that[member] = typeof get === STRING ? getter(get) : get;
            }

            base = schema.modelBase || Model;

            if (isPlainObject(that.model)) {
                that.model = model = base.define(that.model);

                var dataFunction = proxy(that.data, that),
                    groupsFunction = proxy(that.groups, that),
                    getters = {};

                if (model.fields) {
                    each(model.fields, function (field, value) {
                        if (isPlainObject(value) && value.field) {
                            getters[value.field] = getter(value.field);
                        } else {
                            getters[field] = getter(field);
                        }
                    });
                }

                that.data = wrapDataAccess(dataFunction, model, convertRecords, getters);
                that.groups = wrapDataAccess(groupsFunction, model, convertGroup, getters);
            }
        },
        errors: function (data) {
            return data ? data.errors : null;
        },
        parse: identity,
        data: identity,
        total: function (data) {
            return data.length;
        },
        groups: identity,
        status: function (data) {
            return data.status;
        },
        aggregates: function () {
            return {};
        }
    });

    function flattenGroups(data) {
        var idx, length, result = [];

        for (idx = 0, length = data.length; idx < length; idx++) {
            if (data[idx].hasSubgroups) {
                result = result.concat(flattenGroups(data[idx].items));
            } else {
                result = result.concat(data[idx].items.slice());
            }
        }
        return result;
    }
    function wrapGroupItems(data, model) {
        var idx, length, group, items;
        if (model) {
            for (idx = 0, length = data.length; idx < length; idx++) {
                group = data[idx];
                items = group.items;

                if (group.hasSubgroups) {
                    wrapGroupItems(items, model);
                } else if (items.length && !(items[0] instanceof model)) {
                    items.type = model;
                    items.wrapAll(items, items);
                }
            }
        }
    }

    function eachGroupItems(data, func) {
        var idx, length;

        for (idx = 0, length = data.length; idx < length; idx++) {
            if (data[idx].hasSubgroups) {
                if (eachGroupItems(data[idx].items, func)) {
                    return true;
                }
            } else {
                if (func(data[idx].items, data[idx])) {
                    return true;
                }
            }
        }
    }

    function removeModel(data, model) {
        var idx, length;

        for (idx = 0, length = data.length; idx < length; idx++) {
            if (data[idx].uid == model.uid) {
                model = data[idx];
                data.splice(idx, 1);
                return model;
            }
        }
    }

    function wrapInEmptyGroup(groups, model) {
        var parent,
            group,
            idx,
            length;

        for (idx = groups.length - 1, length = 0; idx >= length; idx--) {
            group = groups[idx];
            parent = {
                value: model.get(group.field),
                field: group.field,
                items: parent ? [parent] : [model],
                hasSubgroups: !!parent,
                aggregates: {}
            };
        }

        return parent;
    }

    function indexOfPristineModel(data, model) {
        if (model) {
            return indexOf(data, function (item) {
                return item[model.idField] === model.id;
            });
        }
        return -1;
    }

    function indexOfModel(data, model) {
        if (model) {
            return indexOf(data, function (item) {
                return item.uid == model.uid;
            });
        }
        return -1;
    }

    function indexOf(data, comparer) {
        var idx, length;

        for (idx = 0, length = data.length; idx < length; idx++) {
            if (comparer(data[idx])) {
                return idx;
            }
        }

        return -1;
    }

    var DataSource = Observable.extend({
        init: function (options) {
            var that = this, model, transport, data;

            if (options) {
                data = options.data;
            }

            options = that.options = extend({}, that.options, options);

            extend(that, {
                _map: {},
                _prefetch: {},
                _data: [],
                _ranges: [],
                _view: [],
                _pristine: [],
                _destroyed: [],
                _pageSize: options.pageSize,
                _page: options.page || (options.pageSize ? 1 : undefined),
                _sort: normalizeSort(options.sort),
                _filter: normalizeFilter(options.filter),
                _group: normalizeGroup(options.group),
                _aggregate: options.aggregate,
                _total: options.total
            });

            Observable.fn.init.call(that);

            transport = options.transport;

            if (transport) {
                transport.read = typeof transport.read === STRING ? { url: transport.read } : transport.read;

                if (options.type) {
                    if (kendo.data.transports[options.type] && !isPlainObject(kendo.data.transports[options.type])) {
                        that.transport = new kendo.data.transports[options.type](extend(transport, { data: data }));
                    } else {
                        transport = extend(true, {}, kendo.data.transports[options.type], transport);
                    }

                    options.schema = extend(true, {}, kendo.data.schemas[options.type], options.schema);
                }

                if (!that.transport) {
                    that.transport = isFunction(transport.read) ? transport : new RemoteTransport(transport);
                }
            } else {
                that.transport = new LocalTransport({ data: options.data });
            }

            that.reader = new kendo.data.readers[options.schema.type || "json"](options.schema);

            model = that.reader.model || {};

            that._data = that._observe(that._data);

            that.bind([ERROR, CHANGE, REQUESTSTART], options);
        },

        options: {
            data: [],
            schema: {
                modelBase: Model
            },
            serverSorting: false,
            serverPaging: false,
            serverFiltering: false,
            serverGrouping: false,
            serverAggregates: false,
            sendAllFields: true,
            batch: false
        },

        online: function (value) {
            if (value !== undefined) {
                if (this._online != value) {
                    this._online = value;

                    if (value) {
                        return this.sync();
                    }
                }

                return $.Deferred().resolve().promise();
            } else {
                return this._online;
            }
        },

        offlineData: function (state) {
            if (this.options.offlineStorage == null) {
                return null;
            }

            if (state !== undefined) {
                return this._storage.setItem(state);
            }

            return this._storage.getItem() || {};
        },

        _isServerGrouped: function () {
            var group = this.group() || [];

            return this.options.serverGrouping && group.length;
        },

        _pushCreate: function (result) {
            this._push(result, "pushCreate");
        },

        _pushUpdate: function (result) {
            this._push(result, "pushUpdate");
        },

        _pushDestroy: function (result) {
            this._push(result, "pushDestroy");
        },

        _push: function (result, operation) {
            var data = this._readData(result);

            if (!data) {
                data = result;
            }

            this[operation](data);
        },


        _flatData: function (data) {
            if (this.options.serverGrouping && this.group().length) {
                return flattenGroups(data);
            }
            return data;
        },

        get: function (id) {
            var idx, length, data = this._flatData(this._data);

            for (idx = 0, length = data.length; idx < length; idx++) {
                if (data[idx].id == id) {
                    return data[idx];
                }
            }
        },

        getByUid: function (id) {
            var idx, length, data = this._flatData(this._data);

            for (idx = 0, length = data.length; idx < length; idx++) {
                if (data[idx].uid == id) {
                    return data[idx];
                }
            }
        },

        sync: function () {
            var that = this,
                idx,
                length,
                created = [],
                updated = [],
                destroyed = that._destroyed,
                data = that._flatData(that._data);

            if (!that.reader.model) {
                return;
            }

            for (idx = 0, length = data.length; idx < length; idx++) {
                if (data[idx].isNew()) {
                    created.push(data[idx]);
                } else if (data[idx].dirty) {
                    updated.push(data[idx]);
                }
            }

            var promises = that._send("create", created);

            promises.push.apply(promises, that._send("update", updated));
            promises.push.apply(promises, that._send("destroy", destroyed));

            $.when.apply(null, promises)
                .then(function () {
                    var idx,
                    length;

                    for (idx = 0, length = arguments.length; idx < length; idx++) {
                        that._accept(arguments[idx]);
                    }

                    that._change();
                });
        },

        _accept: function (result) {
            var that = this,
                models = result.models,
                response = result.response,
                idx = 0,
                serverGroup = that.options.serverGrouping && that.group() && that.group().length,
                pristine = that.reader.data(that._pristine),
                type = result.type,
                length;

            if (response) {
                response = that.reader.parse(response);

                if (that._handleCustomErrors(response)) {
                    return;
                }

                response = that.reader.data(response);

                if (!$.isArray(response)) {
                    response = [response];
                }
            } else {
                response = $.map(models, function (model) { return model.toJSON(); });
            }

            if (type === "destroy") {
                that._destroyed = [];
            }

            for (idx = 0, length = models.length; idx < length; idx++) {
                if (type !== "destroy") {
                    models[idx].accept(response[idx]);

                    if (type === "create") {
                        pristine.push(serverGroup ? wrapInEmptyGroup(that.group(), models[idx]) : models[idx]);
                    } else if (type === "update") {
                        if (serverGroup) {
                            that._updatePristineGroupModel(models[idx], response[idx]);
                        } else {
                            extend(pristine[that._pristineIndex(models[idx])], response[idx]);
                        }
                    }
                } else {
                    if (serverGroup) {
                        that._removePristineGroupModel(models[idx]);
                    } else {
                        pristine.splice(that._pristineIndex(models[idx]), 1);
                    }
                }
            }
        },

        _pristineIndex: function (model) {
            var that = this,
                idx,
                length,
                pristine = that.reader.data(that._pristine);

            for (idx = 0, length = pristine.length; idx < length; idx++) {
                if (pristine[idx][model.idField] === model.id) {
                    return idx;
                }
            }
            return -1;
        },

        _updatePristineGroupModel: function (model, values) {
            var pristineData = this.reader.groups(this._pristine),
                index;

            eachGroupItems(pristineData,
                function (items, group) {
                    index = indexOfPristineModel(items, model);
                    if (index > -1) {
                        extend(true, items[index], values);
                        return true;
                    }
                });
        },

        _removePristineGroupModel: function (model) {
            var pristineData = this.reader.groups(this._pristine),
                index;

            eachGroupItems(pristineData,
                function (items, group) {
                    index = indexOfPristineModel(items, model);
                    if (index > -1) {
                        items.splice(index, 1);
                        return true;
                    }
                });
        },
        _promise: function (data, models, type) {
            var that = this,
            transport = that.transport;

            return $.Deferred(function (deferred) {
                transport[type].call(transport, extend({
                    success: function (response) {
                        deferred.resolve({
                            response: response,
                            models: models,
                            type: type
                        });
                    },
                    error: function (response) {
                        deferred.reject(response);
                        that.trigger(ERROR, response);
                    }
                }, data)
                );
            }).promise();
        },

        _send: function (method, data) {
            var that = this,
                idx,
                length,
                promises = [];

            if (that.options.batch) {
                if (data.length) {
                    promises.push(that._promise({ data: { models: toJSON(data) } }, data, method));
                }
            } else {
                for (idx = 0, length = data.length; idx < length; idx++) {
                    promises.push(that._promise({ data: data[idx].toJSON() }, [data[idx]], method));
                }
            }

            return promises;
        },

        add: function (model) {
            return this.insert(this._data.length, model);
        },

        _createNewModel: function (model) {
            if (this.reader.model) {
                return new this.reader.model(model);
            }

            if (model instanceof ObservableObject) {
                return model;
            }

            return new ObservableObject(model);
        },

        insert: function (index, model) {
            if (!model) {
                model = index;
                index = 0;
            }

            if (!(model instanceof Model)) {
                model = this._createNewModel(model);
            }

            if (this._isServerGrouped()) {
                this._data.splice(index, 0, wrapInEmptyGroup(this.group(), model));
            } else {
                this._data.splice(index, 0, model);
            }

            return model;
        },

        //insert: function (index, model) {
        //    if (!model) {
        //        model = index;
        //        index = 0;
        //    }

        //    if (!(model instanceof Model)) {
        //        if (this.reader.model) {
        //            model = new this.reader.model(model);
        //        } else {
        //            model = new ObservableObject(model);
        //        }
        //    }

        //    if (this.options.serverGrouping && this.group() && this.group().length) {
        //        this._data.splice(index, 0, wrapInEmptyGroup(this.group(), model));
        //    } else {
        //        this._data.splice(index, 0, model);
        //    }

        //    return model;
        //},

        cancelChanges: function (model) {
            var that = this,
                pristineIndex,
                serverGroup = that.options.serverGrouping && that.group() && that.group().length,
                read = !serverGroup ? that.reader.data : that.reader.groups,
                pristine = read(that._pristine),
                index;

            if (model instanceof kendo.data.Model) {
                if (serverGroup) {
                    that._cancelGroupModel(model);
                } else {
                    index = that.indexOf(model);
                    pristineIndex = that._pristineIndex(model);
                    if (index != -1) {
                        if (pristineIndex != -1 && !model.isNew()) {
                            extend(true, that._data[index], pristine[pristineIndex]);
                        } else {
                            that._data.splice(index, 1);
                        }
                    }
                }
            } else {
                that._destroyed = [];
                that._data = that._observe(pristine);
                that._change();
            }
        },

        read: function (data) {
            var that = this, params = that._params(data);

            that._queueRequest(params, function () {
                that.trigger(REQUESTSTART);
                that._ranges = [];
                that.transport.read({
                    data: params,
                    success: proxy(that.success, that),
                    error: proxy(that.error, that)
                });
            });
        },

        _cancelGroupModel: function (model) {
            var pristineData = this.reader.groups(this._pristine),
                pristine,
                idx;

            eachGroupItems(pristineData,
                function (items, group) {
                    idx = indexOfPristineModel(items, model);
                    if (idx > -1) {
                        pristine = items[idx];
                        return true;
                    }
                });

            if (idx > -1) {
                eachGroupItems(this._data, function (items, group) {
                    idx = indexOfModel(items, model);
                    if (idx > -1) {
                        if (!model.isNew()) {
                            extend(true, items[idx], pristine);
                        } else {
                            items.splice(idx, 1);
                        }
                    }
                });
            }
        },

        indexOf: function (model) {
            return indexOfModel(this._data, model);
        },

        _params: function (data) {
            var that = this,
            options = extend({
                take: that.take(),
                skip: that.skip(),
                page: that.page(),
                pageSize: that.pageSize(),
                sort: that._sort,
                filter: that._filter,
                group: that._group,
                aggregate: that._aggregate
            }, data);

            if (!that.options.serverPaging) {
                delete options.take;
                delete options.skip;
                delete options.page;
                delete options.pageSize;
            }
            return options;
        },

        _queueRequest: function (options, callback) {
            var that = this;
            if (!that._requestInProgress) {
                that._requestInProgress = true;
                that._pending = undefined;
                callback();
            } else {
                that._pending = { callback: proxy(callback, that), options: options };
            }
        },

        _dequeueRequest: function () {
            var that = this;
            that._requestInProgress = false;
            if (that._pending) {
                that._queueRequest(that._pending.options, that._pending.callback);
            }
        },

        remove: function (model) {
            var data = this._data;

            if (this.options.serverGrouping && this.group() && this.group().length) {
                return this._removeGroupItem(data, model);
            }
            return removeModel(data, model);
        },

        _removeGroupItem: function (data, model) {
            var result;

            eachGroupItems(data, function (items, group) {
                result = removeModel(items, model);
                if (result) {
                    return true;
                }
            });
            return model;
        },

        error: function (xhr, status, errorThrown) {
            this._dequeueRequest();
            this.trigger(ERROR, { xhr: xhr, status: status, errorThrown: errorThrown });
        },

        _handleCustomErrors: function (response) {
            if (this.reader.errors) {
                var errors = this.reader.errors(response);
                if (errors) {
                    this.trigger(ERROR, { xhr: null, status: "customerror", errorThrown: "custom error", errors: errors });
                    return true;
                }
            }
            return false;
        },

        _parent: noop,

        success: function (data) {
            var that = this,
                options = that.options,
                hasGroups = options.serverGrouping === true && that._group && that._group.length > 0;

            data = that.reader.parse(data);

            if (that._handleCustomErrors(data)) {
                return;
            }

            that._pristine = isPlainObject(data) ? $.extend(true, {}, data) : data.slice(0);

            that._total = that.reader.total(data);

            if (that._aggregate && options.serverAggregates) {
                that._aggregateResult = that.reader.aggregates(data);
            }

            if (hasGroups) {
                data = that.reader.groups(data);
            } else {
                data = that.reader.data(data);
            }

            that._data = that._observe(data);

            var start = that._skip || 0,
            end = start + that._data.length;

            that._ranges.push({ start: start, end: end, data: that._data });
            that._ranges.sort(function (x, y) { return x.start - y.start; });

            that._dequeueRequest();
            that._process(that._data);
        },

        _observe: function (data) {
            var that = this,
                model = that.reader.model,
                wrap = false;

            if (model && data.length) {
                wrap = !(data[0] instanceof model);
            }

            if (data instanceof ObservableArray) {
                if (wrap) {
                    data.type = that.reader.model;
                    data.wrapAll(data, data);
                }
            } else {
                data = new ObservableArray(data, that.reader.model);
                data.parent = function () { return that._parent(); };
            }

            if (that.group() && that.group().length && that.options.serverGrouping) {
                wrapGroupItems(data, model);
            }

            return data.bind(CHANGE, proxy(that._change, that));
        },

        _change: function (e) {
            var that = this, idx, length, action = e ? e.action : "";

            if (action === "remove") {
                for (idx = 0, length = e.items.length; idx < length; idx++) {
                    if (!e.items[idx].isNew || !e.items[idx].isNew()) {
                        that._destroyed.push(e.items[idx]);
                    }
                }
            }

            if (that.options.autoSync && (action === "add" || action === "remove" || action === "itemchange")) {
                that.sync();
            } else {
                var total = that._total || that.reader.total(that._pristine);
                if (action === "add") {
                    total++;
                } else if (action === "remove") {
                    total--;
                } else if (action !== "itemchange" && !that.options.serverPaging) {
                    total = that.reader.total(that._pristine);
                }

                that._total = total;

                that._process(that._data, e);
            }
        },

        _process: function (data, e) {
            var that = this,
                options = {},
                result;

            if (that.options.serverPaging !== true) {
                options.skip = that._skip;
                options.take = that._take || that._pageSize;

                if (options.skip === undefined && that._page !== undefined && that._pageSize !== undefined) {
                    options.skip = (that._page - 1) * that._pageSize;
                }
            }

            if (that.options.serverSorting !== true) {
                options.sort = that._sort;
            }

            if (that.options.serverFiltering !== true) {
                options.filter = that._filter;
            }

            if (that.options.serverGrouping !== true) {
                options.group = that._group;
            }

            if (that.options.serverAggregates !== true) {
                options.aggregate = that._aggregate;
                that._aggregateResult = calculateAggregates(data, options);
            }

            result = process(data, options);

            that._view = result.data;

            if (result.total !== undefined && !that.options.serverFiltering) {
                that._total = result.total;
            }

            e = e || {};

            e.items = e.items || that._view;

            that.trigger(CHANGE, e);
        },

        at: function (index) {
            return this._data[index];
        },

        data: function (value) {
            var that = this;
            if (value !== undefined) {
                that._data = this._observe(value);

                that._total = that._data.length;

                that._process(that._data);
            } else {
                return that._data;
            }
        },

        view: function () {
            return this._view;
        },

        query: function (options) {
            var that = this,
            result,
            remote = that.options.serverSorting || that.options.serverPaging || that.options.serverFiltering || that.options.serverGrouping || that.options.serverAggregates;

            if (options !== undefined) {
                that._pageSize = options.pageSize;
                that._page = options.page;
                that._sort = options.sort;
                that._filter = options.filter;
                that._group = options.group;
                that._aggregate = options.aggregate;
                that._skip = options.skip;
                that._take = options.take;

                if (that._skip === undefined) {
                    that._skip = that.skip();
                    options.skip = that.skip();
                }

                if (that._take === undefined && that._pageSize !== undefined) {
                    that._take = that._pageSize;
                    options.take = that._take;
                }

                if (options.sort) {
                    that._sort = options.sort = normalizeSort(options.sort);
                }

                if (options.filter) {
                    that._filter = options.filter = normalizeFilter(options.filter);
                }

                if (options.group) {
                    that._group = options.group = normalizeGroup(options.group);
                }
                if (options.aggregate) {
                    that._aggregate = options.aggregate = normalizeAggregate(options.aggregate);
                }
            }

            if (remote || (that._data === undefined || that._data.length === 0)) {
                that.read(options);
            } else {
                that.trigger(REQUESTSTART);
                result = process(that._data, options);

                if (!that.options.serverFiltering) {
                    if (result.total !== undefined) {
                        that._total = result.total;
                    } else {
                        that._total = that._data.length;
                    }
                }

                that._view = result.data;
                that._aggregateResult = calculateAggregates(that._data, options);
                that.trigger(CHANGE, { items: result.data });
            }
        },

        fetch: function (callback) {
            var that = this;

            if (callback && isFunction(callback)) {
                that.one(CHANGE, callback);
            }

            that._query();
        },

        _query: function (options) {
            var that = this;

            that.query(extend({}, {
                page: that.page(),
                pageSize: that.pageSize(),
                sort: that.sort(),
                filter: that.filter(),
                group: that.group(),
                aggregate: that.aggregate()
            }, options));
        },

        next: function () {
            var that = this,
                page = that.page(),
                total = that.total();

            if (!page) {
                return;
            }

            if (total) {
                that.page(page + 1);
            } else {
                that._skip = page * that.take();
                that._query({ page: page + 1 });
            }
        },

        prev: function () {
            var that = this,
                page = that.page(),
                total = that.total();

            if (!page || page === 1) {
                return;
            }

            if (total) {
                that.page(page - 1);
            } else {
                that._skip = that._skip - that.take();
                that._query({ page: page - 1 });
            }
        },

        page: function (val) {
            var that = this,
            skip;

            if (val !== undefined) {
                val = math.max(math.min(math.max(val, 1), that.totalPages()), 1);
                that._query({ page: val });
                return;
            }
            skip = that.skip();

            return skip !== undefined ? math.round((skip || 0) / (that.take() || 1)) + 1 : undefined;
        },

        pageSize: function (val) {
            var that = this;

            if (val !== undefined) {
                that._query({ pageSize: val, page: 1 });
                return;
            }

            return that.take();
        },

        sort: function (val) {
            var that = this;

            if (val !== undefined) {
                that._query({ sort: val });
                return;
            }

            return that._sort;
        },

        filter: function (val) {
            var that = this;

            if (val === undefined) {
                return that._filter;
            }

            that._query({ filter: val, page: 1 });
        },

        group: function (val) {
            var that = this;

            if (val !== undefined) {
                that._query({ group: val });
                return;
            }

            return that._group;
        },

        total: function () {
            return this._total || 0;
        },

        aggregate: function (val) {
            var that = this;

            if (val !== undefined) {
                that._query({ aggregate: val });
                return;
            }

            return that._aggregate;
        },

        aggregates: function () {
            return this._aggregateResult;
        },

        totalPages: function () {
            var that = this,
            pageSize = that.pageSize() || that.total();

            return math.ceil((that.total() || 0) / pageSize);
        },

        inRange: function (skip, take) {
            var that = this,
            end = math.min(skip + take, that.total());

            if (!that.options.serverPaging && that.data.length > 0) {
                return true;
            }

            return that._findRange(skip, end).length > 0;
        },

        range: function (skip, take) {
            skip = math.min(skip || 0, this.total());
            var that = this,
            pageSkip = math.max(math.floor(skip / take), 0) * take,
            size = math.min(pageSkip + take, that.total()),
            data;

            data = that._findRange(skip, math.min(skip + take, that.total()));

            if (data.length) {
                that._skip = skip > that.skip() ? math.min(size, (that.totalPages() - 1) * that.take()) : pageSkip;

                that._take = take;

                var paging = that.options.serverPaging;
                var sorting = that.options.serverSorting;
                try {
                    that.options.serverPaging = true;
                    that.options.serverSorting = true;
                    if (paging) {
                        that._data = data = that._observe(data);
                    }
                    that._process(data);
                } finally {
                    that.options.serverPaging = paging;
                    that.options.serverSorting = sorting;
                }

                return;
            }

            if (take !== undefined) {
                if (!that._rangeExists(pageSkip, size)) {
                    that.prefetch(pageSkip, take, function () {
                        if (skip > pageSkip && size < that.total() && !that._rangeExists(size, math.min(size + take, that.total()))) {
                            that.prefetch(size, take, function () {
                                that.range(skip, take);
                            });
                        } else {
                            that.range(skip, take);
                        }
                    });
                } else if (pageSkip < skip) {
                    that.prefetch(size, take, function () {
                        that.range(skip, take);
                    });
                }
            }
        },

        _findRange: function (start, end) {
            var that = this,
                ranges = that._ranges,
                range,
                data = [],
                skipIdx,
                takeIdx,
                startIndex,
                endIndex,
                rangeData,
                rangeEnd,
                processed,
                options = that.options,
                remote = options.serverSorting || options.serverPaging || options.serverFiltering || options.serverGrouping || options.serverAggregates,
                length;

            for (skipIdx = 0, length = ranges.length; skipIdx < length; skipIdx++) {
                range = ranges[skipIdx];
                if (start >= range.start && start <= range.end) {
                    var count = 0;

                    for (takeIdx = skipIdx; takeIdx < length; takeIdx++) {
                        range = ranges[takeIdx];

                        if (range.data.length && start + count >= range.start /*&& count + count <= range.end*/) {
                            rangeData = range.data;
                            rangeEnd = range.end;

                            if (!remote) {
                                processed = process(range.data, { sort: that.sort(), filter: that.filter() });
                                rangeData = processed.data;

                                if (processed.total !== undefined) {
                                    rangeEnd = processed.total;
                                }
                            }

                            startIndex = 0;
                            if (start + count > range.start) {
                                startIndex = (start + count) - range.start;
                            }
                            endIndex = rangeData.length;
                            if (rangeEnd > end) {
                                endIndex = endIndex - (rangeEnd - end);
                            }
                            count += endIndex - startIndex;
                            data = data.concat(rangeData.slice(startIndex, endIndex));

                            if (end <= range.end && count == end - start) {
                                return data;
                            }
                        }
                    }
                    break;
                }
            }
            return [];
        },

        skip: function () {
            var that = this;

            if (that._skip === undefined) {
                return (that._page !== undefined ? (that._page - 1) * (that.take() || 1) : undefined);
            }
            return that._skip;
        },

        take: function () {
            var that = this;
            return that._take || that._pageSize;
        },

        prefetch: function (skip, take, callback) {
            var that = this,
            size = math.min(skip + take, that.total()),
            range = { start: skip, end: size, data: [] },
            options = {
                take: take,
                skip: skip,
                page: skip / take + 1,
                pageSize: take,
                sort: that._sort,
                filter: that._filter,
                group: that._group,
                aggregate: that._aggregate
            };

            if (!that._rangeExists(skip, size)) {
                clearTimeout(that._timeout);

                that._timeout = setTimeout(function () {
                    that._queueRequest(options, function () {
                        that.transport.read({
                            data: options,
                            success: function (data) {
                                that._dequeueRequest();
                                var found = false;
                                for (var i = 0, len = that._ranges.length; i < len; i++) {
                                    if (that._ranges[i].start === skip) {
                                        found = true;
                                        range = that._ranges[i];
                                        break;
                                    }
                                }
                                if (!found) {
                                    that._ranges.push(range);
                                }

                                data = that.reader.parse(data);
                                range.data = that._observe(that.reader.data(data));
                                range.end = range.start + range.data.length;
                                that._ranges.sort(function (x, y) { return x.start - y.start; });
                                that._total = that.reader.total(data);
                                if (callback) {
                                    callback();
                                }
                            }
                        });
                    });
                }, 100);
            } else if (callback) {
                callback();
            }
        },

        _rangeExists: function (start, end) {
            var that = this,
            ranges = that._ranges,
            idx,
            length;

            for (idx = 0, length = ranges.length; idx < length; idx++) {
                if (ranges[idx].start <= start && ranges[idx].end >= end) {
                    return true;
                }
            }
            return false;
        }
    });

    DataSource.create = function (options) {
        options = options && options.push ? { data: options } : options;

        var dataSource = options || {},
        data = dataSource.data,
        fields = dataSource.fields,
        table = dataSource.table,
        select = dataSource.select,
        idx,
        length,
        model = {},
        field;

        if (!data && fields && !dataSource.transport) {
            if (table) {
                data = inferTable(table, fields);
            } else if (select) {
                data = inferSelect(select, fields);
            }
        }

        if (kendo.data.Model && fields && (!dataSource.schema || !dataSource.schema.model)) {
            for (idx = 0, length = fields.length; idx < length; idx++) {
                field = fields[idx];
                if (field.type) {
                    model[field.field] = field;
                }
            }

            if (!isEmptyObject(model)) {
                dataSource.schema = extend(true, dataSource.schema, { model: { fields: model } });
            }
        }

        dataSource.data = data;

        return dataSource instanceof DataSource ? dataSource : new DataSource(dataSource);
    };

    function inferSelect(select, fields) {
        var options = $(select)[0].children,
            idx,
            length,
            data = [],
            record,
            firstField = fields[0],
            secondField = fields[1],
            value,
            option;

        for (idx = 0, length = options.length; idx < length; idx++) {
            record = {};
            option = options[idx];

            record[firstField.field] = option.text;

            value = option.attributes.value;

            if (value && value.specified) {
                value = option.value;
            } else {
                value = option.text;
            }

            record[secondField.field] = value;

            data.push(record);
        }

        return data;
    }

    function inferTable(table, fields) {
        var tbody = $(table)[0].tBodies[0],
        rows = tbody ? tbody.rows : [],
        idx,
        length,
        fieldIndex,
        fieldCount = fields.length,
        data = [],
        cells,
        record,
        cell,
        empty;

        for (idx = 0, length = rows.length; idx < length; idx++) {
            record = {};
            empty = true;
            cells = rows[idx].cells;

            for (fieldIndex = 0; fieldIndex < fieldCount; fieldIndex++) {
                cell = cells[fieldIndex];
                if (cell.nodeName.toLowerCase() !== "th") {
                    empty = false;
                    record[fields[fieldIndex].field] = cell.innerHTML;
                }
            }
            if (!empty) {
                data.push(record);
            }
        }

        return data;
    }

    var Node = Model.define({
        init: function (value) {
            var that = this,
                hasChildren = that.hasChildren || value.hasChildren,
                data = "items",
                children = {};

            kendo.data.Model.fn.init.call(that, value);

            if (typeof that.children === STRING) {
                data = that.children;
            }

            children = extend({
                schema: {
                    data: data,
                    model: {
                        hasChildren: hasChildren
                    }
                }
            }, that.children, { data: value });

            if (!hasChildren) {
                hasChildren = children.schema.data;
            }

            if (typeof hasChildren === STRING) {
                hasChildren = kendo.getter(hasChildren);
            }

            if (isFunction(hasChildren)) {
                that.hasChildren = !!hasChildren.call(that, that);
            }

            that.children = new HierarchicalDataSource(children);
            that.children._parent = function () {
                return that;
            };

            that.children.bind(CHANGE, function (e) {
                e.node = e.node || that;
                that.trigger(CHANGE, e);
            });

            that._loaded = !!(value && value[data]);
        },

        hasChildren: false,

        level: function () {
            var parentNode = this.parentNode(),
                level = 0;

            while (parentNode) {
                level++;
                parentNode = parentNode.parentNode();
            }

            return level;
        },

        load: function () {
            var that = this, options = {};

            options[that.idField || "id"] = that.id;

            if (!that._loaded) {
                that.children._data = undefined;
            }

            that.children.one(CHANGE, function () {
                that._loaded = true;
            }).query(options);
        },

        parentNode: function () {
            var array = this.parent();

            return array.parent();
        },

        loaded: function (value) {
            if (value !== undefined) {
                this._loaded = value;
            } else {
                return this._loaded;
            }
        },

        shouldSerialize: function (field) {
            return Model.fn.shouldSerialize.call(this, field) && field !== "children" && field !== "_loaded" && field !== "hasChildren";
        }
    });

    var HierarchicalDataSource = DataSource.extend({
        init: function (options) {
            var node = Node.define({
                children: options
            });

            DataSource.fn.init.call(this, extend(true, {}, { schema: { modelBase: node, model: node } }, options));
        },

        remove: function (node) {
            var parentNode = node.parentNode(),
                dataSource = this,
                result;

            if (parentNode) {
                dataSource = parentNode.children;
            }

            result = DataSource.fn.remove.call(dataSource, node);

            if (parentNode && !dataSource.data().length) {
                parentNode.hasChildren = false;
            }

            return result;
        },

        insert: function (index, model) {
            var parentNode = this._parent();

            if (parentNode) {
                parentNode.hasChildren = true;
            }

            return DataSource.fn.insert.call(this, index, model);
        },

        getByUid: function (uid) {
            var idx, length, node, data;

            node = DataSource.fn.getByUid.call(this, uid);

            if (node) {
                return node;
            }

            data = this._flatData(this.data());

            for (idx = 0, length = data.length; idx < length; idx++) {
                node = data[idx].children.getByUid(uid);
                if (node) {
                    return node;
                }
            }
        }
    });

    function inferList(list, fields) {
        var items = $(list).children(),
            idx,
            length,
            data = [],
            record,
            textField = fields[0].field,
            urlField = fields[1] && fields[1].field,
            spriteCssClassField = fields[2] && fields[2].field,
            imageUrlField = fields[3] && fields[3].field,
            item,
            id,
            textChild,
            className,
            children;

        for (idx = 0, length = items.length; idx < length; idx++) {
            record = {};
            item = items.eq(idx);

            textChild = item[0].firstChild;
            children = item.children();
            list = children.filter("ul");
            children = children.filter(":not(ul)");

            id = item.attr("data-id");

            if (id) {
                record.id = id;
            }

            if (textChild) {
                record[textField] = textChild.nodeType == 3 ? textChild.nodeValue : children.text();
            }

            if (urlField) {
                record[urlField] = children.find("a").attr("href");
            }

            if (imageUrlField) {
                record[imageUrlField] = children.find("img").attr("src");
            }

            if (spriteCssClassField) {
                className = children.find(".k-sprite").prop("className");
                record[spriteCssClassField] = className && $.trim(className.replace("k-sprite", ""));
            }

            if (list.length) {
                record.items = inferList(list.eq(0), fields);
            }

            if (item.attr("data-hasChildren") == "true") {
                record.hasChildren = true;
            }

            data.push(record);
        }

        return data;
    }

    HierarchicalDataSource.create = function (options) {
        options = options && options.push ? { data: options } : options;

        var dataSource = options || {},
            data = dataSource.data,
            fields = dataSource.fields,
            list = dataSource.list;

        if (!data && fields && !dataSource.transport) {
            if (list) {
                data = inferList(list, fields);
            }
        }

        dataSource.data = data;

        return dataSource instanceof HierarchicalDataSource ? dataSource : new HierarchicalDataSource(dataSource);
    };

    extend(true, kendo.data, /** @lends kendo.data */ {
        readers: {
            json: DataReader
        },
        Query: Query,
        DataSource: DataSource,
        HierarchicalDataSource: HierarchicalDataSource,
        Node: Node,
        ObservableObject: ObservableObject,
        ObservableArray: ObservableArray,
        LocalTransport: LocalTransport,
        RemoteTransport: RemoteTransport,
        Cache: Cache,
        DataReader: DataReader,
        Model: Model
    });
})(jQuery);
(function ($, unefined) {
    var kendo = window.kendo,
        Observable = kendo.Observable,
        ObservableObject = kendo.data.ObservableObject,
        ObservableArray = kendo.data.ObservableArray,
        toString = {}.toString,
        binders = {},
        Class = kendo.Class,
        innerText,
        proxy = $.proxy,
        VALUE = "value",
        CHECKED = "checked",
        CHANGE = "change";

    (function () {
        var a = document.createElement("a");
        if (a.innerText !== undefined) {
            innerText = "innerText";
        } else if (a.textContent !== undefined) {
            innerText = "textContent";
        }
    })();

    var Binding = Observable.extend({
        init: function (source, path) {
            var that = this;

            Observable.fn.init.call(that);

            that.source = source;
            that.path = path;
            that.dependencies = {};
            that.dependencies[path] = true;
            that.observable = that.source instanceof Observable;

            that._access = function (e) {
                that.dependencies[e.field] = true;
            };

            if (that.observable) {
                that._change = function (e) {
                    that.change(e);
                };

                that.source.bind(CHANGE, that._change);
            }
        },

        change: function (e) {
            var dependency,
                idx,
                ch,
                that = this;

            if (that.path === "this") {
                that.trigger(CHANGE, e);
            } else {
                for (dependency in that.dependencies) {
                    idx = dependency.indexOf(e.field);

                    if (idx === 0) {
                        ch = dependency.charAt(e.field.length);

                        if (!ch || ch === "." || ch === "[") {
                            that.trigger(CHANGE, e);
                            break;
                        }
                    }
                }
            }
        },

        start: function () {
            if (this.observable) {
                this.source.bind("get", this._access);
            }
        },

        stop: function () {
            if (this.observable) {
                this.source.unbind("get", this._access);
            }
        },

        get: function () {
            var that = this,
                source = that.source,
                index,
                path = that.path,
                result = source;

            that.start();

            if (that.observable) {
                result = source.get(path);

                // Traverse the observable hierarchy if the binding is not resolved at the current level.
                while (result === undefined && source) {
                    source = source.parent();

                    if (source instanceof ObservableObject) {
                        result = source.get(path);
                    }
                }

                // If the result is a function - invoke it
                if (typeof result === "function") {
                    index = path.lastIndexOf(".");

                    // If the function is a member of a nested observable object make that nested observable the context (this) of the function
                    if (index > 0) {
                        source = source.get(path.substring(0, index));
                    }

                    // Set the context (this) of the function
                    result = proxy(result, source);

                    // Invoke the function
                    result = result(that.source);
                }

                // If the binding is resolved by a parent object
                if (source && source !== that.source) {
                    // Listen for changes in the parent object

                    source.unbind(CHANGE, that._change)
                          .bind(CHANGE, that._change);
                }
            }

            that.stop();

            return result;
        },

        set: function (value) {
            this.source.set(this.path, value);
        },

        destroy: function () {
            if (this.observable) {
                this.source.unbind(CHANGE, this._change);
            }
        }
    });

    var EventBinding = Binding.extend({
        get: function () {
            var source = this.source,
                path = this.path,
                handler;

            handler = source.get(path);

            while (!handler && source) {
                source = source.parent();
                if (source instanceof ObservableObject) {
                    handler = source.get(path);
                }
            }

            return proxy(handler, source);
        }
    });

    var TemplateBinding = Binding.extend({
        init: function (source, path, template) {
            var that = this;

            Binding.fn.init.call(that, source, path);

            that.template = template;
        },

        render: function (value) {
            var html;

            this.start();

            html = kendo.render(this.template, value);

            this.stop();

            return html;
        }
    });

    var Binder = Class.extend({
        init: function (element, bindings, options) {
            this.element = element;
            this.bindings = bindings;
            this.options = options;
        },

        bind: function (binding, attribute) {
            var that = this;

            binding = attribute ? binding[attribute] : binding;

            binding.bind(CHANGE, function (e) {
                that.refresh(attribute || e);
            });

            that.refresh(attribute);
        },

        destroy: function () {
        }
    });

    binders.attr = Binder.extend({
        refresh: function (key) {
            this.element.setAttribute(key, this.bindings.attr[key].get());
        }
    });

    binders.style = Binder.extend({
        refresh: function (key) {
            this.element.style[key] = this.bindings.style[key].get();
        }
    });

    binders.enabled = Binder.extend({
        refresh: function () {
            if (this.bindings.enabled.get()) {
                this.element.removeAttribute("disabled");
            } else {
                this.element.setAttribute("disabled", "disabled");
            }
        }
    });

    binders.disabled = Binder.extend({
        refresh: function () {
            if (this.bindings.disabled.get()) {
                this.element.setAttribute("disabled", "disabled");
            } else {
                this.element.removeAttribute("disabled");
            }
        }
    });

    binders.events = Binder.extend({
        init: function (element, bindings, options) {
            Binder.fn.init.call(this, element, bindings, options);
            this.handlers = {};
        },

        refresh: function (key) {
            var binding = this.bindings.events[key],
                handler = this.handlers[key] = binding.get();

            $(this.element).bind(key, binding.source, handler);
        },

        destroy: function () {
            var element = $(this.element),
                handler;

            for (handler in this.handlers) {
                element.unbind(handler, this.handlers[handler]);
            }
        }
    });

    binders.text = Binder.extend({
        refresh: function () {
            var text = this.bindings.text.get();

            if (text == null) {
                text = "";
            }

            this.element[innerText] = text;
        }
    });

    binders.visible = Binder.extend({
        refresh: function () {
            if (this.bindings.visible.get()) {
                this.element.style.display = "";
            } else {
                this.element.style.display = "none";
            }
        }
    });

    binders.invisible = Binder.extend({
        refresh: function () {
            if (!this.bindings.invisible.get()) {
                this.element.style.display = "";
            } else {
                this.element.style.display = "none";
            }
        }
    });

    binders.html = Binder.extend({
        refresh: function () {
            this.element.innerHTML = this.bindings.html.get();
        }
    });

    binders.value = Binder.extend({
        init: function (element, bindings, options) {
            Binder.fn.init.call(this, element, bindings, options);

            this._change = proxy(this.change, this);
            this.eventName = options.valueUpdate || CHANGE;

            $(this.element).bind(this.eventName, this._change);

            this._initChange = false;
        },

        change: function () {
            this._initChange = this.eventName != CHANGE;
            this.bindings[VALUE].set(this.element.value);
            this._initChange = false;
        },

        refresh: function () {
            if (!this._initChange) {
                var value = this.bindings[VALUE].get();

                if (value == null) {
                    value = "";
                }

                this.element.value = value;
            }

            this._initChange = false;
        },

        destroy: function () {
            $(this.element).unbind(this.eventName, this._change);
        }
    });

    binders.source = Binder.extend({
        init: function (element, bindings, options) {
            Binder.fn.init.call(this, element, bindings, options);
        },

        refresh: function (e) {
            var that = this,
                source = that.bindings.source.get();

            if (source instanceof ObservableArray) {
                e = e || {};

                if (e.action == "add") {
                    that.add(e.index, e.items);
                } else if (e.action == "remove") {
                    that.remove(e.index, e.items);
                } else if (e.action != "itemchange") {
                    that.render();
                }
            } else {
                that.render();
            }
        },

        container: function () {
            var element = this.element;

            if (element.nodeName.toLowerCase() == "table") {
                if (!element.tBodies[0]) {
                    element.appendChild(document.createElement("tbody"));
                }
                element = element.tBodies[0];
            }

            return element;
        },

        template: function () {
            var options = this.options,
                template = options.template,
                nodeName = this.container().nodeName.toLowerCase();

            if (!template) {
                if (nodeName == "select") {
                    if (options.valueField || options.textField) {
                        template = kendo.format('<option value="#:{0}#">#:{1}#</option>',
                            options.valueField || options.textField, options.textField || options.valueField);
                    } else {
                        template = "<option>#:data#</option>";
                    }
                } else if (nodeName == "tbody") {
                    template = "<tr><td>#:data#</td></tr>";
                } else if (nodeName == "ul" || nodeName == "ol") {
                    template = "<li>#:data#</li>";
                } else {
                    template = "#:data#";
                }

                template = kendo.template(template);
            }

            return template;
        },

        destroy: function () {
            var source = this.bindings.source.get();

            source.unbind(CHANGE, this._change);
        },

        add: function (index, items) {
            var element = this.container(),
                idx,
                length,
                child,
                clone = element.cloneNode(false),
                reference = element.children[index];

            $(clone).html(kendo.render(this.template(), items));

            if (clone.children.length) {
                for (idx = 0, length = items.length; idx < length; idx++) {
                    child = clone.children[0];
                    element.insertBefore(child, reference || null);
                    bindElement(child, items[idx]);
                }
            }
        },

        remove: function (index, items) {
            var idx,
            element = this.container();

            for (idx = 0; idx < items.length; idx++) {
                element.removeChild(element.children[index]);
            }
        },

        render: function () {
            var source = this.bindings.source.get(),
                 idx,
                 length,
                 element = this.container(),
                 template = this.template(),
                 parent;

            if (!(source instanceof ObservableArray) && toString.call(source) !== "[object Array]") {
                if (source.parent) {
                    parent = source.parent;
                }

                source = new ObservableArray([source]);

                if (source.parent) {
                    source.parent = parent;
                }
            }

            if (this.bindings.template) {
                $(element).html(this.bindings.template.render(source));

                if (element.children.length) {
                    for (idx = 0, length = source.length; idx < length; idx++) {
                        bindElement(element.children[idx], source[idx]);
                    }
                }
            }
            else {
                $(element).html(kendo.render(template, source));
            }
        }
    });

    binders.input = {
        checked: Binder.extend({
            init: function (element, bindings, options) {
                Binder.fn.init.call(this, element, bindings, options);
                this._change = proxy(this.change, this);

                $(this.element).change(this._change);
            },
            change: function () {
                var element = this.element;
                var value = this.value();

                if (element.type == "radio") {
                    this.bindings[CHECKED].set(value);
                } else if (element.type == "checkbox") {
                    var source = this.bindings[CHECKED].get();
                    var index;

                    if (source instanceof ObservableArray) {
                        if (value !== false && value !== true) {
                            index = source.indexOf(value);
                            if (index > -1) {
                                source.splice(index, 1);
                            } else {
                                source.push(value);
                            }
                        }
                    } else {
                        this.bindings[CHECKED].set(value);
                    }
                }
            },

            refresh: function () {
                var value = this.bindings[CHECKED].get();
                var element = this.element;

                if (element.type == "checkbox") {
                    if (value instanceof ObservableArray) {
                        if (value.indexOf(this.value(element)) >= 0) {
                            value = true;
                        }
                    }

                    element.checked = value === true;
                } else if (element.type == "radio" && value != null) {
                    if (element.value === value.toString()) {
                        element.checked = true;
                    }
                }
            },

            value: function () {
                var element = this.element,
                    value = element.value;

                if (element.type == "checkbox") {
                    if (value == "on" || value == "off" || value === "true") {
                        value = element.checked;
                    }
                }

                return value;
            },
            destroy: function () {
                $(this.element).unbind(CHANGE, this._change);
            }
        })
    };

    binders.select = {
        value: Binder.extend({
            init: function (target, bindings, options) {
                Binder.fn.init.call(this, target, bindings, options);

                this._change = proxy(this.change, this);
                $(this.element).change(this._change);
            },

            change: function () {
                var values = [],
                    element = this.element,
                    source,
                    field = this.options.valueField || this.options.textField,
                    option,
                    valueIndex,
                    value,
                    idx,
                    length;

                for (idx = 0, length = element.options.length; idx < length; idx++) {
                    option = element.options[idx];

                    if (option.selected) {
                        value = option.attributes.value;

                        if (value && value.specified) {
                            value = option.value;
                        } else {
                            value = option.text;
                        }

                        values.push(value);
                    }
                }

                if (field) {
                    source = this.bindings.source.get();
                    for (valueIndex = 0; valueIndex < values.length; valueIndex++) {
                        for (idx = 0, length = source.length; idx < length; idx++) {
                            if (source[idx].get(field) == values[valueIndex]) {
                                values[valueIndex] = source[idx];
                                break;
                            }
                        }
                    }
                }

                value = this.bindings[VALUE].get();
                if (value instanceof ObservableArray) {
                    value.splice.apply(value, [0, value.length].concat(values));
                } else if (value instanceof ObservableObject || !field) {
                    this.bindings[VALUE].set(values[0]);
                } else {
                    this.bindings[VALUE].set(values[0].get(field));
                }
            },
            refresh: function () {
                var optionIndex,
                    element = this.element,
                    options = element.options,
                    value = this.bindings[VALUE].get(),
                    values = value,
                    field = this.options.valueField || this.options.textField,
                    optionValue;

                if (!(values instanceof ObservableArray)) {
                    values = new ObservableArray([value]);
                }

                for (var valueIndex = 0; valueIndex < values.length; valueIndex++) {
                    value = values[valueIndex];

                    if (field && value instanceof ObservableObject) {
                        value = value.get(field);
                    }

                    for (optionIndex = 0; optionIndex < options.length; optionIndex++) {
                        optionValue = options[optionIndex].value;
                        if (optionValue === "" && value !== "") {
                            optionValue = options[optionIndex].text;
                        }

                        if (optionValue == value) {
                            options[optionIndex].selected = true;
                        }
                    }
                }
            },
            destroy: function () {
                $(this.element).unbind(CHANGE, this._change);
            }
        })
    };

    binders.widget = {
        events: Binder.extend({
            init: function (widget, bindings, options) {
                Binder.fn.init.call(this, widget.element[0], bindings, options);
                this.widget = widget;
                this.handlers = {};
            },

            refresh: function (key) {
                var binding = this.bindings.events[key],
                    handler = binding.get();

                this.handlers[key] = function (e) {
                    e.data = binding.source;

                    handler(e);
                };

                this.widget.bind(key, this.handlers[key]);
            },

            destroy: function () {
                var handler;

                for (handler in this.handlers) {
                    this.widget.unbind(handler, this.handlers[handler]);
                }
            }
        }),

        checked: Binder.extend({
            init: function (widget, bindings, options) {
                Binder.fn.init.call(this, widget.element[0], bindings, options);

                this.widget = widget;
                this._change = proxy(this.change, this);
                this.widget.bind(CHANGE, this._change);
            },
            change: function () {
                this.bindings[CHECKED].set(this.value());
            },

            refresh: function () {
                this.widget.check(this.bindings[CHECKED].get() === true);
            },

            value: function () {
                var element = this.element,
                    value = element.value;

                if (value == "on" || value == "off") {
                    value = element.checked;
                }

                return value;
            },

            destroy: function () {
                this.widget.unbind(CHANGE, this._change);
            }
        }),

        visible: Binder.extend({
            init: function (widget, bindings, options) {
                Binder.fn.init.call(this, widget.element[0], bindings, options);

                this.widget = widget;
            },

            refresh: function () {
                var visible = this.bindings.visible.get();
                this.widget.wrapper[0].style.display = visible ? "" : "none";
            }
        }),

        invisible: Binder.extend({
            init: function (widget, bindings, options) {
                Binder.fn.init.call(this, widget.element[0], bindings, options);

                this.widget = widget;
            },

            refresh: function () {
                var invisible = this.bindings.invisible.get();
                this.widget.wrapper[0].style.display = invisible ? "none" : "";
            }
        }),

        enabled: Binder.extend({
            init: function (widget, bindings, options) {
                Binder.fn.init.call(this, widget.element[0], bindings, options);

                this.widget = widget;
            },

            refresh: function () {
                if (this.widget.enable) {
                    this.widget.enable(this.bindings.enabled.get());
                }
            }
        }),

        disabled: Binder.extend({
            init: function (widget, bindings, options) {
                Binder.fn.init.call(this, widget.element[0], bindings, options);

                this.widget = widget;
            },

            refresh: function () {
                if (this.widget.enable) {
                    this.widget.enable(!this.bindings.disabled.get());
                }
            }
        }),

        source: Binder.extend({
            init: function (widget, bindings, options) {
                var that = this;

                Binder.fn.init.call(that, widget.element[0], bindings, options);

                that.widget = widget;
                that._dataBinding = proxy(that.dataBinding, that);
                that._dataBound = proxy(that.dataBound, that);
                that._itemChange = proxy(that.itemChange, that);
            },

            itemChange: function (e) {
                bindElement(e.item[0], e.data, e.ns || kendo.ui);
            },

            dataBinding: function () {
                var idx,
                    length,
                    widget = this.widget,
                    items = widget.items();

                for (idx = 0, length = items.length; idx < length; idx++) {
                    unbindElementTree(items[idx]);
                }
            },

            dataBound: function (e) {
                var idx,
                    length,
                    widget = this.widget,
                    items = widget.items(),
                    dataSource = widget.dataSource,
                    view = dataSource.view(),
                    ns = e.ns || kendo.ui,
                    groups = dataSource.group() || [];

                if (items.length) {
                    if (groups.length) {
                        view = flattenGroups(view);
                    }

                    for (idx = 0, length = view.length; idx < length; idx++) {
                        bindElement(items[idx], view[idx], ns);
                    }
                }
            },

            refresh: function (e) {
                var that = this,
                    source,
                    widget = that.widget;

                e = e || {};

                if (!e.action) {
                    that.destroy();

                    widget.bind("dataBinding", that._dataBinding);
                    widget.bind("dataBound", that._dataBound);
                    widget.bind("itemChange", that._itemChange);

                    if (widget.dataSource instanceof kendo.data.DataSource) {
                        source = that.bindings.source.get();
                        if (source instanceof kendo.data.DataSource) {
                            widget.setDataSource(source);
                        } else {
                            widget.dataSource.data(source);
                        }
                    }
                }
            },

            destroy: function () {
                var widget = this.widget;

                widget.unbind("dataBinding", this._dataBinding);
                widget.unbind("dataBound", this._dataBound);
                widget.unbind("itemChange", this._itemChange);
            }
        }),

        value: Binder.extend({
            init: function (widget, bindings, options) {
                Binder.fn.init.call(this, widget.element[0], bindings, options);

                this.widget = widget;
                this._change = $.proxy(this.change, this);
                this.widget.first(CHANGE, this._change);

                var value = this.bindings.value.get();
                this._valueIsObservableObject = value == null || value instanceof ObservableObject;
            },

            change: function () {
                var value = this.widget.value();
                var idx, length;

                var field = this.options.dataValueField || this.options.dataTextField;

                if (field) {
                    var source,
                        isObservableObject = this._valueIsObservableObject;

                    if (this.bindings.source) {
                        source = this.bindings.source.get();
                    }

                    if (value === "" && isObservableObject) {
                        value = null;
                    } else {
                        if (!source || source instanceof kendo.data.DataSource) {
                            source = this.widget.dataSource.view();
                        }

                        for (idx = 0, length = source.length; idx < length; idx++) {
                            if (source[idx].get(field) == value) {
                                if (isObservableObject) {
                                    value = source[idx];
                                } else {
                                    value = source[idx].get(field);
                                }
                                break;
                            }
                        }
                    }
                }

                this.bindings.value.set(value);
            },

            refresh: function () {
                var field = this.options.dataValueField || this.options.dataTextField;
                var value = this.bindings.value.get();

                if (field && value instanceof ObservableObject) {
                    value = value.get(field);
                }

                this.widget.value(value);
            },

            destroy: function () {
                this.widget.unbind(CHANGE, this._change);
            }
        })
    };

    var BindingTarget = Class.extend({
        init: function (target, options) {
            this.target = target;
            this.options = options;
            this.toDestroy = [];
        },

        bind: function (bindings) {
            var nodeName = this.target.nodeName.toLowerCase(),
                key,
                specificBinders = binders[nodeName] || {};

            for (key in bindings) {
                this.applyBinding(key, bindings, specificBinders);
            }
        },

        applyBinding: function (name, bindings, specificBinders) {
            var binder = specificBinders[name] || binders[name],
                toDestroy = this.toDestroy,
                attribute,
                binding = bindings[name];

            if (binder) {
                binder = new binder(this.target, bindings, this.options);

                toDestroy.push(binder);

                if (binding instanceof Binding) {
                    binder.bind(binding);
                    toDestroy.push(binding);
                } else {
                    for (attribute in binding) {
                        binder.bind(binding, attribute);
                        toDestroy.push(binding[attribute]);
                    }
                }
            } else if (name !== "template") {
                throw new Error("The " + name + " binding is not supported by the " + this.target.nodeName.toLowerCase() + " element");
            }
        },

        destroy: function () {
            var idx,
                length,
                toDestroy = this.toDestroy;

            for (idx = 0, length = toDestroy.length; idx < length; idx++) {
                toDestroy[idx].destroy();
            }
        }
    });

    var WidgetBindingTarget = BindingTarget.extend({
        bind: function (bindings) {
            var that = this,
                binding,
                hasValue = false,
                hasSource = false;

            for (binding in bindings) {
                if (binding == VALUE) {
                    hasValue = true;
                } else if (binding == "source") {
                    hasSource = true;
                } else {
                    that.applyBinding(binding, bindings);
                }
            }

            if (hasSource) {
                that.applyBinding("source", bindings);
            }

            if (hasValue) {
                that.applyBinding(VALUE, bindings);
            }
        },

        applyBinding: function (name, bindings) {
            var binder = binders.widget[name],
                toDestroy = this.toDestroy,
                attribute,
                binding = bindings[name];

            if (binder) {
                binder = new binder(this.target, bindings, this.target.options);

                toDestroy.push(binder);


                if (binding instanceof Binding) {
                    binder.bind(binding);
                    toDestroy.push(binding);
                } else {
                    for (attribute in binding) {
                        binder.bind(binding, attribute);
                        toDestroy.push(binding[attribute]);
                    }
                }
            } else {
                throw new Error("The " + name + " binding is not supported by the " + this.target.options.name + " widget");
            }
        }
    });

    function flattenGroups(data) {
        var idx, length, result = [];

        for (idx = 0, length = data.length; idx < length; idx++) {
            if (data[idx].hasSubgroups) {
                result = result.concat(flattenGroups(data[idx].items));
            } else {
                result = result.concat(data[idx].items);
            }
        }
        return result;
    }

    function bindingTargetForRole(role, element, namespace) {
        var roles = namespace.roles,
            type = roles[role];

        if (type) {
            return new WidgetBindingTarget(kendo.initWidget(element, type.options, roles));
        }
    }

    var keyValueRegExp = /[A-Za-z0-9_\-]+:(\{([^}]*)\}|[^,}]+)/g,
        whiteSpaceRegExp = /\s/g;

    function parseBindings(bind) {
        var result = {},
            idx,
            length,
            token,
            colonIndex,
            key,
            value,
            tokens;

        tokens = bind.match(keyValueRegExp);

        for (idx = 0, length = tokens.length; idx < length; idx++) {
            token = tokens[idx];
            colonIndex = token.indexOf(":");

            key = token.substring(0, colonIndex);
            value = token.substring(colonIndex + 1);

            if (value.charAt(0) == "{") {
                value = parseBindings(value);
            }

            result[key] = value;
        }

        return result;
    }

    function createBindings(bindings, source, type) {
        var binding,
            result = {};

        for (binding in bindings) {
            result[binding] = new type(source, bindings[binding]);
        }

        return result;
    }

    function bindElement(element, source, namespace) {
        var role = element.getAttribute("data-" + kendo.ns + "role"),
            idx,
            bind = element.getAttribute("data-" + kendo.ns + "bind"),
            children = element.children,
            deep = true,
            bindings,
            options = {},
            target;

        if (!namespace) {
            namespace = kendo.ui;
        }

        if (role || bind) {
            unbindElement(element);
        }

        if (role) {
            target = bindingTargetForRole(role, element, namespace);
        }

        if (bind) {
            bind = parseBindings(bind.replace(whiteSpaceRegExp, ""));

            if (!target) {
                options = kendo.parseOptions(element, { textField: "", valueField: "", template: "", valueUpdate: CHANGE });
                target = new BindingTarget(element, options);
            }

            target.source = source;

            bindings = createBindings(bind, source, Binding);

            if (options.template) {
                bindings.template = new TemplateBinding(source, "", options.template);
            }

            if (bindings.click) {
                bind.events = bind.events || {};
                bind.events.click = bind.click;
                delete bindings.click;
            }

            if (bindings.source) {
                deep = false;
            }

            if (bind.attr) {
                bindings.attr = createBindings(bind.attr, source, Binding);
            }

            if (bind.style) {
                bindings.style = createBindings(bind.style, source, Binding);
            }

            if (bind.events) {
                bindings.events = createBindings(bind.events, source, EventBinding);
            }

            target.bind(bindings);
        }

        if (target) {
            element.kendoBindingTarget = target;
        }

        if (deep && children) {
            for (idx = 0; idx < children.length; idx++) {
                bindElement(children[idx], source, namespace);
            }
        }
    }

    function bind(dom, object, namespace) {
        var idx, length;

        object = kendo.observable(object);
        dom = $(dom);

        for (idx = 0, length = dom.length; idx < length; idx++) {
            bindElement(dom[idx], object, namespace);
        }
    }

    function unbindElement(element) {
        var bindingTarget = element.kendoBindingTarget;

        if (bindingTarget) {
            bindingTarget.destroy();

            if ($.support.deleteExpando) {
                delete element.kendoBindingTarget;
            } else if (element.removeAttribute) {
                element.removeAttribute("kendoBindingTarget");
            } else {
                element.kendoBindingTarget = null;
            }
        }
    }

    function unbindElementTree(element) {
        var idx,
            length,
            children = element.children;

        unbindElement(element);

        if (children) {
            for (idx = 0, length = children.length; idx < length; idx++) {
                unbindElementTree(children[idx]);
            }
        }
    }

    function unbind(dom) {
        var idx, length;

        dom = $(dom);

        for (idx = 0, length = dom.length; idx < length; idx++) {
            unbindElementTree(dom[idx]);
        }
    }

    function notify(widget, namespace) {
        var element = widget.element,
            bindingTarget = element[0].kendoBindingTarget;

        if (bindingTarget) {
            bind(element, bindingTarget.source, namespace);
        }
    }

    kendo.unbind = unbind;
    kendo.bind = bind;
    kendo.data.binders = binders;
    kendo.data.Binder = Binder;
    kendo.notify = notify;

    kendo.observable = function (object) {
        if (!(object instanceof ObservableObject)) {
            object = new ObservableObject(object);
        }

        return object;
    };

})(jQuery);
; (function ($, undefined) {
    var kendo = window.kendo,
        Widget = kendo.ui.Widget,
        INVALIDMSG = "k-invalid-msg",
        INVALIDINPUT = "k-tooltip-validation input-validation-error",

        emailRegExp = /^((([a-z]|\d|[!#\$%&'\*\+\-\/=\?\^_`{\|}~]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])+(\.([a-z]|\d|[!#\$%&'\*\+\-\/=\?\^_`{\|}~]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])+)*)|((\x22)((((\x20|\x09)*(\x0d\x0a))?(\x20|\x09)+)?(([\x01-\x08\x0b\x0c\x0e-\x1f\x7f]|\x21|[\x23-\x5b]|[\x5d-\x7e]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(\\([\x01-\x09\x0b\x0c\x0d-\x7f]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF]))))*(((\x20|\x09)*(\x0d\x0a))?(\x20|\x09)+)?(\x22)))@((([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])*([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])))\.)+(([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])*([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])))$/i,
        urlRegExp = /^(https?|ftp):\/\/(((([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(%[\da-f]{2})|[!\$&'\(\)\*\+,;=]|:)*@)?(((\d|[1-9]\d|1\d\d|2[0-4]\d|25[0-5])\.(\d|[1-9]\d|1\d\d|2[0-4]\d|25[0-5])\.(\d|[1-9]\d|1\d\d|2[0-4]\d|25[0-5])\.(\d|[1-9]\d|1\d\d|2[0-4]\d|25[0-5]))|((([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])*([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])))\.)+(([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])*([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])))\.?)(:\d*)?)(\/((([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(%[\da-f]{2})|[!\$&'\(\)\*\+,;=]|:|@)+(\/(([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(%[\da-f]{2})|[!\$&'\(\)\*\+,;=]|:|@)*)*)?)?(\?((([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(%[\da-f]{2})|[!\$&'\(\)\*\+,;=]|:|@)|[\uE000-\uF8FF]|\/|\?)*)?(\#((([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(%[\da-f]{2})|[!\$&'\(\)\*\+,;=]|:|@)|\/|\?)*)?$/i,
        INPUTSELECTOR = ":[data-val-required]",
        NUMBERINPUTSELECTOR = "[type=number],[type=range]",
        BLUR = "blur",
        NAME = "name",
        PLACEHOLDER = "title",
        FORM = "form",
        NOVALIDATE = "novalidate",
        proxy = $.proxy,
        patternMatcher = function (value, pattern) {
            if (typeof pattern === "string") {
                pattern = new RegExp('^(?:' + pattern + ')$');
            }
            return pattern.test(value);
        },
        matcher = function (input, selector, pattern) {
            var value = input.val();

            if (input.filter(selector).length && value !== "") {
                return patternMatcher(value, pattern);
            }
            return true;
        },
        hasAttribute = function (input, name) {
            if (input.length) {
                return input[0].attributes[name] !== undefined;
            }
            return false;
        },
        nameSpecialCharRegExp = /(\[|\]|\$|\.|\:|\+)/g;

    if (!kendo.ui.validator) {
        kendo.ui.validator = { rules: {}, messages: {} };
    }

    function resolveRules(element) {
        var resolvers = kendo.ui.validator.ruleResolvers || {},
            rules = {},
            name;

        for (name in resolvers) {
            $.extend(true, rules, resolvers[name].resolve(element));
        }
        return rules;
    }

    function decode(value) {
        return value.replace(/&amp/g, '&amp;')
            .replace(/&quot;/g, '"')
            .replace(/&#39;/g, "'")
            .replace(/&lt;/g, '<')
            .replace(/&gt;/g, '>');
    }


    var Validator = Widget.extend(/** @lends kendo.Validator.prototype */{
        init: function (element, options) {
            var that = this,
                resolved = resolveRules(element);

            options = options || {};

            options.rules = $.extend({}, kendo.ui.validator.rules, resolved.rules, options.rules);
            options.messages = $.extend({}, kendo.ui.validator.messages, resolved.messages, options.messages);

            Widget.fn.init.call(that, element, options);

            that._errorTemplate = kendo.template(that.options.errorTemplate);

            if (that.element.is(FORM)) {
                that.element.attr(NOVALIDATE, NOVALIDATE);
            }

            that._errors = {};
            that._attachEvents();
        },

        options: {
            name: "Validator",
            errorTemplate: '<span style="width:100px;"><span class="k-widget k-tooltip k-tooltip-validation">' +
                '<span class="k-warning" style="cursor:pointer;"> ${message}</span></span></span>',
            messages: {
                required: "{0} is required",
                pattern: "{0} is not valid",
                min: "{0} should be greater than or equal to {1}",
                max: "{0} should be smaller than or equal to {1}",
                step: "{0} is not valid",
                email: "{0} is not valid email",
                url: "{0} is not valid URL",
                date: "{0} is not valid date"
                //                remote: "{0} is already exists"
            },
            rules: {
                required: function (input) {
                    var checkbox = input.filter("[type=checkbox]").length && input.attr("checked") !== "checked",
                        value = input.val();

                    return !(hasAttribute(input, "data-val-required") && (value === "" || !value || checkbox));
                },
                pattern: function (input) {
                    if (input.filter("[type=text],[type=email],[type=url],[type=tel],[type=search],[type=password]").filter("[pattern]").length && input.val() !== "") {
                        return patternMatcher(input.val(), input.attr("pattern"));
                    }
                    return true;
                },
                min: function (input) {
                    if (input.filter(NUMBERINPUTSELECTOR + ",[" + kendo.attr("type") + "=number]").filter("[min]").length && input.val() !== "") {
                        var min = parseFloat(input.attr("min")) || 0,
                            val = parseFloat(input.val());

                        return min <= val;
                    }
                    return true;
                },
                max: function (input) {
                    if (input.filter(NUMBERINPUTSELECTOR + ",[" + kendo.attr("type") + "=number]").filter("[max]").length && input.val() !== "") {
                        var max = parseFloat(input.attr("max")) || 0,
                            val = parseFloat(input.val());

                        return max >= val;
                    }
                    return true;
                },
                step: function (input) {
                    if (input.filter(NUMBERINPUTSELECTOR + ",[" + kendo.attr("type") + "=number]").filter("[step]").length && input.val() !== "") {
                        var min = parseFloat(input.attr("min")) || 0,
                            step = parseFloat(input.attr("step")) || 0,
                            val = parseFloat(input.val());

                        return (((val - min) * 10) % (step * 10)) / 100 === 0;
                    }
                    return true;
                },
                email: function (input) {
                    return matcher(input, "[type=email],[" + kendo.attr("type") + "=email]", emailRegExp);
                },
                url: function (input) {
                    return matcher(input, "[type=url],[" + kendo.attr("type") + "=url]", urlRegExp);
                },
                date: function (input) {
                    if (input.filter("[type^=date],[" + kendo.attr("type") + "=date]").length && input.val() !== "") {
                        return kendo.parseDate(input.val(), input.attr(kendo.attr("format"))) !== null;
                    }
                    return true;
                }//,
                //                remote: function(input) {
                //                    var checkbox = input.filter("[type=checkbox]").length && input.attr("checked") !== "checked",
                //                        value = input.val();

                //                    return !(hasAttribute(input, "data-val-remote"));
                //                }
            },
            validateOnBlur: true,
            pageErrorIcon: true
        },

        _submit: function (e) {
            if (!this.validate()) {
                e.stopPropagation();
                e.stopImmediatePropagation();
                e.preventDefault();
                return false;
            }
            return true;
        },

        _attachEvents: function () {
            var that = this;

            if (that.element.is(FORM)) {
                that.element.submit(proxy(that._submit, that));
            }

            if (that.options.validateOnBlur) {
                if (!that.element.is(INPUTSELECTOR)) {
                    that.element.delegate(INPUTSELECTOR, BLUR, function () {
                        that.validateInput($(this));
                    });
                } else {
                    that.element.bind(BLUR, function () {
                        that.validateInput(that.element);
                    });
                }
            }
        },

        validate: function () {
            var that = this,
                inputs,
                idx,
                invalid = false,
                length;

            that._errors = {};
            //             $("[placeholder]").each(function () {
            //                if ($(this).val() === $(this).attr('placeholder')) {
            //                    $(this).val('');
            //                }
            //            });
            if (!that.element.is(INPUTSELECTOR)) {
                inputs = that.element.find(INPUTSELECTOR);

                for (idx = 0, length = inputs.length; idx < length; idx++) {
                    if (!that.validateInput(inputs.eq(idx))) {
                        invalid = true;
                    }
                }
                if (invalid) {
                    //                    $("[placeholder]").each(function () {
                    //                        if ($(this).val() === '') {
                    //                            $(this).val($(this).attr('placeholder'));
                    //                        }
                    //                    });
                }
                return !invalid;

            }
            return that.validateInput(that.element);
        },


        validateInput: function (input) {
            input = $(input);

            var that = this,
                template = that._errorTemplate,
                result = that._checkValidity(input),
                valid = result.valid,
                className = "." + INVALIDMSG,
                SHOWPAGEERRORICON = "true",
                fieldName = (input.attr(NAME) || ""),
                lbl = that._findMessageContainer(fieldName).add(input.next(className)).hide(),
                messageText;
            if (that.options.pageErrorIcon === SHOWPAGEERRORICON) {
                if (!valid) {
                    if (input.attr("HideErrorIcon") == undefined) {
                        messageText = that._extractMessage(input, result.key);
                        that._errors[fieldName] = messageText;
                        var messageLabel = $(template({ message: decode(messageText) }));

                        that._decorateMessageContainer(messageLabel, fieldName);

                        if (!lbl.replaceWith(messageLabel).length) {
                            if (input.attr("DateType") != undefined) {
                                $('<span class="span-space">**</span>').insertAfter(input.closest("td").find("span.k-select"))
                                messageLabel.insertAfter(input.closest("td").find("span.span-space"));
                            }
                            else if (input.attr("AutoComplete") != undefined) {
                                $('<span class="span-space">**</span>').insertAfter(input.closest("td").find("span.k-header"))
                                messageLabel.insertAfter(input.closest("td").find("span.span-space"));
                            }
                            else {
                                $('<span class="span-space">**</span>').insertAfter(input)
                                messageLabel.insertAfter(input.closest("td").find("span.span-space"));
                            }
                        }
                        messageLabel.show();
                    }
                }
            }
            if (input.attr("NumberType") != undefined) {
                input.closest("td").find("input:[id='_temp" + input.attr("name") + "']").toggleClass(INVALIDINPUT, !valid);
            }
            else {
                input.toggleClass(INVALIDINPUT, !valid);
            }

            return valid;
        },

        _findMessageContainer: function (fieldName) {
            var locators = kendo.ui.validator.messageLocators,
                name,
                containers = this.element.find("." + INVALIDMSG + "[" + kendo.attr("for") + "=" + fieldName.replace(nameSpecialCharRegExp, "\\$1") + "]");

            for (name in locators) {
                containers = containers.add(locators[name].locate(this.element, fieldName));
            }

            return containers;
        },

        _decorateMessageContainer: function (container, fieldName) {
            var locators = kendo.ui.validator.messageLocators,
                name;

            container.addClass(INVALIDMSG).attr(kendo.attr("for"), fieldName || "");

            for (name in locators) {
                locators[name].decorate(container, fieldName);
            }
        },

        _extractMessage: function (input, ruleKey) {
            var that = this,
                customMessage = that.options.messages[ruleKey],
                fieldName = (input.attr(PLACEHOLDER) != undefined ? input.attr(PLACEHOLDER) : input.attr(NAME));

            customMessage = $.isFunction(customMessage) ? customMessage(input) : customMessage;

            return kendo.format(input.attr(kendo.attr(ruleKey + "-msg")) || input.attr("validationMessage") || customMessage || "", fieldName, input.attr(ruleKey));
        },

        _checkValidity: function (input) {
            var rules = this.options.rules,
                rule;

            for (rule in rules) {
                if (!rules[rule](input)) {
                    return { valid: false, key: rule };
                }
            }

            return { valid: true };
        },

        errors: function () {
            var results = [],
                errors = this._errors,
                error;

            for (error in errors) {
                results.push(errors[error]);
            }
            return results;
        }
    });

    kendo.ui.plugin(Validator);
})(jQuery);
(function ($, undefined) {
    var kendo = window.kendo,
        support = kendo.support,
        pointers = support.pointers,
        document = window.document,
        SURFACE = $(document.documentElement),
        Class = kendo.Class,
        Widget = kendo.ui.Widget,
        Observable = kendo.Observable,
        proxy = $.proxy,
        now = $.now,
        extend = $.extend,
        getOffset = kendo.getOffset,
        draggables = {},
        dropTargets = {},
        lastDropTarget,
        invalidZeroEvents = support.mobileOS && support.mobileOS.android,
        START_EVENTS = "mousedown",
        MOVE_EVENTS = "mousemove",
        END_EVENTS = "mouseup mouseleave",
        KEYUP = "keyup",
        CHANGE = "change",

        // Draggable events
        DRAGSTART = "dragstart",
        DRAG = "drag",
        DRAGEND = "dragend",
        DRAGCANCEL = "dragcancel",

        // DropTarget events
        DRAGENTER = "dragenter",
        DRAGLEAVE = "dragleave",
        DROP = "drop",

        // Drag events
        START = "start",
        MOVE = "move",
        END = "end",
        CANCEL = "cancel",
        TAP = "tap";

    if (support.touch) {
        START_EVENTS = "touchstart";
        MOVE_EVENTS = "touchmove";
        END_EVENTS = "touchend touchcancel";
    }

    if (pointers) {
        START_EVENTS = "MSPointerDown";
        MOVE_EVENTS = "MSPointerMove";
        END_EVENTS = "MSPointerUp MSPointerCancel";
    }

    function contains(parent, child) {
        try {
            return $.contains(parent, child) || parent == child;
        } catch (e) {
            return false;
        }
    }

    function elementUnderCursor(e) {
        return document.elementFromPoint(e.x.client, e.y.client);
    }

    function numericCssPropery(element, property) {
        return parseInt(element.css(property), 10) || 0;
    }

    function within(value, range) {
        return Math.min(Math.max(value, range.min), range.max);
    }

    function containerBoundaries(container, element) {
        var offset = container.offset(),
            minX = offset.left + numericCssPropery(container, "borderLeftWidth") + numericCssPropery(container, "paddingLeft"),
            minY = offset.top + numericCssPropery(container, "borderTopWidth") + numericCssPropery(container, "paddingTop"),
            maxX = minX + container.width() - element.outerWidth(true),
            maxY = minY + container.height() - element.outerHeight(true);

        return {
            x: { min: minX, max: maxX },
            y: { min: minY, max: maxY }
        };
    }

    function addNS(events, ns) {
        return events.replace(/ /g, ns + " ");
    }

    function preventTrigger(e) {
        e.preventDefault();

        var target = $(e.target),   // Determine the correct parent to receive the event and bubble.
            parent = target.closest(".k-widget").parent();

        if (!parent[0]) {
            parent = target.parent();
        }

        parent.trigger(e.type);
    }


    var DragAxis = Class.extend(/** @lends kendo.DragAxis.prototype */{
        /**
         * @constructs
         */
        init: function (axis) {
            this.axis = axis;
        },

        start: function (location, timeStamp) {
            var that = this,
                offset = location["page" + that.axis];

            that.startLocation = that.location = offset;
            that.client = location["client" + that.axis];
            that.velocity = that.delta = 0;
            that.timeStamp = timeStamp;
        },

        move: function (location, timeStamp) {
            var that = this,
                offset = location["page" + that.axis];

            if (!offset && invalidZeroEvents) {
                return;
            }

            that.delta = offset - that.location;
            that.location = offset;
            that.client = location["client" + that.axis];
            that.initialDelta = offset - that.startLocation;
            that.velocity = that.delta / (timeStamp - that.timeStamp);
            that.timeStamp = timeStamp;
        }
    });


    var Drag = Observable.extend(/** @lends kendo.Drag.prototype */{

        init: function (element, options) {
            var that = this,
                eventMap = {},
                filter,
                preventIfMoving,
                ns = "." + kendo.guid();

            options = options || {};
            filter = that.filter = options.filter;
            that.threshold = options.threshold || 0;

            element = $(element);
            Observable.fn.init.call(that);

            eventMap[addNS(MOVE_EVENTS, ns)] = proxy(that._move, that);
            eventMap[addNS(END_EVENTS, ns)] = proxy(that._end, that);

            extend(that, {
                x: new DragAxis("X"),
                y: new DragAxis("Y"),
                element: element,
                surface: options.global ? SURFACE : options.surface || element,
                stopPropagation: options.stopPropagation,
                pressed: false,
                eventMap: eventMap,
                ns: ns
            });

            element
                .on(START_EVENTS, filter, proxy(that._start, that))
                .on("dragstart", filter, kendo.preventDefault);

            if (pointers) {
                element.css("-ms-touch-action", "pinch-zoom double-tap-zoom");
            }

            if (!options.allowSelection) {
                var args = ["mousedown selectstart", filter, preventTrigger];

                if (filter instanceof $) {
                    args.splice(2, 0, null);
                }

                element.on.apply(element, args);
            }

            if (support.eventCapture) {
                preventIfMoving = function (e) {
                    if (that.moved) {
                        e.preventDefault();
                    }
                };

                that.surface[0].addEventListener(support.mouseup, preventIfMoving, true);
            }

            that.bind([

            TAP,

            START,

            MOVE,

            END,

            CANCEL], options);
        },


        capture: function () {
            Drag.captured = true;
        },


        cancel: function () {
            this._cancel();
            this.trigger(CANCEL);
        },

        skip: function () {
            this._cancel();
        },

        _cancel: function () {
            var that = this;
            that.moved = that.pressed = false;
            that.surface.off(that.ns);
        },

        _start: function (e) {
            var that = this,
                filter = that.filter,
                originalEvent = e.originalEvent,
                touch,
                location = e;

            if (that.pressed) { return; }

            if (filter) {
                that.target = $(e.target).is(filter) ? $(e.target) : $(e.target).closest(filter);
            } else {
                that.target = that.element;
            }

            if (!that.target.length) {
                return;
            }

            that.currentTarget = e.currentTarget;

            if (that.stopPropagation) {
                e.stopPropagation();
            }

            that.pressed = true;
            that.moved = false;
            that.startTime = null;

            if (support.touch) {
                touch = originalEvent.changedTouches[0];
                that.touchID = touch.identifier;
                location = touch;
            }

            if (pointers) {
                that.touchID = originalEvent.pointerId;
                location = originalEvent;
            }

            that._perAxis(START, location, now());
            that.surface.off(that.eventMap).on(that.eventMap);
            Drag.captured = false;
        },

        _move: function (e) {
            var that = this,
                xDelta,
                yDelta,
                delta;

            if (!that.pressed) { return; }

            that._withEvent(e, function (location) {

                that._perAxis(MOVE, location, now());

                if (!that.moved) {
                    xDelta = that.x.initialDelta;
                    yDelta = that.y.initialDelta;

                    delta = Math.sqrt(xDelta * xDelta + yDelta * yDelta);

                    if (delta <= that.threshold) {
                        return;
                    }

                    if (!Drag.captured) {
                        that.startTime = now();
                        that._trigger(START, e);
                        that.moved = true;
                    } else {
                        return that._cancel();
                    }
                }

                // Event handlers may cancel the swipe in the START event handler, hence the double check for pressed.
                if (that.pressed) {
                    that._trigger(MOVE, e);
                }
            });
        },

        _end: function (e) {
            var that = this;

            if (!that.pressed) { return; }

            that._withEvent(e, function () {
                if (that.moved) {
                    that.endTime = now();
                    that._trigger(END, e);
                    that.moved = false;
                } else {
                    that._trigger(TAP, e);
                }

                that._cancel();
            });
        },

        _perAxis: function (method, location, timeStamp) {
            this.x[method](location, timeStamp);
            this.y[method](location, timeStamp);
        },

        _trigger: function (name, e) {
            var data = {
                x: this.x,
                y: this.y,
                target: this.target,
                event: e
            };

            if (this.trigger(name, data)) {
                e.preventDefault();
            }
        },

        _withEvent: function (e, callback) {
            var that = this,
                touchID = that.touchID,
                originalEvent = e.originalEvent,
                touches,
                idx;

            if (support.touch) {
                touches = originalEvent.changedTouches;
                idx = touches.length;

                while (idx) {
                    idx--;
                    if (touches[idx].identifier === touchID) {
                        return callback(touches[idx]);
                    }
                }
            }
            else if (pointers) {
                if (touchID === originalEvent.pointerId) {
                    return callback(originalEvent);
                }
            } else {
                return callback(e);
            }
        }
    });

    var Tap = Observable.extend({
        init: function (element, options) {
            var that = this,
                domElement = element[0];

            that.capture = false;
            domElement.addEventListener(START_EVENTS, proxy(that._press, that), true);
            $.each(END_EVENTS.split(" "), function () {
                domElement.addEventListener(this, proxy(that._release, that), true);
            });

            Observable.fn.init.call(that);

            that.bind(["press", "release"], options || {});
        },

        _press: function (e) {
            var that = this;
            that.trigger("press");
            if (that.capture) {
                e.preventDefault();
            }
        },

        _release: function (e) {
            var that = this;
            that.trigger("release");

            if (that.capture) {
                e.preventDefault();
                that.cancelCapture();
            }
        },

        captureNext: function () {
            this.capture = true;
        },

        cancelCapture: function () {
            this.capture = false;
        }
    });

    var PaneDimension = Observable.extend({
        init: function (options) {
            var that = this;
            Observable.fn.init.call(that);

            $.extend(that, options);

            that.max = 0;

            if (that.horizontal) {
                that.measure = "width";
                that.scrollSize = "scrollWidth";
                that.axis = "x";
            } else {
                that.measure = "height";
                that.scrollSize = "scrollHeight";
                that.axis = "y";
            }
        },

        outOfBounds: function (offset) {
            return offset > this.max || offset < this.min;
        },

        present: function () {
            return this.max - this.min;
        },

        getSize: function () {
            return this.container[this.measure]();
        },

        getTotal: function () {
            return this.element[0][this.scrollSize];
        },

        update: function (silent) {
            var that = this;

            that.size = that.getSize();
            that.total = that.getTotal();
            that.min = Math.min(that.max, that.size - that.total);
            if (!silent) {
                that.trigger(CHANGE, that);
            }
        }
    });

    var PaneDimensions = Observable.extend({
        init: function (options) {
            var that = this,
                refresh = proxy(that.refresh, that);

            Observable.fn.init.call(that);

            that.x = new PaneDimension(extend({ horizontal: true }, options));
            that.y = new PaneDimension(extend({ horizontal: false }, options));

            that.bind(CHANGE, options);

            kendo.onResize(refresh);
        },

        present: function () {
            return this.x.present() || this.y.present();
        },

        refresh: function () {
            this.x.update();
            this.y.update();
            this.trigger(CHANGE);
        }
    });

    var PaneAxis = Observable.extend({
        init: function (options) {
            var that = this;
            extend(that, options);
            Observable.fn.init.call(that);
        },

        dragMove: function (delta) {
            var that = this,
                dimension = that.dimension,
                axis = that.axis,
                movable = that.movable,
                position = movable[axis] + delta;

            if (!dimension.present()) {
                return;
            }

            if ((position < dimension.min && delta < 0) || (position > dimension.max && delta > 0)) {
                delta *= that.resistance;
            }

            movable.translateAxis(axis, delta);
            that.trigger(CHANGE, that);
        }
    });

    var Pane = Class.extend({
        init: function (options) {
            var that = this,
                x,
                y,
                resistance;

            extend(that, { elastic: true }, options);

            resistance = that.elastic ? 0.5 : 0;

            that.x = x = new PaneAxis({
                axis: "x",
                dimension: that.dimensions.x,
                resistance: resistance,
                movable: that.movable
            });

            that.y = y = new PaneAxis({
                axis: "y",
                dimension: that.dimensions.y,
                resistance: resistance,
                movable: that.movable
            });

            that.drag.bind(["move", "end"], {
                move: function (e) {
                    if (x.dimension.present() || y.dimension.present()) {
                        x.dragMove(e.x.delta);
                        y.dragMove(e.y.delta);
                        e.preventDefault();
                    } else {
                        that.drag.skip();
                    }
                },

                end: function (e) {
                    e.preventDefault();
                }
            });
        }
    });

    var TRANSFORM_STYLE = support.transitions.prefix + "Transform",
        round = Math.round,
        translate;

    if (support.hasHW3D) {
        translate = function (x, y) {
            return "translate3d(" + round(x) + "px," + round(y) + "px,0)";
        };
    } else {
        translate = function (x, y) {
            return "translate(" + round(x) + "px," + round(y) + "px)";
        };
    }

    var Movable = Observable.extend({
        init: function (element) {
            var that = this;

            Observable.fn.init.call(that);

            that.element = $(element);
            that.x = 0;
            that.y = 0;
            that._saveCoordinates(translate(that.x, that.y));
        },

        translateAxis: function (axis, by) {
            this[axis] += by;
            this.refresh();
        },

        translate: function (coordinates) {
            this.x += coordinates.x;
            this.y += coordinates.y;
            this.refresh();
        },

        moveAxis: function (axis, value) {
            this[axis] = value;
            this.refresh();
        },

        moveTo: function (coordinates) {
            extend(this, coordinates);
            this.refresh();
        },

        refresh: function () {
            var that = this,
                newCoordinates = translate(that.x, that.y);

            if (newCoordinates != that.coordinates) {
                that.element[0].style[TRANSFORM_STYLE] = newCoordinates;
                that._saveCoordinates(newCoordinates);
                that.trigger(CHANGE);
            }
        },

        _saveCoordinates: function (coordinates) {
            this.coordinates = coordinates;
        }
    });

    var DropTarget = Widget.extend(/** @lends kendo.ui.DropTarget.prototype */ {

        init: function (element, options) {
            var that = this;

            Widget.fn.init.call(that, element, options);

            var group = that.options.group;

            if (!(group in dropTargets)) {
                dropTargets[group] = [that];
            } else {
                dropTargets[group].push(that);
            }
        },

        events: [

            DRAGENTER,

            DRAGLEAVE,

            DROP
        ],

        options: {
            name: "DropTarget",
            group: "default"
        },

        _trigger: function (eventName, e) {
            var that = this,
                draggable = draggables[that.options.group];

            if (draggable) {
                return that.trigger(eventName, extend({}, e.event, {
                    draggable: draggable
                }));
            }
        },

        _over: function (e) {
            this._trigger(DRAGENTER, e);
        },

        _out: function (e) {
            this._trigger(DRAGLEAVE, e);
        },

        _drop: function (e) {
            var that = this,
                draggable = draggables[that.options.group];

            if (draggable) {
                draggable.dropped = !that._trigger(DROP, e);
            }
        }
    });

    var Draggable = Widget.extend(/** @lends kendo.ui.Draggable.prototype */{

        init: function (element, options) {
            var that = this;

            Widget.fn.init.call(that, element, options);

            that.drag = new Drag(that.element, {
                global: true,
                stopPropagation: true,
                filter: that.options.filter,
                threshold: that.options.distance,
                start: proxy(that._start, that),
                move: proxy(that._drag, that),
                end: proxy(that._end, that),
                cancel: proxy(that._cancel, that)
            });

            that.destroy = proxy(that._destroy, that);
            that.captureEscape = function (e) {
                if (e.keyCode === kendo.keys.ESC) {
                    that._trigger(DRAGCANCEL, { event: e });
                    that.drag.cancel();
                }
            };
        },

        events: [

            DRAGSTART,

            DRAG,

            DRAGEND,

            DRAGCANCEL
        ],

        options: {
            name: "Draggable",
            distance: 5,
            group: "default",
            cursorOffset: null,
            axis: null,
            container: null,
            dropped: false
        },

        _start: function (e) {
            var that = this,
                options = that.options,
                container = options.container,
                hint = options.hint;

            that.currentTarget = that.drag.target;
            that.currentTargetOffset = getOffset(that.currentTarget);

            if (hint) {
                that.hint = $.isFunction(hint) ? $(hint(that.currentTarget)) : hint;

                var offset = getOffset(that.currentTarget);
                that.hintOffset = offset;

                that.hint.css({
                    position: "absolute",
                    zIndex: 20000, // the Window's z-index is 10000 and can be raised because of z-stacking
                    left: offset.left,
                    top: offset.top
                })
                .appendTo(document.body);
            }

            draggables[options.group] = that;

            that.dropped = false;

            if (container) {
                that.boundaries = containerBoundaries(container, that.hint);
            }

            if (that._trigger(DRAGSTART, e)) {
                that.drag.cancel();
                that.destroy();
            }

            $(document).on(KEYUP, that.captureEscape);
        },

        updateHint: function (e) {
            var that = this,
                coordinates,
                options = that.options,
                boundaries = that.boundaries,
                axis = options.axis,
                cursorOffset = that.options.cursorOffset;

            if (cursorOffset) {
                coordinates = { left: e.x.location + cursorOffset.left, top: e.y.location + cursorOffset.top };
            } else {
                that.hintOffset.left += e.x.delta;
                that.hintOffset.top += e.y.delta;
                coordinates = $.extend({}, that.hintOffset);
            }

            if (boundaries) {
                coordinates.top = within(coordinates.top, boundaries.y);
                coordinates.left = within(coordinates.left, boundaries.x);
            }

            if (axis === "x") {
                delete coordinates.top;
            } else if (axis === "y") {
                delete coordinates.left;
            }

            that.hint.css(coordinates);
        },

        _drag: function (e) {
            var that = this;

            e.preventDefault();

            that._withDropTarget(e, function (target) {
                if (!target) {
                    if (lastDropTarget) {
                        lastDropTarget._trigger(DRAGLEAVE, e);
                        lastDropTarget = null;
                    }
                    return;
                }

                if (lastDropTarget) {
                    if (target.element[0] === lastDropTarget.element[0]) {
                        return;
                    }

                    lastDropTarget._trigger(DRAGLEAVE, e);
                }

                target._trigger(DRAGENTER, e);
                lastDropTarget = target;
            });

            that._trigger(DRAG, e);

            if (that.hint) {
                that.updateHint(e);
            }
        },

        _end: function (e) {
            var that = this;

            that._withDropTarget(e, function (target) {
                if (target) {
                    target._drop(e);
                    lastDropTarget = null;
                }
            });

            that._trigger(DRAGEND, e);
            that._cancel(e.event);
        },

        _cancel: function (e) {
            var that = this;

            if (that.hint && !that.dropped) {
                that.hint.animate(that.currentTargetOffset, "fast", that.destroy);
            } else {
                that.destroy();
            }
        },

        _trigger: function (eventName, e) {
            var that = this;

            return that.trigger(
            eventName, extend(
            {},
            e.event,
            {
                x: e.x,
                y: e.y,
                currentTarget: that.currentTarget
            }));
        },

        _withDropTarget: function (e, callback) {
            var that = this,
                target,
                theTarget,
                result,
                options = that.options,
                targets = dropTargets[options.group],
                i = 0,
                length = targets && targets.length;

            if (length) {

                target = elementUnderCursor(e);

                if (that.hint && contains(that.hint, target)) {
                    that.hint.hide();
                    target = elementUnderCursor(e);
                    that.hint.show();
                }

                outer:
                    while (target) {
                        for (i = 0; i < length; i++) {
                            theTarget = targets[i];
                            if (theTarget.element[0] === target) {
                                result = theTarget;
                                break outer;
                            }
                        }

                        target = target.parentNode;
                    }

                callback(result);
            }
        },

        _destroy: function () {
            var that = this;

            if (that.hint) {
                that.hint.remove();
            }

            delete draggables[that.options.group];

            that.trigger("destroy");
            $(document).off(KEYUP, that.captureEscape);
        }
    });

    kendo.ui.plugin(DropTarget);
    kendo.ui.plugin(Draggable);
    kendo.Drag = Drag;
    kendo.Tap = Tap;
    kendo.containerBoundaries = containerBoundaries;

    extend(kendo.ui, {
        Pane: Pane,
        PaneDimensions: PaneDimensions,
        Movable: Movable
    });

})(jQuery);
(function ($, undefined) {
    var kendo = window.kendo,
        mobile = kendo.mobile,
        fx = kendo.fx,
        ui = mobile.ui,
        proxy = $.proxy,
        extend = $.extend,
        Widget = ui.Widget,
        Class = kendo.Class,
        Movable = kendo.ui.Movable,
        Pane = kendo.ui.Pane,
        PaneDimensions = kendo.ui.PaneDimensions,
        Transition = fx.Transition,
        Animation = fx.Animation,
        SNAPBACK_DURATION = 500,
        SCROLLBAR_OPACITY = 0.7,
        FRICTION = 0.93,
        OUT_OF_BOUNDS_FRICTION = 0.5,
        RELEASECLASS = "km-scroller-release",
        REFRESHCLASS = "km-scroller-refresh",
        PULL = "pull",
        CHANGE = "change",
        RESIZE = "resize",
        SCROLL = "scroll";

    var DragInertia = Animation.extend({
        init: function (options) {
            var that = this;

            Animation.fn.init.call(that);

            extend(that, options, {
                transition: new Transition({
                    axis: options.axis,
                    movable: options.movable,
                    onEnd: function () { that._end(); }
                })
            });

            that.tap.bind("press", function () { that.cancel(); });
            that.drag.bind("end", proxy(that.start, that));
            that.drag.bind("tap", proxy(that.onEnd, that));
        },

        onCancel: function () {
            this.transition.cancel();
        },

        freeze: function (location) {
            var that = this;
            that.cancel();
            that._moveTo(location);
        },

        onEnd: function () {
            var that = this;
            if (that._outOfBounds()) {
                that._snapBack();
            } else {
                that._end();
            }
        },

        done: function () {
            return Math.abs(this.velocity) < 1;
        },

        start: function () {
            var that = this;

            if (!that.dimension.present()) { return; }

            if (that._outOfBounds()) {
                that._snapBack();
            } else {
                that.velocity = that.drag[that.axis].velocity * 16;
                if (that.velocity) {
                    that.tap.captureNext();
                    Animation.fn.start.call(that);
                }
            }
        },

        tick: function () {
            var that = this,
                dimension = that.dimension,
                friction = that._outOfBounds() ? OUT_OF_BOUNDS_FRICTION : FRICTION,
                delta = (that.velocity *= friction),
                location = that.movable[that.axis] + delta;

            if (!that.elastic && dimension.outOfBounds(location)) {
                location = Math.max(Math.min(location, dimension.max), dimension.min);
                that.velocity = 0;
            }

            that.movable.moveAxis(that.axis, location);
        },

        _end: function () {
            this.tap.cancelCapture();
            this.end();
        },

        _outOfBounds: function () {
            return this.dimension.outOfBounds(this.movable[this.axis]);
        },

        _snapBack: function () {
            var that = this,
                dimension = that.dimension,
                snapBack = that.movable[that.axis] > dimension.max ? dimension.max : dimension.min;
            that._moveTo(snapBack);
        },

        _moveTo: function (location) {
            this.transition.moveTo({ location: location, duration: SNAPBACK_DURATION, ease: Transition.easeOutExpo });
        }
    });

    var ScrollBar = Class.extend({
        init: function (options) {
            var that = this,
                horizontal = options.axis === "x",
                element = $('<div class="km-touch-scrollbar km-' + (horizontal ? "horizontal" : "vertical") + '-scrollbar" />');

            extend(that, options, {
                element: element,
                elementSize: 0,
                movable: new Movable(element),
                scrollMovable: options.movable,
                size: horizontal ? "width" : "height"
            });

            that.scrollMovable.bind(CHANGE, proxy(that._move, that));
            that.container.append(element);
        },

        _move: function () {
            var that = this,
                axis = that.axis,
                dimension = that.dimension,
                paneSize = dimension.size,
                scrollMovable = that.scrollMovable,
                sizeRatio = paneSize / dimension.total,
                position = Math.round(-scrollMovable[axis] * sizeRatio),
                size = Math.round(paneSize * sizeRatio);

            if (position + size > paneSize) {
                size = paneSize - position;
            } else if (position < 0) {
                size += position;
                position = 0;
            }

            if (that.elementSize != size) {
                that.element.css(that.size, size + "px");
                that.elementSize = size;
            }

            that.movable.moveAxis(axis, position);
        },

        show: function () {
            this.element.css({ opacity: SCROLLBAR_OPACITY, visibility: "visible" });
        },

        hide: function () {
            this.element.css({ opacity: 0 });
        }
    });


    var Scroller = Widget.extend(/** @lends kendo.mobile.ui.Scroller.prototype */{

        init: function (element, options) {
            var that = this;
            Widget.fn.init.call(that, element, options);

            element = that.element;

            element
                .css("overflow", "hidden")
                .addClass("km-scroll-wrapper")
                .wrapInner('<div class="km-scroll-container"/>')
                .prepend('<div class="km-scroll-header"/>');

            var inner = element.children().eq(1),

                tap = new kendo.Tap(element),

                movable = new Movable(inner),

                dimensions = new PaneDimensions({
                    element: inner,
                    container: element,
                    change: function () {
                        that.trigger(RESIZE);
                    }
                }),

                drag = new kendo.Drag(element, {
                    allowSelection: true,
                    start: function (e) {
                        dimensions.refresh();

                        if (dimensions.present()) {
                            drag.capture();
                        } else {
                            drag.cancel();
                        }
                    }
                }),

                pane = new Pane({
                    movable: movable,
                    dimensions: dimensions,
                    drag: drag,
                    elastic: that.options.elastic
                });

            movable.bind(CHANGE, function () {
                that.scrollTop = -movable.y;
                that.scrollLeft = -movable.x;

                that.trigger(SCROLL, {
                    scrollTop: that.scrollTop,
                    scrollLeft: that.scrollLeft
                });
            });

            extend(that, {
                movable: movable,
                dimensions: dimensions,
                drag: drag,
                pane: pane,
                tap: tap,
                pulled: false,
                scrollElement: inner,
                fixedContainer: element.children().first()
            });

            that._initAxis("x");
            that._initAxis("y");

            dimensions.refresh();

            if (that.options.pullToRefresh) {
                that._initPullToRefresh();
            }

            kendo.onResize($.proxy(that.reset, that));
        },


        scrollHeight: function () {
            return this.scrollElement[0].scrollHeight;
        },

        scrollWidth: function () {
            return this.scrollElement[0].scrollWidth;
        },

        options: {
            name: "Scroller",
            pullOffset: 140,
            elastic: true,
            pullTemplate: "Pull to refresh",
            releaseTemplate: "Release to refresh",
            refreshTemplate: "Refreshing"
        },

        events: [

            PULL,

            SCROLL,

            RESIZE
        ],

        setOptions: function (options) {
            var that = this;
            Widget.fn.setOptions.call(that, options);
            if (options.pullToRefresh) {
                that._initPullToRefresh();
            }
        },


        reset: function () {
            this.movable.moveTo({ x: 0, y: 0 });
        },


        scrollTo: function (x, y) {
            this.movable.moveTo({ x: x, y: y });
        },


        pullHandled: function () {
            var that = this;
            that.refreshHint.removeClass(REFRESHCLASS);
            that.hintContainer.html(that.pullTemplate({}));
            that.yinertia.onEnd();
            that.xinertia.onEnd();
        },

        _initPullToRefresh: function () {
            var that = this;

            that.pullTemplate = kendo.template(that.options.pullTemplate);
            that.releaseTemplate = kendo.template(that.options.releaseTemplate);
            that.refreshTemplate = kendo.template(that.options.refreshTemplate);

            that.scrollElement.prepend('<span class="km-scroller-pull"><span class="km-icon"></span><span class="km-template">' + that.pullTemplate({}) + '</span></span>');
            that.refreshHint = that.scrollElement.children().first();
            that.hintContainer = that.refreshHint.children(".km-template");

            that.pane.y.bind("change", proxy(that._paneChange, that));
            that.drag.bind("end", proxy(that._dragEnd, that));
        },

        _dragEnd: function () {
            var that = this;

            if (!that.pulled) {
                return;
            }

            that.pulled = false;
            that.refreshHint.removeClass(RELEASECLASS).addClass(REFRESHCLASS);
            that.hintContainer.html(that.refreshTemplate({}));
            that.trigger("pull");
            that.yinertia.freeze(that.options.pullOffset / 2);
        },

        _paneChange: function () {
            var that = this;

            if (that.movable.y / OUT_OF_BOUNDS_FRICTION > that.options.pullOffset) {
                if (!that.pulled) {
                    that.pulled = true;
                    that.refreshHint.removeClass(REFRESHCLASS).addClass(RELEASECLASS);
                    that.hintContainer.html(that.releaseTemplate({}));
                }
            } else if (that.pulled) {
                that.pulled = false;
                that.refreshHint.removeClass(RELEASECLASS);
                that.hintContainer.html(that.pullTemplate({}));
            }
        },

        _initAxis: function (axis) {
            var that = this,
            movable = that.movable,
            dimension = that.dimensions[axis],
            tap = that.tap,

            scrollBar = new ScrollBar({
                axis: axis,
                movable: movable,
                dimension: dimension,
                container: that.element
            }),

            inertia = new DragInertia({
                axis: axis,
                movable: movable,
                tap: tap,
                drag: that.drag,
                dimension: dimension,
                elastic: that.options.elastic,
                end: function () { scrollBar.hide(); }
            });

            that[axis + "inertia"] = inertia;

            that.pane[axis].bind(CHANGE, function () {
                scrollBar.show();
            });
        }
    });

    ui.plugin(Scroller);
})(jQuery);
(function ($, undefined) {
    var kendo = window.kendo,
        Widget = kendo.ui.Widget,
        proxy = $.proxy,
        indicatorTmpl = kendo.template('<div class="k-group-indicator" data-#=data.ns#field="${data.field}" data-#=data.ns#title="${data.title || ""}" data-#=data.ns#dir="${data.dir || "asc"}">' +
                '<a href="\\#" class="k-link">' +
                    '<span class="k-icon k-si-arrow-${(data.dir || "asc") == "asc" ? "n" : "s"}">(sorted ${(data.dir || "asc") == "asc" ? "ascending": "descending"})</span>' +
                    '${data.title ? data.title: data.field}' +
                '</a>' +
                '<a class="k-button k-button-icon k-button-bare">' +
                    '<span class="k-icon k-group-delete"></span>' +
                '</a>' +
             '</div>', { useWithBlock: false }),
        hint = function (target) {
            return $('<div class="k-header k-drag-clue" />')
                .css({
                    width: target.width(),
                    paddingLeft: target.css("paddingLeft"),
                    paddingRight: target.css("paddingRight"),
                    lineHeight: target.height() + "px",
                    paddingTop: target.css("paddingTop"),
                    paddingBottom: target.css("paddingBottom")
                })
                .html(target.attr(kendo.attr("title")) || target.attr(kendo.attr("field")))
                .prepend('<span class="k-icon k-drag-status k-denied" />');
        },
        dropCue = $('<div class="k-grouping-dropclue"/>'),
        nameSpecialCharRegExp = /(\[|\]|\$|\.|\:|\+)/g;

    function dropCueOffsetTop(element) {
        return element.position().top + 3;
    }

    var Groupable = Widget.extend({
        init: function (element, options) {
            var that = this,
                groupContainer,
                group = kendo.guid(),
                intializePositions = proxy(that._intializePositions, that),
                draggable,
                dropCuePositions = that._dropCuePositions = [];

            Widget.fn.init.call(that, element, options);

            draggable = that.options.draggable || new kendo.ui.Draggable(that.element, {
                filter: that.options.filter,
                hint: hint,
                group: group
            });

            groupContainer = that.groupContainer = $(that.options.groupContainer, that.element)
                .kendoDropTarget({
                    group: draggable.options.group,
                    dragenter: function (e) {
                        if (that._canDrag(e.draggable.currentTarget)) {
                            e.draggable.hint.find(".k-drag-status").removeClass("k-denied").addClass("k-add");
                            dropCue.css({ top: dropCueOffsetTop(groupContainer), left: 0 }).appendTo(groupContainer);
                        }
                    },
                    dragleave: function (e) {
                        e.draggable.hint.find(".k-drag-status").removeClass("k-add").addClass("k-denied");
                        dropCue.remove();
                    },
                    drop: function (e) {
                        var targetElement = e.draggable.currentTarget,
                            field = targetElement.attr(kendo.attr("field")),
                            title = targetElement.attr(kendo.attr("title")),
                            sourceIndicator = that.indicator(field),
                            dropCuePositions = that._dropCuePositions,
                            lastCuePosition = dropCuePositions[dropCuePositions.length - 1],
                            position;

                        if (!targetElement.hasClass("k-group-indicator") && !that._canDrag(targetElement)) {
                            return;
                        }
                        if (lastCuePosition) {
                            position = that._dropCuePosition(dropCue.offset().left + parseInt(lastCuePosition.element.css("marginLeft"), 10) + parseInt(lastCuePosition.element.css("marginRight"), 10));
                            if (position && that._canDrop($(sourceIndicator), position.element, position.left)) {
                                if (position.before) {
                                    position.element.before(sourceIndicator || that.buildIndicator(field, title));
                                } else {
                                    position.element.after(sourceIndicator || that.buildIndicator(field, title));
                                }

                                that._change();
                            }
                        } else {
                            that.groupContainer.append(that.buildIndicator(field, title));
                            that._change();
                        }
                    }
                })
                .kendoDraggable({
                    filter: "div.k-group-indicator",
                    hint: hint,
                    group: draggable.options.group,
                    dragcancel: proxy(that._dragCancel, that),
                    dragstart: function (e) {
                        var element = e.currentTarget,
                            marginLeft = parseInt(element.css("marginLeft"), 10),
                            left = element.position().left - marginLeft;

                        intializePositions();
                        dropCue.css({ top: dropCueOffsetTop(groupContainer), left: left }).appendTo(groupContainer);
                        this.hint.find(".k-drag-status").removeClass("k-denied").addClass("k-add");
                    },
                    dragend: function () {
                        that._dragEnd(this);
                    },
                    drag: proxy(that._drag, that)
                })
                .delegate(".k-button", "click", function (e) {
                    e.preventDefault();
                    that._removeIndicator($(this).parent());
                })
                .delegate(".k-link", "click", function (e) {
                    var current = $(this).parent(),
                        newIndicator = that.buildIndicator(current.attr(kendo.attr("field")), current.attr(kendo.attr("title")), current.attr(kendo.attr("dir")) == "asc" ? "desc" : "asc");

                    current.before(newIndicator).remove();
                    that._change();
                    e.preventDefault();
                });

            draggable.bind(["dragend", "dragcancel", "dragstart", "drag"],
            {
                dragend: function () {
                    that._dragEnd(this);
                },
                dragcancel: proxy(that._dragCancel, that),
                dragstart: function (e) {
                    var element, marginRight, left;

                    if (!that.options.allowDrag && !that._canDrag(e.currentTarget)) {
                        e.preventDefault();
                        return;
                    }

                    intializePositions();
                    if (dropCuePositions.length) {
                        element = dropCuePositions[dropCuePositions.length - 1].element;
                        marginRight = parseInt(element.css("marginRight"), 10);
                        left = element.position().left + element.outerWidth() + marginRight;
                    } else {
                        left = 0;
                    }
                },
                drag: proxy(that._drag, that)
            });

            that.dataSource = that.options.dataSource;

            if (that.dataSource) {
                that._refreshHandler = proxy(that.refresh, that);
                that.dataSource.bind("change", that._refreshHandler);
            }
        },

        refresh: function () {
            var that = this,
                dataSource = that.dataSource;

            that.groupContainer.empty().append(
                $.map(dataSource.group() || [], function (item) {
                    var fieldName = item.field.replace(nameSpecialCharRegExp, "\\$1");
                    var element = that.element.find(that.options.filter).filter("[" + kendo.attr("field") + "=" + fieldName + "]");
                    return that.buildIndicator(item.field, element.attr(kendo.attr("title")), item.dir);
                }).join("")
            );
            that._invalidateGroupContainer();
        },

        destroy: function () {
            var that = this;
            if (that.dataSource && that._refreshHandler) {
                that.dataSource.unbind("change", that._refreshHandler);
            }
        },

        options: {
            name: "Groupable",
            filter: "th",
            messages: {
                empty: "Drag a column header and drop it here to group by that column"
            }
        },

        indicator: function (field) {
            var indicators = $(".k-group-indicator", this.groupContainer);
            return $.grep(indicators, function (item) {
                return $(item).attr(kendo.attr("field")) === field;
            })[0];
        },
        buildIndicator: function (field, title, dir) {
            return indicatorTmpl({ field: field, dir: dir, title: title, ns: kendo.ns });
        },
        descriptors: function () {
            var that = this,
                indicators = $(".k-group-indicator", that.groupContainer),
                aggregates,
                names,
                field,
                idx,
                length;

            aggregates = that.element.find(that.options.filter).map(function () {
                var cell = $(this),
                    aggregate = cell.attr(kendo.attr("aggregates")),
                    member = cell.attr(kendo.attr("field"));

                if (aggregate && aggregate !== "") {
                    names = aggregate.split(",");
                    aggregate = [];
                    for (idx = 0, length = names.length; idx < length; idx++) {
                        aggregate.push({ field: member, aggregate: names[idx] });
                    }
                }
                return aggregate;
            }).toArray();

            return $.map(indicators, function (item) {
                item = $(item);
                field = item.attr(kendo.attr("field"));

                return {
                    field: field,
                    dir: item.attr(kendo.attr("dir")),
                    aggregates: aggregates || []
                };
            });
        },
        _removeIndicator: function (indicator) {
            var that = this;
            indicator.remove();
            that._invalidateGroupContainer();
            that._change();
        },
        _change: function () {
            var that = this;
            if (that.dataSource) {
                that.dataSource.group(that.descriptors());
            }
        },
        _dropCuePosition: function (position) {
            var dropCuePositions = this._dropCuePositions;
            if (!dropCue.is(":visible") || dropCuePositions.length === 0) {
                return;
            }

            position = Math.ceil(position);

            var lastCuePosition = dropCuePositions[dropCuePositions.length - 1],
                right = lastCuePosition.right,
                marginLeft = parseInt(lastCuePosition.element.css("marginLeft"), 10),
                marginRight = parseInt(lastCuePosition.element.css("marginRight"), 10);

            if (position >= right) {
                position = {
                    left: lastCuePosition.element.position().left + lastCuePosition.element.outerWidth() + marginRight,
                    element: lastCuePosition.element,
                    before: false
                };
            } else {
                position = $.grep(dropCuePositions, function (item) {
                    return item.left <= position && position <= item.right;
                })[0];

                if (position) {
                    position = {
                        left: position.element.position().left - marginLeft,
                        element: position.element,
                        before: true
                    };
                }
            }

            return position;
        },
        _drag: function (event) {
            var location = kendo.touchLocation(event),
                position = this._dropCuePosition(location.x);
            if (position) {
                dropCue.css({ left: position.left });
            }
        },
        _canDrag: function (element) {
            return element.attr(kendo.attr("groupable")) != "false" && (element.hasClass("k-group-indicator") || !this.indicator(element.attr(kendo.attr("field"))));
        },
        _canDrop: function (source, target, position) {
            var next = source.next();
            return source[0] !== target[0] && (!next[0] || target[0] !== next[0] || position > next.position().left);
        },
        _dragEnd: function (draggable) {
            var that = this,
                field = draggable.currentTarget.attr(kendo.attr("field")),
                sourceIndicator = that.indicator(field);

            if (draggable !== that.options.draggable && !draggable.dropped && sourceIndicator) {
                that._removeIndicator($(sourceIndicator));
            }

            that._dragCancel();
        },
        _dragCancel: function () {
            dropCue.remove();
            this._dropCuePositions = [];
        },
        _intializePositions: function () {
            var that = this,
                indicators = $(".k-group-indicator", that.groupContainer),
                left;
            that._dropCuePositions = $.map(indicators, function (item) {
                item = $(item);
                left = item.offset().left;
                return {
                    left: parseInt(left, 10),
                    right: parseInt(left + item.outerWidth(), 10),
                    element: item
                };
            });
        },
        _invalidateGroupContainer: function () {
            var groupContainer = this.groupContainer;
            if (groupContainer.is(":empty")) {
                groupContainer.html(this.options.messages.empty);
            }
        }
    });

    kendo.ui.plugin(Groupable);

})(jQuery);
(function ($, undefined) {
    var kendo = window.kendo,
        Widget = kendo.ui.Widget,
        CHANGE = "change",
        KREORDERABLE = "k-reorderable";

    function toggleHintClass(hint, denied) {
        hint = $(hint);

        if (denied) {
            hint.find(".k-drag-status").removeClass("k-add").addClass("k-denied");
        } else {
            hint.find(".k-drag-status").removeClass("k-denied").addClass("k-add");
        }
    }

    var Reorderable = Widget.extend({
        init: function (element, options) {
            var that = this,
                draggable,
                group = kendo.guid() + "-reorderable";

            Widget.fn.init.call(that, element, options);

            element = that.element.addClass(KREORDERABLE);
            options = that.options;
            draggable = options.draggable || new kendo.ui.Draggable(element, {
                group: group,
                filter: options.filter,
                hint: options.hint
            });

            that.reorderDropCue = $('<div class="k-reorder-cue"><div class="k-icon k-i-arrow-s"></div><div class="k-icon k-i-arrow-n"></div></div>');

            element.find(draggable.options.filter).kendoDropTarget({
                group: draggable.options.group,
                dragenter: function (e) {
                    if (!that._draggable) {
                        return;
                    }

                    var dropTarget = this.element,
                        same = dropTarget[0] === that._draggable[0];

                    toggleHintClass(e.draggable.hint, same);
                    if (!same) {
                        that.reorderDropCue.css({
                            height: dropTarget.outerHeight(),
                            top: element.offset().top,
                            left: dropTarget.offset().left + (dropTarget.index() > that._draggable.index() ? dropTarget.outerWidth() : 0)
                        })
                        .appendTo(document.body);
                    }
                },
                dragleave: function (e) {
                    toggleHintClass(e.draggable.hint, true);
                    that.reorderDropCue.remove();
                },
                drop: function () {
                    if (!that._draggable) {
                        return;
                    }

                    var draggableElement = that._draggable[0],
                        dropTarget = this.element[0],
                        container;

                    if (draggableElement !== dropTarget) {
                        container = element.find(draggable.options.filter);
                        that.trigger(CHANGE, {
                            element: that._draggable,
                            oldIndex: container.index(draggableElement),
                            newIndex: container.index(dropTarget)
                        });
                    }
                }
            });

            draggable.bind(["dragcancel", "dragend", "dragstart"],
                {
                    dragcancel: function () {
                        that.reorderDropCue.remove();
                        that._draggable = null;
                    },
                    dragend: function () {
                        that.reorderDropCue.remove();
                        that._draggable = null;
                    },
                    dragstart: function (e) {
                        that._draggable = e.currentTarget;
                    }
                }
            );
        },

        options: {
            name: "Reorderable",
            filter: "*"
        },

        events: [
            CHANGE
        ]

    });

    kendo.ui.plugin(Reorderable);

})(jQuery);
(function ($, undefined) {
    var kendo = window.kendo,
        ui = kendo.ui,
        Widget = ui.Widget,
        proxy = $.proxy,
        isFunction = $.isFunction,
        extend = $.extend,
        HORIZONTAL = "horizontal",
        VERTICAL = "vertical",
        START = "start",
        RESIZE = "resize",
        RESIZEEND = "resizeend";

    var Resizable = Widget.extend({
        init: function (element, options) {
            var that = this;

            Widget.fn.init.call(that, element, options);

            that.orientation = that.options.orientation.toLowerCase() != VERTICAL ? HORIZONTAL : VERTICAL;
            that._positionMouse = that.orientation == HORIZONTAL ? "x" : "y";
            that._position = that.orientation == HORIZONTAL ? "left" : "top";
            that._sizingDom = that.orientation == HORIZONTAL ? "outerWidth" : "outerHeight";

            new ui.Draggable(element, {
                distance: 0,
                filter: options.handle,
                drag: proxy(that._resize, that),
                dragstart: proxy(that._start, that),
                dragend: proxy(that._stop, that)
            });
        },

        events: [
            RESIZE,
            RESIZEEND,
            START
        ],

        options: {
            name: "Resizable",
            orientation: HORIZONTAL
        },
        _max: function (e) {
            var that = this,
                hintSize = that.hint ? that.hint[that._sizingDom]() : 0,
                size = that.options.max;

            return isFunction(size) ? size(e) : size !== undefined ? (that._initialElementPosition + size) - hintSize : size;
        },
        _min: function (e) {
            var that = this,
                size = that.options.min;

            return isFunction(size) ? size(e) : size !== undefined ? that._initialElementPosition + size : size;
        },
        _start: function (e) {
            var that = this,
                hint = that.options.hint,
                el = $(e.currentTarget);

            that._initialMousePosition = e[that._positionMouse].location;
            that._initialElementPosition = el.position()[that._position];

            if (hint) {
                that.hint = isFunction(hint) ? $(hint(el)) : hint;

                that.hint.css({
                    position: "absolute"
                })
                .css(that._position, that._initialElementPosition)
                .appendTo(that.element);
            }

            that.trigger(START, e);

            that._maxPosition = that._max(e);
            that._minPosition = that._min(e);

            $(document.body).css("cursor", el.css("cursor"));
        },
        _resize: function (e) {
            var that = this,
                handle = $(e.currentTarget),
                maxPosition = that._maxPosition,
                minPosition = that._minPosition,
                currentPosition = that._initialElementPosition + (e[that._positionMouse].location - that._initialMousePosition),
                position;

            position = minPosition !== undefined ? Math.max(minPosition, currentPosition) : currentPosition;
            that.position = position = maxPosition !== undefined ? Math.min(maxPosition, position) : position;

            if (that.hint) {
                that.hint.toggleClass(that.options.invalidClass || "", position == maxPosition || position == minPosition)
                         .css(that._position, position);
            }

            that.trigger(RESIZE, extend(e, { position: position }));
        },
        _stop: function (e) {
            var that = this;

            if (that.hint) {
                that.hint.remove();
            }

            that.trigger(RESIZEEND, extend(e, { position: that.position }));
            $(document.body).css("cursor", "");
        }
    });

    kendo.ui.plugin(Resizable);

})(jQuery);
(function ($, undefined) {
    var kendo = window.kendo,
        proxy = $.proxy,
        DIR = "data-dir",
        ASC = "asc",
        SINGLE = "single",
        FIELD = "data-field",
        DESC = "desc",
        TLINK = ".k-link",
        Widget = kendo.ui.Widget;

    var Sortable = Widget.extend({
        init: function (element, options) {
            var that = this, link;

            Widget.fn.init.call(that, element, options);

            that.dataSource = that.options.dataSource.bind("change", proxy(that.refresh, that));
            link = that.element.find(TLINK);

            if (!link[0]) {
                link = that.element.wrapInner('<a class="k-link" href="#"/>').find(TLINK);
            }

            that.link = link;
            that.element.click(proxy(that._click, that));
        },

        options: {
            name: "Sortable",
            mode: SINGLE,
            allowUnsort: true
        },

        refresh: function () {
            var that = this,
                sort = that.dataSource.sort() || [],
                idx,
                length,
                descriptor,
                dir,
                element = that.element,
                field = element.attr(FIELD);

            element.removeAttr(DIR);

            for (idx = 0, length = sort.length; idx < length; idx++) {
                descriptor = sort[idx];

                if (field == descriptor.field) {
                    element.attr(DIR, descriptor.dir);
                }
            }

            dir = element.attr(DIR);

            element.find(".k-i-arrow-n,.k-i-arrow-s").remove();

            if (dir === ASC) {
                $('<span class="k-icon k-i-arrow-n" />').appendTo(that.link);
            } else if (dir === DESC) {
                $('<span class="k-icon k-i-arrow-s" />').appendTo(that.link);
            }
        },

        _click: function (e) {
            var that = this,
                element = that.element,
                field = element.attr(FIELD),
                dir = element.attr(DIR),
                options = that.options,
                sort = that.dataSource.sort() || [],
                idx,
                length;

            if (dir === ASC) {
                dir = DESC;
            } else if (dir === DESC && options.allowUnsort) {
                dir = undefined;
            } else {
                dir = ASC;
            }

            if (options.mode === SINGLE) {
                sort = [{ field: field, dir: dir }];
            } else if (options.mode === "multiple") {
                for (idx = 0, length = sort.length; idx < length; idx++) {
                    if (sort[idx].field === field) {
                        sort.splice(idx, 1);
                        break;
                    }
                }
                sort.push({ field: field, dir: dir });
            }

            e.preventDefault();

            that.dataSource.sort(sort);
        }
    });

    kendo.ui.plugin(Sortable);
})(jQuery);
(function ($, undefined) {
    var kendo = window.kendo,
        touch = kendo.support.touch,
        Widget = kendo.ui.Widget,
        proxy = $.proxy,
        MOUSEUP = touch ? "touchend" : "mouseup",
        MOUSEDOWN = touch ? "touchstart" : "mousedown",
        MOUSEMOVE = touch ? "touchmove" : "mousemove",
        SELECTED = "k-state-selected",
        ACTIVE = "k-state-selecting",
        SELECTABLE = "k-selectable",
        SELECTSTART = "selectstart",
        DOCUMENT = $(document),
        CHANGE = "change",
        UNSELECTING = "k-state-unselecting";

    var Selectable = Widget.extend({
        init: function (element, options) {
            var that = this;

            Widget.fn.init.call(that, element, options);

            that._marquee = $("<div class='k-marquee'></div>");
            that._lastActive = null;

            that._moveDelegate = proxy(that._move, that);
            that._upDelegate = proxy(that._up, that);

            that.element.addClass(SELECTABLE);
            that.element.delegate("." + SELECTABLE + " " + that.options.filter, MOUSEDOWN, proxy(that._down, that));
        },

        events: [CHANGE],

        options: {
            name: "Selectable",
            filter: ">*",
            multiple: false
        },
        _collide: function (element, marqueePos) {
            var pos = element.offset(),
                selectee = {
                    left: pos.left,
                    top: pos.top,
                    right: pos.left + element.outerWidth(),
                    bottom: pos.top + element.outerHeight()
                };

            return (!(selectee.left > marqueePos.right ||
                selectee.right < marqueePos.left ||
                selectee.top > marqueePos.bottom ||
                selectee.bottom < marqueePos.top));
        },
        _position: function (event) {
            var pos = this._originalPosition,
                left = pos.x,
                top = pos.y,
                right = event.pageX,
                bottom = event.pageY,
                tmp;

            if (left > right) {
                tmp = right;
                right = left;
                left = tmp;
            }

            if (top > bottom) {
                tmp = bottom;
                bottom = top;
                top = tmp;
            }

            return {
                top: top,
                right: right,
                left: left,
                bottom: bottom
            };
        },
        _down: function (event) {
            var that = this,
                selected,
                ctrlKey = event.ctrlKey,
                shiftKey = event.shiftKey,
                single = !that.options.multiple;

            that._downTarget = $(event.currentTarget);
            that._shiftPressed = shiftKey;

            if (that._downTarget.closest("." + SELECTABLE)[0] !== that.element[0]) {
                return;
            }

            DOCUMENT
                .unbind(MOUSEUP, that._upDelegate) // more cancel friendly
                .bind(MOUSEUP, that._upDelegate);

            that._originalPosition = {
                x: event.pageX,
                y: event.pageY
            };

            if (!single && $(event.target).is(":not(:input, a)")) {
                DOCUMENT
                    .unbind(MOUSEMOVE, that._moveDelegate)
                    .bind(MOUSEMOVE, that._moveDelegate)
                    .unbind(SELECTSTART, false)
                    .bind(SELECTSTART, false);

                if (!kendo.support.touch) {
                    event.preventDefault();
                }
            }

            if (!single) {
                $("body").append(that._marquee);
                that._marquee.css({
                    left: event.clientX + 1,
                    top: event.clientY + 1,
                    width: 0,
                    height: 0
                });
            }

            selected = that._downTarget.hasClass(SELECTED);
            if (single || !(ctrlKey || shiftKey)) {
                that.element
                .find(that.options.filter + "." + SELECTED)
                .not(that._downTarget)
                .removeClass(SELECTED);
            }
            if (ctrlKey) {
                that._lastActive = that._downTarget;
            }

            if (selected && (ctrlKey || shiftKey)) {
                that._downTarget.addClass(SELECTED);
                if (!shiftKey) {
                    that._downTarget.addClass(UNSELECTING);
                }
            }
            else {
                if (!(kendo.support.touch && single)) {
                    that._downTarget.addClass(ACTIVE);

                    if (single && that._downTarget.hasClass(SELECTED)) {
                        that._downTarget.removeClass(ACTIVE);
                    }
                }
            }
        },
        _move: function (event) {
            var that = this,
                pos = that._position(event),
                ctrlKey = event.ctrlKey,
                selectee, collide;

            that._marquee.css({
                left: pos.left,
                top: pos.top,
                width: pos.right - pos.left,
                height: pos.bottom - pos.top
            });

            that.element.find(that.options.filter).each(function () {
                selectee = $(this);
                collide = that._collide(selectee, pos);

                if (collide) {
                    if (selectee.hasClass(SELECTED)) {
                        if (that._downTarget[0] !== selectee[0] && ctrlKey) {
                            selectee
                                .removeClass(SELECTED)
                                .addClass(UNSELECTING);
                        }
                    } else if (!selectee.hasClass(ACTIVE) && !selectee.hasClass(UNSELECTING)) {
                        selectee.addClass(ACTIVE);
                    }
                }
                else {
                    if (selectee.hasClass(ACTIVE)) {
                        selectee.removeClass(ACTIVE);
                    }
                    else if (ctrlKey && selectee.hasClass(UNSELECTING)) {
                        selectee
                            .removeClass(UNSELECTING)
                            .addClass(SELECTED);
                    }
                }
            });
        },
        _up: function (event) {
            var that = this,
                options = that.options,
                single = !options.multiple;

            DOCUMENT
                .unbind(SELECTSTART, false)
                .unbind(MOUSEMOVE, that._moveDelegate)
                .unbind(MOUSEUP, that._upDelegate);

            if (!single) {
                that._marquee.remove();
            }

            if (kendo.support.touch && single) {
                that._downTarget.addClass(ACTIVE);
            }

            if (!single && that._shiftPressed === true) {
                that.selectRange(that._firstSelectee(), that._downTarget);
            }
            else {
                that.element
                    .find(options.filter + "." + UNSELECTING)
                    .removeClass(UNSELECTING)
                    .removeClass(SELECTED);

                that.value(that.element.find(options.filter + "." + ACTIVE));
            }
            if (!that._shiftPressed) {
                that._lastActive = that._downTarget;
            }
            that._downTarget = null;
            that._shiftPressed = false;
        },
        value: function (val) {
            var that = this,
                selectElement = proxy(that._selectElement, that);

            if (val) {
                val.each(function () {
                    selectElement(this);
                });

                that.trigger(CHANGE, {});
                return;
            }

            return that.element
                    .find(that.options.filter + "." + SELECTED);
        },
        _firstSelectee: function () {
            var that = this, selected;
            if (that._lastActive !== null) {
                return that._lastActive;
            }

            selected = that.value();
            return selected.length > 0 ?
                    selected[0] :
                    that.element.find(that.options.filter);
        },
        _selectElement: function (el) {
            var selecee = $(el),
                isPrevented = this.trigger("select", { element: el });

            selecee.removeClass(ACTIVE);
            if (!isPrevented) {
                selecee.addClass(SELECTED);
            }
        },
        clear: function () {
            var that = this;
            that.element
                .find(that.options.filter + "." + SELECTED)
                .removeClass(SELECTED);
        },
        selectRange: function (start, end) {
            var that = this,
                found = false,
                selectElement = proxy(that._selectElement, that),
                selectee;
            start = $(start)[0];
            end = $(end)[0];
            that.element.find(that.options.filter).each(function () {
                selectee = $(this);
                if (found) {
                    selectElement(this);
                    found = this !== end;
                }
                else if (this === start) {
                    found = start !== end;
                    selectElement(this);
                }
                else if (this === end) {
                    var tmp = start;
                    start = end;
                    end = tmp;
                    found = true;
                    selectElement(this);
                }
                else {
                    selectee.removeClass(SELECTED);
                }
            });
            that.trigger(CHANGE, {});
        }
    });

    kendo.ui.plugin(Selectable);

})(jQuery);
(function ($, undefined) {
    var kendo = window.kendo,
        ui = kendo.ui,
        Widget = ui.Widget,
        proxy = $.proxy,
        FIRST = ".k-i-seek-w",
        LAST = ".k-i-seek-e",
        PREV = ".k-i-arrow-w",
        NEXT = ".k-i-arrow-e",
        CHANGE = "change",
        CLICK = "click",
        KEYDOWN = "keydown",
        DISABLED = "disabled",
        iconTemplate = kendo.template('<a href="\\#" title="#=text#" class="k-link"><span class="k-icon #= className #">#=text#</span></a>');

    function button(template, idx, text, numeric) {
        return template({
            idx: idx,
            text: text,
            ns: kendo.ns,
            numeric: numeric
        });
    }

    function icon(className, text) {
        return iconTemplate({
            className: className.substring(1),
            text: text
        });
    }

    function update(element, selector, page, disabled) {
        element.find(selector)
               .parent()
               .attr(kendo.attr("page"), page)
               .toggleClass("k-state-disabled", disabled);
    }

    function first(element, page, totalPages) {
        update(element, FIRST, 1, page <= 1);
    }

    function prev(element, page, totalPages) {
        update(element, PREV, Math.max(1, page - 1), page <= 1);
    }

    function next(element, page, totalPages) {
        update(element, NEXT, Math.min(totalPages, page + 1), page >= totalPages);
    }

    function last(element, page, totalPages) {
        update(element, LAST, totalPages, page >= totalPages);
    }

    var Pager = Widget.extend({
        init: function (element, options, filterable) {

            var that = this, page, totalPages;

            Widget.fn.init.call(that, element, options);

            options = that.options;
            that.dataSource = options.dataSource;
            that.linkTemplate = kendo.template(that.options.linkTemplate);
            that.selectTemplate = kendo.template(that.options.selectTemplate);

            page = that.page();
            totalPages = that.totalPages();

            that._refreshHandler = proxy(that.refresh, that);

            that.dataSource.bind(CHANGE, that._refreshHandler);

            if (options.previousNext) {
                if (!that.element.find(FIRST).length) {
                    that.element.append(icon(FIRST, options.messages.first));

                    first(that.element, page, totalPages);
                }

                if (!that.element.find(PREV).length) {
                    that.element.append(icon(PREV, options.messages.previous));

                    prev(that.element, page, totalPages);
                }
            }

            if (options.numeric) {
                that.list = that.element.find(".k-pager-numbers");

                if (!that.list.length) {
                    that.list = $('<ul class="k-pager-numbers k-reset" />').appendTo(that.element);
                }
            }

            if (options.input) {
                if (!that.element.find(".k-pager-input").length) {
                    that.element.append('<span class="k-pager-input k-label">' +
                        options.messages.page +
                        '<input class="k-textbox">' +
                        kendo.format(options.messages.of, totalPages) +
                        '</span>');
                }

                that._keydownHandler = proxy(that._keydown, that);
                that.element.on(KEYDOWN, ".k-pager-input input", that._keydownHandler);
            }

            if (options.previousNext) {
                if (!that.element.find(NEXT).length) {
                    that.element.append(icon(NEXT, options.messages.next));

                    next(that.element, page, totalPages);
                }

                if (!that.element.find(LAST).length) {
                    that.element.append(icon(LAST, options.messages.last));

                    last(that.element, page, totalPages);
                }
            }

            if (options.pageSizes) {
                if (!that.element.find(".k-pager-sizes").length) {
                    $('<span class="k-pager-sizes k-label"><select/>' + options.messages.itemsPerPage + "</span>")
                       .appendTo(that.element)
                       .find("select")
                       .html($.map($.isArray(options.pageSizes) ? options.pageSizes : [5, 10, 15, 20], function (page) {
                           return "<option>" + page + "</option>";
                       }).join(""))
                       .end()
                       .appendTo(that.element);
                }

                that.element.find(".k-pager-sizes select").val(that.pageSize());

                if (kendo.ui.DropDownList) {
                    that.element.find(".k-pager-sizes select").kendoDropDownList();
                }

                that._changeHandler = proxy(that._change, that);

                that.element.on(CHANGE, ".k-pager-sizes select", that._changeHandler);
            }

            if (options.refresh) {
                if (!that.element.find(".k-pager-refresh").length) {
                    //Clear Filter Added by Amit Yadav
                    if (filterable) {
                        that.element.append('<a href="#" rel="clearfilter" style="display:none;" class="k-icon k-i-funnel-clear"  title="Clear Filters">&nbsp;&nbsp;&nbsp;</a>');
                        $("a.k-i-funnel-clear").click(function () { $("form.k-filter-menu button[type=reset]").trigger("click"); });
                    }
                    that.element.append('<span style="padding-left:20px;"><a href="#" class=" k-icon k-i-refresh"  title="' + options.messages.refresh + '"></a><span>');
                    that.element.append('<a href="#" class="k-pager-refresh k-link"  title="' + options.messages.refresh +
                      '"><span class="k-icon k-i-refresh">' + options.messages.refresh + "</span></a>");
                }
                that._reloadHandler = proxy(that._refreshClick, that);
                that.element.on(CLICK, ".k-i-refresh,.k-pager-refresh", that._reloadHandler);
            }

            if (options.info) {
                if (!that.element.find(".k-pager-info").length) {
                    that.element.append('<span class="k-pager-info k-label" />');
                }
            }

            that._clickHandler = proxy(that._click, that);

            that.element.on(CLICK, "a", that._clickHandler);

            if (options.autoBind) {
                that.refresh();
            }
        },

        destroy: function () {
            var that = this;

            that.element.off(CLICK, "a", that._clickHandler);

            that.element.off(KEYDOWN, ".k-pager-input input", that._keydownHandler);

            that.element.off(CHANGE, ".k-pager-sizes select", that._changeHandler);

            that.element.off(CLICK, ".k-pager-refresh", that._reloadHandler);

            that.dataSource.unbind(CHANGE, that._refreshHandler);
        },

        events: [
            CHANGE
        ],

        options: {
            name: "Pager",
            selectTemplate: '<li><span class="k-state-selected">#=text#</span></li>',
            linkTemplate: '<li><a href="\\#" class="k-link" data-#=ns#page="#=idx#">#=text#</a></li>',
            buttonCount: 10,
            autoBind: true,
            numeric: false,
            info: true,
            input: true,
            previousNext: true,
            pageSizes: true,
            refresh: true,
            messages: {
                display: "{0} - {1} of {2} Records ",
                empty: "No Records Found.",
                page: "Page",
                of: "of {0}",
                itemsPerPage: "Records per page",
                first: "First page",
                previous: "Previous page",
                next: "Next page",
                last: "Last page",
                refresh: "Refresh Grid"
            }
        },

        refresh: function () {
            var that = this,
                idx,
                end,
                start = 1,
                html = "",
                reminder,
                page = that.page(),
                options = that.options,
                pageSize = that.pageSize(),
                total = that.dataSource.total(),
                totalPages = that.totalPages(),
                linkTemplate = that.linkTemplate,
                buttonCount = options.buttonCount;

            if (options.numeric) {
                if (page > buttonCount) {
                    reminder = (page % buttonCount);

                    start = (reminder === 0) ? (page - buttonCount) + 1 : (page - reminder) + 1;
                }

                end = Math.min((start + buttonCount) - 1, totalPages);

                if (start > 1) {
                    html += button(linkTemplate, start - 1, "...", false);
                }

                for (idx = start; idx <= end; idx++) {
                    html += button(idx == page ? that.selectTemplate : linkTemplate, idx, idx, true);
                }

                if (end < totalPages) {
                    html += button(linkTemplate, idx, "...", false);
                }

                if (html === "") {
                    html = that.selectTemplate({ text: 0 });
                }

                that.list.html(html);
            }

            if (options.info) {
                if (total > 0) {
                    html = kendo.format(options.messages.display,
                        (page - 1) * pageSize + 1, // first item in the page
                        Math.min(page * pageSize, total), // last item in the page
                    total);
                } else {
                    html = options.messages.empty;
                }

                that.element.find(".k-pager-info").html(html);
            }

            if (options.input) {
                that.element
                    .find(".k-pager-input")
                    .html(that.options.messages.page +
                        '<input class="k-textbox">' +
                        kendo.format(options.messages.of, totalPages))
                    .find("input")
                    .val(page)
                    .attr(DISABLED, total < 1)
                    .toggleClass("k-state-disabled", total < 1);
            }

            if (options.previousNext) {
                first(that.element, page, totalPages);

                prev(that.element, page, totalPages);

                next(that.element, page, totalPages);

                last(that.element, page, totalPages);
            }

            if (options.pageSizes) {
                that.element.find(".k-pager-sizes select").val(pageSize);
            }
        },

        _keydown: function (e) {
            if (e.keyCode === kendo.keys.ENTER || e.keyCode === kendo.keys.TAB) {
                var input = this.element.find(".k-pager-input").find("input"),
                    page = parseInt(input.val(), 10);

                if (isNaN(page) || page < 1 || page > this.totalPages()) {
                    page = this.page();
                }

                input.val(page);

                this.page(page);
                //Amit
                e.preventDefault();
            }
        },

        _refreshClick: function (e) {
            e.preventDefault();

            this.dataSource.read();
        },

        _change: function (e) {
            var pageSize = parseInt(e.currentTarget.value, 10);

            if (!isNaN(pageSize)) {
                this.dataSource.pageSize(pageSize);
            }
        },

        _click: function (e) {
            var target = $(e.currentTarget);

            e.preventDefault();

            if (!target.is(".k-state-disabled")) {
                this.page(target.attr(kendo.attr("page")));
            }
        },

        totalPages: function () {
            return Math.ceil((this.dataSource.total() || 0) / this.pageSize());
        },

        pageSize: function () {
            return this.dataSource.pageSize() || this.dataSource.total();
        },

        page: function (page) {
            if (page !== undefined) {
                this.dataSource.page(page);

                this.trigger(CHANGE, { index: page });
            } else {
                if (this.dataSource.total() > 0) {
                    return this.dataSource.page();
                } else {
                    return 0;
                }
            }
        }
    });

    ui.plugin(Pager);
})(jQuery);
(function ($, undefined) {
    var kendo = window.kendo,
        ui = kendo.ui,
        Widget = ui.Widget,
        support = kendo.support,
        touch = support.touch,
        getOffset = kendo.getOffset,
        appendingToBodyTriggersResize = $.browser.msie && $.browser.version < 9,
        OPEN = "open",
        CLOSE = "close",
        DEACTIVATE = "deactivate",
        ACTIVATE = "activate",
        CENTER = "center",
        LEFT = "left",
        RIGHT = "right",
        TOP = "top",
        BOTTOM = "bottom",
        ABSOLUTE = "absolute",
        HIDDEN = "hidden",
        BODY = "body",
        LOCATION = "location",
        POSITION = "position",
        VISIBLE = "visible",
        FITTED = "fitted",
        EFFECTS = "effects",
        ACTIVE = "k-state-active",
        ACTIVEBORDER = "k-state-border",
        ACTIVECHILDREN = ".k-picker-wrap, .k-dropdown-wrap, .k-link",
        MOUSEDOWN = touch ? "touchstart" : "mousedown",
        DOCUMENT = $(document),
        WINDOW = $(window),
        DOCUMENT_ELEMENT = $(document.documentElement),
        RESIZE_SCROLL = "resize scroll",
        cssPrefix = support.transitions.css,
        TRANSFORM = cssPrefix + "transform",
        extend = $.extend,
        styles = ["font-family",
                   "font-size",
                   "font-stretch",
                   "font-style",
                   "font-weight",
                   "line-height"];

    function contains(container, target) {
        return container === target || $.contains(container, target);
    }

    var Popup = Widget.extend({
        init: function (element, options) {
            var that = this, parentPopup;

            Widget.fn.init.call(that, element, options);

            element = that.element;
            options = that.options;

            that.collisions = options.collision ? options.collision.split(" ") : [];

            if (that.collisions.length === 1) {
                that.collisions.push(that.collisions[0]);
            }

            parentPopup = $(that.options.anchor).closest(".k-popup,.k-group"); // When popup is in another popup, make it relative.
            options.appendTo = $($(options.appendTo)[0] || parentPopup[0] || BODY);

            that.element.hide()
                .addClass("k-popup k-group k-reset")
                .css({ position: ABSOLUTE })
                .appendTo(options.appendTo)
                .bind("mouseenter mouseleave", function (e) {
                    that._hovered = e.type === "mouseenter";
                });

            that.wrapper = $();

            if (options.animation === false) {
                options.animation = { open: { show: true, effects: {} }, close: { hide: true, effects: {} } };
            }

            extend(options.animation.open, {
                complete: function () {
                    that.wrapper.css({ overflow: VISIBLE }); // Forcing refresh causes flickering in mobile.
                    that.trigger(ACTIVATE);
                }
            });

            extend(options.animation.close, {
                complete: function () {
                    that.wrapper.hide();

                    var location = that.wrapper.data(LOCATION),
                        anchor = $(options.anchor),
                        direction, dirClass;

                    if (location) {
                        that.wrapper.css(location);
                    }

                    if (options.anchor != BODY) {
                        direction = anchor.hasClass(ACTIVEBORDER + "-down") ? "down" : "up";
                        dirClass = ACTIVEBORDER + "-" + direction;

                        anchor
                            .removeClass(dirClass)
                            .children(ACTIVECHILDREN)
                            .removeClass(ACTIVE)
                            .removeClass(dirClass);

                        element.removeClass(ACTIVEBORDER + "-" + kendo.directions[direction].reverse);
                    }

                    that._closing = false;
                    that.trigger(DEACTIVATE);
                }
            });

            that._mousedownProxy = function (e) {
                that._mousedown(e);
            };

            that._currentWidth = DOCUMENT.width();

            that._resizeProxy = function (e) {
                that._resize(e);
            };

            if (options.toggleTarget) {
                $(options.toggleTarget).bind(options.toggleEvent, $.proxy(that.toggle, that));
            }
        },

        events: [
            OPEN,
            ACTIVATE,
            CLOSE,
            DEACTIVATE
        ],

        options: {
            name: "Popup",
            toggleEvent: "click",
            origin: BOTTOM + " " + LEFT,
            position: TOP + " " + LEFT,
            anchor: BODY,
            collision: "flip fit",
            viewport: window,
            animation: {
                open: {
                    effects: "slideIn:down",
                    transition: true,
                    duration: 200,
                    show: true
                },
                close: { // if close animation effects are defined, they will be used instead of open.reverse
                    duration: 100,
                    show: false,
                    hide: true
                }
            }
        },

        open: function (x, y) {
            var that = this,
                fixed = { isFixed: !isNaN(parseInt(y, 10)), x: x, y: y },
                element = that.element,
                options = that.options,
                direction = "down",
                animation, wrapper,
                anchor = $(options.anchor),
                style,
                idx;

            if (!that.visible()) {
                for (idx = 0; idx < styles.length; idx++) {
                    style = styles[idx];
                    element.css(style, anchor.css(style));
                }

                if (element.data("animating") || that.trigger(OPEN)) {
                    return;
                }

                DOCUMENT_ELEMENT.unbind(MOUSEDOWN, that._mousedownProxy)
                                .bind(MOUSEDOWN, that._mousedownProxy);
                if (!touch) {
                    WINDOW.unbind(RESIZE_SCROLL, that._resizeProxy)
                          .bind(RESIZE_SCROLL, that._resizeProxy);
                }

                that.wrapper = wrapper = kendo.wrap(element)
                                        .css({
                                            overflow: HIDDEN,
                                            display: "block",
                                            position: ABSOLUTE
                                        });

                if (support.mobileOS.android) {
                    wrapper.add(anchor).css(TRANSFORM, "translatez(0)"); // Android is VERY slow otherwise. Should be tested in other droids as well since it may cause blur.
                }

                wrapper.css(POSITION);

                if (options.appendTo == BODY) {
                    wrapper.css(TOP, "-10000px");
                }

                animation = extend(true, {}, options.animation.open);
                that.flipped = that._position(fixed);
                animation.effects = kendo.parseEffects(animation.effects, that.flipped);

                direction = animation.effects.slideIn ? animation.effects.slideIn.direction : direction;

                if (options.anchor != BODY) {
                    var dirClass = ACTIVEBORDER + "-" + direction;

                    element.addClass(ACTIVEBORDER + "-" + kendo.directions[direction].reverse);

                    anchor
                        .addClass(dirClass)
                        .children(ACTIVECHILDREN)
                        .addClass(ACTIVE)
                        .addClass(dirClass);
                }

                element.data(EFFECTS, animation.effects)
                       .kendoStop(true)
                       .kendoAnimate(animation);
            }
        },

        toggle: function () {
            var that = this;

            that[that.visible() ? CLOSE : OPEN]();
        },

        visible: function () {
            return this.element.is(":" + VISIBLE);
        },

        close: function () {
            var that = this,
                options = that.options,
                animation, openEffects, closeEffects;

            if (that.visible()) {
                if (that._closing || that.trigger(CLOSE)) {
                    return;
                }

                // Close all inclusive popups.
                that.element.find(".k-popup").each(function () {
                    var that = $(this),
                        popup = that.data("kendoPopup");

                    if (popup) {
                        popup.close();
                    }
                });

                DOCUMENT_ELEMENT.unbind(MOUSEDOWN, that._mousedownProxy);
                WINDOW.unbind(RESIZE_SCROLL, that._resizeProxy);

                animation = extend(true, {}, options.animation.close);
                openEffects = that.element.data(EFFECTS);
                closeEffects = animation.effects;

                that.wrapper = kendo.wrap(that.element).css({ overflow: HIDDEN });

                if (!closeEffects && !kendo.size(closeEffects) && openEffects && kendo.size(openEffects)) {
                    animation.effects = openEffects;
                    animation.reverse = true;
                }

                that._closing = true;

                that.element.kendoStop(true).kendoAnimate(animation);
            }
        },

        _resize: function (e) {
            var that = this;

            if (appendingToBodyTriggersResize) {
                var width = DOCUMENT.width();
                if (width == that._currentWidth) {
                    return;
                }
                that._currentWidth = width;
            }

            //if (!that._hovered) {
            //    that.close();
            //}
        },

        _mousedown: function (e) {
            var that = this,
                container = that.element[0],
                options = that.options,
                anchor = $(options.anchor)[0],
                toggleTarget = options.toggleTarget,
                target = kendo.eventTarget(e),
                popup = $(target).closest(".k-popup")[0];

            if (popup && popup !== that.element[0]) {
                return;
            }

            if (!contains(container, target) && !contains(anchor, target) && !(toggleTarget && contains($(toggleTarget)[0], target))) {
                that.close();
            }
        },

        _fit: function (position, size, viewPortSize) {
            var output = 0;

            if (position + size > viewPortSize) {
                output = viewPortSize - (position + size);
            }

            if (position < 0) {
                output = -position;
            }

            return output;
        },

        _flip: function (offset, size, anchorSize, viewPortSize, origin, position, boxSize) {
            var output = 0;
            boxSize = boxSize || size;

            if (position !== origin && position !== CENTER && origin !== CENTER) {
                if (offset + boxSize > viewPortSize) {
                    output += -(anchorSize + size);
                }

                if (offset + output < 0) {
                    output += anchorSize + size;
                }
            }
            return output;
        },

        _position: function (fixed) {
            var that = this,
                element = that.element,
                wrapper = that.wrapper,
                options = that.options,
                viewport = $(options.viewport),
                viewportOffset = $(viewport).offset(),
                anchor = $(options.anchor),
                origins = options.origin.toLowerCase().split(" "),
                positions = options.position.toLowerCase().split(" "),
                collisions = that.collisions,
                zoomLevel = support.zoomLevel(),
                zIndex = 10050;

            var siblingContainer = anchor.parents().filter(wrapper.siblings());

            if (siblingContainer[0]) {
                var parentZIndex = Number($(siblingContainer).css("zIndex"));
                if (parentZIndex) {
                    zIndex = parentZIndex + 1;
                }
            }

            wrapper.css("zIndex", zIndex);

            if (fixed && fixed.isFixed) {
                wrapper.css({ left: fixed.x, top: fixed.y });
            } else {
                wrapper.css(that._align(origins, positions));
            }

            var pos = getOffset(wrapper, POSITION),
                offset = getOffset(wrapper),
                anchorParent = anchor.offsetParent().parent(".k-animation-container"); // If the parent is positioned, get the current positions

            if (anchorParent.length && anchorParent.data(FITTED)) {
                pos = getOffset(wrapper, POSITION);
                offset = getOffset(wrapper);
            }

            if (viewport[0] === window) {
                offset.top -= (window.pageYOffset || document.documentElement.scrollTop || 0);
                offset.left -= (window.pageXOffset || document.documentElement.scrollLeft || 0);
            }
            else {
                offset.top -= viewportOffset.top;
                offset.left -= viewportOffset.left;
            }

            if (!that.wrapper.data(LOCATION)) { // Needed to reset the popup location after every closure - fixes the resize bugs.
                wrapper.data(LOCATION, extend({}, pos));
            }

            var offsets = extend({}, offset),
                location = extend({}, pos);

            if (collisions[0] === "fit") {
                location.top += that._fit(offsets.top, wrapper.outerHeight(), viewport.height() / zoomLevel);
            }

            if (collisions[1] === "fit") {
                location.left += that._fit(offsets.left, wrapper.outerWidth(), viewport.width() / zoomLevel);
            }

            if (location.left != pos.left || location.top != pos.top) {
                wrapper.data(FITTED, true);
            } else {
                wrapper.removeData(FITTED);
            }

            var flipPos = extend({}, location);

            if (collisions[0] === "flip") {
                location.top += that._flip(offsets.top, element.outerHeight(), anchor.outerHeight(), viewport.height() / zoomLevel, origins[0], positions[0], wrapper.outerHeight());
            }

            if (collisions[1] === "flip") {
                location.left += that._flip(offsets.left, element.outerWidth(), anchor.outerWidth(), viewport.width() / zoomLevel, origins[1], positions[1], wrapper.outerWidth());
            }

            wrapper.css(location);

            return (location.left != flipPos.left || location.top != flipPos.top);
        },

        _align: function (origin, position) {
            var that = this,
                element = that.wrapper,
                anchor = $(that.options.anchor),
                verticalOrigin = origin[0],
                horizontalOrigin = origin[1],
                verticalPosition = position[0],
                horizontalPosition = position[1],
                anchorOffset = getOffset(anchor),
                appendTo = $(that.options.appendTo),
                appendToOffset,
                width = element.outerWidth(),
                height = element.outerHeight(),
                anchorWidth = anchor.outerWidth(),
                anchorHeight = anchor.outerHeight(),
                top = anchorOffset.top,
                left = anchorOffset.left,
                round = Math.round;

            if (appendTo[0] != document.body) {
                appendToOffset = getOffset(appendTo);
                top -= appendToOffset.top;
                left -= appendToOffset.left;
            }


            if (verticalOrigin === BOTTOM) {
                top += anchorHeight;
            }

            if (verticalOrigin === CENTER) {
                top += round(anchorHeight / 2);
            }

            if (verticalPosition === BOTTOM) {
                top -= height;
            }

            if (verticalPosition === CENTER) {
                top -= round(height / 2);
            }

            if (horizontalOrigin === RIGHT) {
                left += anchorWidth;
            }

            if (horizontalOrigin === CENTER) {
                left += round(anchorWidth / 2);
            }

            if (horizontalPosition === RIGHT) {
                left -= width;
            }

            if (horizontalPosition === CENTER) {
                left -= round(width / 2);
            }

            return {
                top: top,
                left: left
            };
        }
    });

    ui.plugin(Popup);
})(jQuery);
(function ($, undefined) {

    var kendo = window.kendo,
        ui = kendo.ui,
        Widget = ui.Widget,
        keys = kendo.keys,
        touch = kendo.support.touch,
        ID = "id",
        LI = "li",
        CLICK = touch ? "touchend" : "click",
        CHANGE = "change",
        CHARACTER = "character",
        FOCUSED = "k-state-focused",
        HOVER = "k-state-hover",
        LOADING = "k-loading",
        OPEN = "open",
        CLOSE = "close",
        SELECT = "select",
        SELECTED = "selected",
        extend = $.extend,
        proxy = $.proxy,
        isIE8 = $.browser.msie && parseInt($.browser.version, 10) < 9,
        quotRegExp = /"/g;

    var List = Widget.extend(/** @lends kendo.ui.List */{

        init: function (element, options) {
            var that = this, id, list;

            Widget.fn.init.call(that, element, options);

            that._template();

            that.ul = $('<ul unselectable="on" class="k-list k-reset"/>')
                        .css({ overflow: kendo.support.touch ? "" : "auto" })
                        .delegate(LI, "mouseenter", function () { $(this).addClass(HOVER); })
                        .delegate(LI, "mouseleave", function () { $(this).removeClass(HOVER); })
                        .delegate(LI, CLICK, proxy(that._click, that));

            that.list = list = $("<div class='k-list-container'/>")
                        .append(that.ul)
                        .mousedown(function (e) {
                            e.preventDefault();
                        });

            id = that.element.attr(ID);
            if (id) {
                list.attr(ID, id + "-list");
            }

            $(document.documentElement).bind("mousedown", proxy(that._mousedown, that));
        },

        items: function () {
            return this.ul[0].children;
        },

        current: function (candidate) {
            var that = this;

            if (candidate !== undefined) {
                if (that._current) {
                    that._current.removeClass(FOCUSED);
                }

                if (candidate) {
                    candidate.addClass(FOCUSED);
                    that._scroll(candidate);
                }

                that._current = candidate;
            } else {
                return that._current;
            }
        },

        dataItem: function (index) {
            var that = this;

            if (index === undefined) {
                index = that.selectedIndex;
            }

            return that._data()[index];
        },

        _accessors: function () {
            var that = this,
                element = that.element,
                options = that.options,
                getter = kendo.getter,
                textField = element.attr(kendo.attr("text-field")),
                valueField = element.attr(kendo.attr("value-field"));

            if (textField) {
                options.dataTextField = textField;
            }

            if (valueField) {
                options.dataValueField = valueField;
            }

            that._text = getter(options.dataTextField);
            that._value = getter(options.dataValueField);
        },

        _blur: function () {
            var that = this;

            that._change();
            that.close();
        },

        _change: function () {
            var that = this,
                index = that.selectedIndex,
                value = that.value(),
                trigger;

            if (value !== that._old) {
                if (that._old != "" && value != that._old + " -[NEW]")
                    trigger = true;
            } else if (index !== undefined && index !== that._oldIndex) {
                trigger = true;
            } else if (that.options.IsChangeOnBlankValue == true && value == "") {
                //Updated By Amiy Yadav
                if (this.options.addOnFunction) {
                    this.options.addOnFunction($(that.element).attr("id"), that.value(), that.options.valueControlId, that.key());
                }
            }
            if (trigger) {
                that._old = value;
                that._oldIndex = index;

                that.trigger(CHANGE);

                // trigger the DOM change event so any subscriber gets notified
                that.element.trigger(CHANGE);
            }

        },

        _click: function (e) {
            if (!e.isDefaultPrevented()) {
                this._accept($(e.currentTarget));

                if (e.type === "touchend") {
                    e.preventDefault();
                }
            }
        },

        _data: function () {
            return this.dataSource.view();
        },

        _enable: function () {
            var that = this,
                options = that.options;

            if (that.element.prop("disabled")) {
                options.enable = false;
            }

            that.enable(options.enable);
        },

        _focus: function (li) {
            var that = this;
            if (that.popup.visible() && li && that.trigger(SELECT, { item: li })) {
                that.close();
                return;
            }

            that._select(li);
            //Added By amit Yadav for Chrome 59  
            if (typeof (that.options.select) == "string" && that.options.select.indexOf("return ") == 0 && $(that.element).attr("id").indexOf("tbl") == 0) {
                var fnName = that.options.select.replace('return ', '').split('(')[0];
                var fn = window[fnName];
                if (typeof fn === 'function') {
                    fn(that.element);
                }
            }
            that._blur();
        },

        _height: function (length) {
            if (length) {
                var that = this,
                    list = that.list,
                    visible = that.popup.visible(),
                    height = that.options.height;

                //Updated By Amit Yadav       
                var cls = $(list).attr("class");
                if (cls.indexOf("k-state-border-down") != -1) {

                    list = list.add(list.parent(".k-animation-container")).show().height($(list).parent("div").height() - 2);
                } else {
                    $(that.ul[0]).css("max-height", "200px");
                    list = list.add(list.parent(".k-animation-container")).show().height(that.ul[0].scrollHeight >= height ? height : "auto").css("max-height", "200px");
                }
                //   list = list.add(list.parent(".k-animation-container")).show().height(that.ul[0].scrollHeight >= height ? height : "auto");
                if (!visible) {
                    list.hide();
                }

            }
        },

        _adjustListWidth: function () {
            var list = this.list,
                width = list[0].style.width,
                wrapper = this.wrapper,
                computedStyle, computedWidth;

            if (!width) {
                computedStyle = window.getComputedStyle ? window.getComputedStyle(wrapper[0], null) : 0;
                computedWidth = computedStyle ? parseFloat(computedStyle.width) : wrapper.outerWidth();

                if (computedStyle && ($.browser.mozilla || $.browser.msie)) { // getComputedStyle returns different box in FF and IE.
                    computedWidth += parseFloat(computedStyle.paddingLeft) + parseFloat(computedStyle.paddingRight) + parseFloat(computedStyle.borderLeftWidth) + parseFloat(computedStyle.borderRightWidth);
                }
                //computedWidth="100%";
                width = computedWidth - (list.outerWidth() - list.width());
            }

            list.css({
                fontFamily: wrapper.css("font-family"),
                width: width
            });

            return true;
        },

        _popup: function () {
            var that = this,
                list = that.list,
                options = that.options,
                wrapper = that.wrapper,
                opened = false;

            that.popup = new ui.Popup(list, extend({}, options.popup, {
                anchor: wrapper,
                open: function (e) {
                    if (!opened) {
                        opened = that._adjustListWidth();
                    }

                    if (that.trigger(OPEN)) {
                        e.preventDefault();
                    }
                },
                close: function (e) {
                    if (that.trigger(CLOSE)) {
                        e.preventDefault();
                    }
                },
                animation: options.animation
            }));

            that._touchScroller = kendo.touchScroller(that.popup.element);
        },

        _makeUnselectable: function (element) {
            if (isIE8) {
                this.list.find("*").attr("unselectable", "on");
            }
        },

        _toggleHover: function (e) {
            if (!touch) {
                $(e.currentTarget).toggleClass(HOVER, e.type === "mouseenter");
            }
        },

        _toggle: function (open) {
            var that = this;
            open = open !== undefined ? open : !that.popup.visible();

            if (!touch && that._focused[0] !== document.activeElement) {
                that._focused.focus();
            }

            that[open ? OPEN : CLOSE]();
        },

        _scroll: function (item) {

            if (!item) {
                return;
            }

            if (item[0]) {
                item = item[0];
            }

            var ul = this.ul[0],
                itemOffsetTop = item.offsetTop,
                itemOffsetHeight = item.offsetHeight,
                ulScrollTop = ul.scrollTop,
                ulOffsetHeight = ul.clientHeight,
                bottomDistance = itemOffsetTop + itemOffsetHeight;

            ul.scrollTop = ulScrollTop > itemOffsetTop ?
                itemOffsetTop : bottomDistance > (ulScrollTop + ulOffsetHeight) ?
                           bottomDistance - ulOffsetHeight : ulScrollTop;
        },

        _template: function () {
            var that = this,
                options = that.options,
                template = options.template,
                hasDataSource = options.dataSource;

            if (that.element.is(SELECT) && that.element[0].length) {
                if (!hasDataSource) {
                    options.dataTextField = options.dataTextField || "text";
                    options.dataValueField = options.dataValueField || "value";
                }
            }

            if (!template) {
                that.template = kendo.template('<li unselectable="on" class="k-item">${data' + (options.dataTextField ? "." : "") + options.dataTextField + "}</li>", { useWithBlock: false });
            } else {
                template = kendo.template(template);
                that.template = function (data) {
                    return '<li unselectable="on" class="k-item">' + template(data) + "</li>";
                };
            }
        }
    });

    extend(List, {
        caret: function (element) {
            var caret,
                selection = element.ownerDocument.selection;

            if (selection) {
                caret = Math.abs(selection.createRange().moveStart(CHARACTER, -element.value.length));
            } else {
                caret = element.selectionStart;
            }

            return caret;
        },

        selectText: function (element, selectionStart, selectionEnd) {
            try {
                if (element.createTextRange) {
                    element.focus();
                    var textRange = element.createTextRange();
                    textRange.collapse(true);
                    textRange.moveStart(CHARACTER, selectionStart);
                    textRange.moveEnd(CHARACTER, selectionEnd - selectionStart);
                    textRange.select();
                } else {
                    element.setSelectionRange(selectionStart, selectionEnd);
                }
            } catch (e) { /* element is not focused or it is not in the DOM */ }
        },
        inArray: function (node, parentNode) {
            var idx, length, siblings = parentNode.children;

            if (!node || node.parentNode !== parentNode) {
                return -1;
            }

            for (idx = 0, length = siblings.length; idx < length; idx++) {
                if (node === siblings[idx]) {
                    return idx;
                }
            }

            return -1;
        }
    });

    kendo.ui.List = List;


    ui.Select = List.extend(/** @lends kendo.ui.Select */{

        init: function (element, options) {
            List.fn.init.call(this, element, options);
        },

        setDataSource: function (dataSource) {
            this.options.dataSource = dataSource;

            this._dataSource();

            if (this.options.autoBind) {
                this._selectItem();
            }
        },


        close: function () {
            this.popup.close();
        },

        _accessor: function (value, idx) {
            var element = this.element,
                isSelect = element.is(SELECT),
                option, selectedIndex;

            element = element[0];

            if (value === undefined) {
                if (isSelect) {
                    selectedIndex = element.selectedIndex;

                    if (selectedIndex > -1) {
                        option = element.options[selectedIndex];

                        if (option) {
                            value = option.value;
                        }
                    }
                } else {
                    value = element.value;
                }
                return value;
            } else {
                if (isSelect) {
                    element.selectedIndex = idx;
                } else {
                    element.value = value;
                }
            }
        },

        _hideBusy: function () {
            var that = this;
            clearTimeout(that._busy);
            that._arrow.removeClass(LOADING);
            that._busy = null;
        },

        _showBusy: function () {
            var that = this;

            if (that._busy) {
                return;
            }

            that._busy = setTimeout(function () {
                that._arrow.addClass(LOADING);
            }, 100);
        },

        _dataSource: function () {
            var that = this,
                element = that.element,
                options = that.options,
                dataSource = options.dataSource || {},
                idx;

            dataSource = $.isArray(dataSource) ? { data: dataSource } : dataSource;

            if (element.is(SELECT)) {
                idx = element[0].selectedIndex;
                if (idx > -1) {
                    options.index = idx;
                }

                dataSource.select = element;
                dataSource.fields = [{ field: options.dataTextField },
                                     { field: options.dataValueField }];
            }

            if (that.dataSource && that._refreshHandler) {
                that.dataSource.unbind(CHANGE, that._refreshHandler)
                               .unbind("requestStart", that._requestStartHandler);
            } else {
                that._refreshHandler = proxy(that.refresh, that);
                that._requestStartHandler = proxy(that._showBusy, that);
            }

            that.dataSource = kendo.data.DataSource.create(dataSource)
                                   .bind(CHANGE, that._refreshHandler)
                                   .bind("requestStart", that._requestStartHandler);
        },

        _index: function (value) {
            var that = this,
                idx,
                length,
                data = that._data(),
                valueFromData;

            for (idx = 0, length = data.length; idx < length; idx++) {
                valueFromData = that._value(data[idx]);

                if (valueFromData === undefined) {
                    valueFromData = that._text(data[idx]);
                }

                if (valueFromData == value) {
                    return idx;
                }
            }

            return -1;
        },

        _get: function (li) {
            var that = this,
                data = that._data(),
                idx, length;

            if (typeof li === "function") {
                for (idx = 0, length = data.length; idx < length; idx++) {
                    if (li(data[idx])) {
                        li = idx;
                        break;
                    }
                }
            }

            if (typeof li === "number") {
                if (li < 0) {
                    return $();
                }

                li = $(that.ul[0].children[li]);
            }

            if (li && li.nodeType) {
                li = $(li);
            }

            return li;
        },

        _move: function (e) {
            var that = this,
                key = e.keyCode,
                ul = that.ul[0],
                current = that._current,
                down = key === keys.DOWN,
                pressed;

            if (key === keys.UP || down) {
                if (e.altKey) {
                    that.toggle(down);
                } else if (down) {
                    that._select(current ? current[0].nextSibling : ul.firstChild);
                    e.preventDefault();
                } else {
                    that._select(current ? current[0].previousSibling : ul.lastChild);
                    e.preventDefault();
                }
                pressed = true;
            } else if (key === keys.ENTER || key === keys.TAB) {

                if (that.popup.visible()) {
                    e.preventDefault();
                }

                that._accept(current);
                pressed = true;
            } else if (key === keys.ESC) {
                that.close();
                pressed = true;
            }

            return pressed;
        },

        _valueOnFetch: function (value) {
            var that = this;

            if (!that.ul[0].firstChild && !that._fetch) {
                that.dataSource.one(CHANGE, function () {
                    that._fetch = true;
                    that.value(value);
                }).fetch();

                return true;
            }

            that._fetch = false;
        },

        _options: function (data, optionLabel) {
            var that = this,
                element = that.element,
                selectedIndex = element[0].selectedIndex,
                length = data.length,
                options = "",
                option,
                dataItem,
                dataText,
                dataValue,
                idx = 0;

            if (optionLabel) {
                options = optionLabel;
                idx = 1;
            }

            for (; idx < length; idx++) {
                option = "<option";
                dataItem = data[idx];
                dataText = that._text(dataItem);
                dataValue = that._value(dataItem);

                if (dataValue !== undefined) {
                    dataValue += "";

                    if (dataValue.indexOf('"') !== -1) {
                        dataValue = dataValue.replace(quotRegExp, "&quot;");
                    }

                    option += ' value="' + dataValue + '"';
                }

                option += ">";

                if (dataText !== undefined) {
                    option += dataText;
                }

                option += "</option>";
                options += option;
            }

            element.html(options);
            element[0].selectedIndex = selectedIndex;
        },

        _reset: function () {
            var that = this,
                element = that.element;

            element.closest("form")
                   .bind("reset", function () {
                       setTimeout(function () {
                           that.value(element[0].value);
                       });
                   });
        },

        _cascade: function () {
            var that = this,
                options = that.options,
                cascade = options.cascadeFrom,
                parent, select, valueField,
                deactivate, change, dataSource;

            if (cascade) {
                parent = $("#" + cascade).data("kendo" + options.name);

                if (!parent) {
                    return;
                }

                dataSource = that.dataSource;
                valueField = parent.options.dataValueField;
                deactivate = function () {
                    that.value("");
                    that.enable(false);
                };
                change = function () {
                    var value = that.value();
                    if (value) {
                        that.value(value);
                        if (that.selectedIndex == -1) {
                            that.value("");
                        }
                    } else {
                        that.select(options.index);
                    }
                    that.trigger(SELECTED);
                    that.enable();
                };
                select = function () {
                    var dataItem = parent.dataItem(),
                        filterValue = dataItem ? parent._value(dataItem) : null,
                        expressions, filters;

                    if (filterValue) {
                        expressions = dataSource.filter() || {};
                        removeFiltersForField(expressions, valueField);
                        filters = expressions.filters || [];

                        filters.push({
                            field: valueField,
                            operator: "eq",
                            value: filterValue
                        });

                        dataSource
                            .one(CHANGE, change)
                            .filter(filters);

                    } else {
                        deactivate();
                    }
                };

                parent.bind("cascade", deactivate)
                      .bind(CHANGE, function () {
                          select();
                          that.trigger("cascade");
                      })
                      .one(SELECTED, function () {
                          select();
                      });

                select();
            }
        }
    });

    function removeFiltersForField(expression, field) {
        if (expression.filters) {
            expression.filters = $.grep(expression.filters, function (filter) {
                removeFiltersForField(filter, field);
                if (filter.filters) {
                    return filter.filters.length;
                } else {
                    return filter.field != field;
                }
            });
        }
    }

    ui.Select.removeFiltersForField = removeFiltersForField;

})(jQuery);
(function ($, undefined) {

    var kendo = window.kendo,
        ui = kendo.ui,
        Widget = ui.Widget,
        parse = kendo.parseDate,
        extractFormat = kendo._extractFormat,
        template = kendo.template,
        getCulture = kendo.getCulture,
        touch = kendo.support.touch,
        transitions = kendo.support.transitions,
        transitionOrigin = transitions ? transitions.css + "transform-origin" : "",
        cellTemplate = template('<td#=data.cssClass#><a class="k-link" href="\\#" data-#=data.ns#value="#=data.dateString#">#=data.value#</a></td>', { useWithBlock: false }),
        emptyCellTemplate = template("<td>&nbsp;</td>", { useWithBlock: false }),
        isIE8 = $.browser.msie && parseInt($.browser.version, 10) < 9,
        CLICK = touch ? "touchend" : "click",
        MIN = "min",
        LEFT = "left",
        SLIDE = "slide",
        MONTH = "month",
        CENTURY = "century",
        CHANGE = "change",
        NAVIGATE = "navigate",
        VALUE = "value",
        HOVER = "k-state-hover",
        DISABLED = "k-state-disabled",
        OTHERMONTH = "k-other-month",
        OTHERMONTHCLASS = ' class="' + OTHERMONTH + '"',
        TODAY = "k-nav-today",
        CELLSELECTOR = "td:has(.k-link)",
        MOUSEENTER = touch ? "touchstart" : "mouseenter",
        MOUSELEAVE = touch ? "touchend" : "mouseleave",
        MS_PER_MINUTE = 60000,
        MS_PER_DAY = 86400000,
        PREVARROW = "_prevArrow",
        NEXTARROW = "_nextArrow",
        proxy = $.proxy,
        extend = $.extend,
        DATE = Date,
        views = {
            month: 0,
            year: 1,
            decade: 2,
            century: 3
        };

    var Calendar = Widget.extend(/** @lends kendo.ui.Calendar.prototype */{

        init: function (element, options) {
            var that = this, value;

            Widget.fn.init.call(that, element, options);

            element = that.wrapper = that.element;
            options = that.options;

            options.url = window.unescape(options.url);

            element.addClass("k-widget k-calendar");

            that._templates();

            that._header();

            that._footer(that.footer);

            element
                .delegate(CELLSELECTOR, MOUSEENTER + " " + MOUSELEAVE, mousetoggle)
                .delegate(CELLSELECTOR, CLICK, proxy(that._click, that));

            value = options.value;
            normalize(options);

            that._index = views[options.start];
            that._current = new DATE(restrictValue(value, options.min, options.max));

            that.value(value);

            kendo.notify(that);
        },

        options: {
            name: "Calendar",
            value: null,
            min: new DATE(1900, 0, 1),
            max: new DATE(2099, 11, 31),
            dates: [],
            url: "",
            culture: "",
            footer: "",
            format: "",
            month: {},
            start: MONTH,
            depth: MONTH,
            animation: {
                horizontal: {
                    effects: SLIDE,
                    duration: 500,
                    divisor: 2
                },
                vertical: {
                    effects: "zoomIn",
                    duration: 400
                }
            }
        },

        events: [

            CHANGE,
            NAVIGATE
        ],

        setOptions: function (options) {
            normalize(options);

            Widget.fn.setOptions.call(this, options);
        },

        min: function (value) {
            return this._option(MIN, value);
        },

        max: function (value) {
            return this._option("max", value);
        },


        navigateToPast: function () {
            this._navigate(PREVARROW, -1);
        },


        navigateToFuture: function () {
            this._navigate(NEXTARROW, 1);
        },


        navigateUp: function () {
            var that = this,
                index = that._index;

            if (that._title.hasClass(DISABLED)) {
                return;
            }

            that.navigate(that._current, ++index);
        },


        navigateDown: function (value) {
            var that = this,
            index = that._index,
            depth = that.options.depth;

            if (!value) {
                return;
            }

            if (index === views[depth]) {
                if (+that._value != +value) {
                    that.value(value);
                    that.trigger(CHANGE);
                }
                return;
            }

            that.navigate(value, --index);
        },


        navigate: function (value, view) {
            view = isNaN(view) ? views[view] : view;

            var that = this,
                options = that.options,
                culture = options.culture,
                min = options.min,
                max = options.max,
                title = that._title,
                from = that._table,
                selectedValue = that._value,
                currentValue = that._current,
                future = value && +value > +currentValue,
                vertical = view !== undefined && view !== that._index,
                to, currentView, compare;

            if (!value) {
                value = currentValue;
            } else {
                that._current = value = new DATE(restrictValue(value, min, max));
            }

            if (view === undefined) {
                view = that._index;
            } else {
                that._index = view;
            }

            that._view = currentView = calendar.views[view];
            compare = currentView.compare;

            title.toggleClass(DISABLED, view === views[CENTURY]);
            that[PREVARROW].toggleClass(DISABLED, compare(value, min) < 1);
            that[NEXTARROW].toggleClass(DISABLED, compare(value, max) > -1);

            if (!from || that._changeView) {
                title.html(currentView.title(value, culture));

                that._table = to = $(currentView.content(extend({
                    min: min,
                    max: max,
                    date: value,
                    url: options.url,
                    dates: options.dates,
                    format: options.format,
                    culture: culture
                }, that[currentView.name])));

                makeUnselectable(to);

                that._animate({
                    from: from,
                    to: to,
                    vertical: vertical,
                    future: future
                });

                that.trigger(NAVIGATE);
            }

            if (view === views[options.depth] && selectedValue) {
                that._class("k-state-selected", currentView.toDateString(selectedValue));
            }

            that._changeView = true;
        },


        value: function (value) {
            var that = this,
            view = that._view,
            options = that.options,
            min = options.min,
            max = options.max;

            if (value === undefined) {
                return that._value;
            }

            value = parse(value, options.format, options.culture);

            if (value !== null) {
                value = new DATE(value);

                if (!isInRange(value, min, max)) {
                    value = null;
                }
            }

            that._value = value;
            that._changeView = !value || view && view.compare(value, that._current) !== 0;

            that.navigate(value);
        },

        _animate: function (options) {
            var that = this,
                from = options.from,
                to = options.to;

            if (!from) {
                to.insertAfter(that.element[0].firstChild);
            } else if (from.parent().data("animating")) {
                from.parent().kendoStop(true, true).remove();
                from.remove();

                to.insertAfter(that.element[0].firstChild);
            } else if (!from.is(":visible") || that.options.animation === false) {
                to.insertAfter(from);
                from.remove();
            } else {
                that[options.vertical ? "_vertical" : "_horizontal"](from, to, options.future);
            }
        },

        _horizontal: function (from, to, future) {
            var that = this,
                horizontal = that.options.animation.horizontal,
                effects = horizontal.effects,
                viewWidth = from.outerWidth();

            if (effects && effects.indexOf(SLIDE) != -1) {
                from.add(to).css({ width: viewWidth });

                from.wrap("<div/>");

                from.parent()
                .css({
                    position: "relative",
                    width: viewWidth * 2,
                    "float": LEFT,
                    left: future ? 0 : -viewWidth
                });

                to[future ? "insertAfter" : "insertBefore"](from);

                extend(horizontal, {
                    effects: SLIDE + ":" + (future ? LEFT : "right"),
                    complete: function () {
                        from.remove();
                        to.unwrap();
                    }
                });

                from.parent().kendoStop(true, true).kendoAnimate(horizontal);
            }
        },

        _vertical: function (from, to) {
            var that = this,
                vertical = that.options.animation.vertical,
                effects = vertical.effects,
                cell, position;

            if (effects && effects.indexOf("zoom") != -1) {
                to.css({
                    position: "absolute",
                    top: from.prev().outerHeight(),
                    left: 0
                }).insertBefore(from);

                if (transitionOrigin) {
                    cell = that._cellByDate(that._view.toDateString(that._current));
                    position = cell.position();
                    position = (position.left + parseInt(cell.width() / 2, 10)) + "px" + " " + (position.top + parseInt(cell.height() / 2, 10) + "px");
                    to.css(transitionOrigin, position);
                }

                from.kendoStop(true, true).kendoAnimate({
                    effects: "fadeOut",
                    duration: 600,
                    complete: function () {
                        from.remove();
                        to.css({
                            position: "static",
                            top: 0,
                            left: 0
                        });
                    }
                });

                to.kendoStop(true, true).kendoAnimate(vertical);
            }
        },

        _cellByDate: function (value) {
            return this._table.find("td:not(." + OTHERMONTH + ")")
                       .filter(function () {
                           return $(this.firstChild).attr(kendo.attr(VALUE)) === value;
                       });
        },

        _class: function (className, value) {
            this._table.find("td:not(." + OTHERMONTH + ")")
                .removeClass(className)
                .filter(function () {
                    return $(this.firstChild).attr(kendo.attr(VALUE)) === value;
                })
                .addClass(className);
        },

        _click: function (e) {
            var that = this,
                options = that.options,
                currentValue = that._current,
                link = $(e.currentTarget.firstChild),
                value = link.attr(kendo.attr(VALUE)).split("/");

            //Safari cannot create corretly date from "1/1/2090"
            value = new DATE(value[0], value[1], value[2]);

            if (link[0].href.indexOf("#") != -1) {
                e.preventDefault();
            }

            if (link.parent().hasClass(OTHERMONTH)) {
                currentValue = value;
            } else {
                that._view.setDate(currentValue, value);
            }

            that.navigateDown(restrictValue(currentValue, options.min, options.max));
        },

        _focus: function (value) {
            var that = this,
                view = that._view;

            if (view.compare(value, that._current) !== 0) {
                that.navigate(value);
            } else {
                that._current = value;
            }

            that._class("k-state-focused", view.toDateString(value));
        },

        _footer: function (template) {
            var that = this,
                element = that.element,
                today = new DATE(),
                footer = element.find(".k-footer");

            if (!template) {
                that._toggle(false);
                footer.hide();
                return;
            }

            if (!footer[0]) {
                footer = $('<div class="k-footer"><a href="#" class="k-link k-nav-today"></a></div>').appendTo(element);
            }

            that._today = footer.show()
                                .find(".k-link")
                                .html(template(today))
                                .attr("title", kendo.toString(today, "D", that.options.culture));

            that._toggle();
        },

        _header: function () {
            var that = this,
            element = that.element,
            links;

            if (!element.find(".k-header")[0]) {
                element.html('<div class="k-header">' +
                             '<a href="#" class="k-link k-nav-prev"><span class="k-icon k-i-arrow-w"></span></a>' +
                             '<a href="#" class="k-link k-nav-fast"></a>' +
                             '<a href="#" class="k-link k-nav-next"><span class="k-icon k-i-arrow-e"></span></a>' +
                             '</div>');
            }

            links = element.find(".k-link")
                           .bind(MOUSEENTER + " " + MOUSELEAVE, mousetoggle)
                           .click(false);

            that._title = links.eq(1).bind(CLICK, proxy(that.navigateUp, that));
            that[PREVARROW] = links.eq(0).bind(CLICK, proxy(that.navigateToPast, that));
            that[NEXTARROW] = links.eq(2).bind(CLICK, proxy(that.navigateToFuture, that));
        },

        _navigate: function (arrow, modifier) {
            var that = this,
                index = that._index + 1,
                currentValue = new DATE(that._current);

            arrow = that[arrow];

            if (!arrow.hasClass(DISABLED)) {
                if (index > 3) {
                    currentValue.setFullYear(currentValue.getFullYear() + 100 * modifier);
                } else {
                    calendar.views[index].setDate(currentValue, modifier);
                }

                that.navigate(currentValue);
            }
        },

        _option: function (option, value) {
            var that = this,
                options = that.options,
                selectedValue = +that._value,
                bigger, navigate;

            if (value === undefined) {
                return options[option];
            }

            value = parse(value, options.format, options.culture);

            if (!value) {
                return;
            }

            options[option] = new DATE(value);

            navigate = that._view.compare(value, that._current);

            if (option === MIN) {
                bigger = +value > selectedValue;
                navigate = navigate > -1;
            } else {
                bigger = selectedValue > +value;
                navigate = navigate < 1;
            }

            if (bigger) {
                that.value(null);
            } else if (navigate) {
                that.navigate();
            }

            that._toggle();
        },

        _toggle: function (toggle) {
            var that = this,
                options = that.options,
                link = that._today;

            if (toggle === undefined) {
                toggle = isInRange(new DATE(), options.min, options.max);
            }

            if (link) {
                link.unbind(CLICK);

                if (toggle) {
                    link.addClass(TODAY)
                        .removeClass(DISABLED)
                        .bind(CLICK, proxy(that._todayClick, that));
                } else {
                    link.removeClass(TODAY)
                        .addClass(DISABLED)
                        .bind(CLICK, prevent);
                }
            }
        },

        _todayClick: function (e) {
            var that = this,
                depth = views[that.options.depth],
                today = new DATE();

            e.preventDefault();

            if (that._view.compare(that._current, today) === 0 && that._index == depth) {
                that._changeView = false;
            }

            that._value = today;
            that.navigate(today, depth);

            that.trigger(CHANGE);
        },

        _templates: function () {
            var that = this,
                options = that.options,
                footer = options.footer,
                month = options.month,
                content = month.content,
                empty = month.empty;

            that.month = {
                content: template('<td#=data.cssClass#><a class="k-link#=data.linkClass#" href="#=data.url#" ' + kendo.attr("value") + '="#=data.dateString#" title="#=data.title#">' + (content || "#=data.value#") + '</a></td>', { useWithBlock: !!content }),
                empty: template("<td>" + (empty || "&nbsp;") + "</td>", { useWithBlock: !!empty })
            };

            if (footer !== false) {
                that.footer = template(footer || '#= kendo.toString(data,"D","' + options.culture + '") #', { useWithBlock: false });
            }
        }
    });

    ui.plugin(Calendar);

    var calendar = {
        firstDayOfMonth: function (date) {
            return new DATE(
                date.getFullYear(),
                date.getMonth(),
                1
            );
        },

        firstVisibleDay: function (date, calendarInfo) {
            calendarInfo = calendarInfo || kendo.culture().calendar;

            var firstDay = calendarInfo.firstDay,
            firstVisibleDay = new DATE(date.getFullYear(), date.getMonth(), 0, date.getHours(), date.getMinutes(), date.getSeconds(), date.getMilliseconds());

            while (firstVisibleDay.getDay() != firstDay) {
                calendar.setTime(firstVisibleDay, -1 * MS_PER_DAY);
            }

            return firstVisibleDay;
        },

        setTime: function (date, time) {
            var tzOffsetBefore = date.getTimezoneOffset(),
            resultDATE = new DATE(date.getTime() + time),
            tzOffsetDiff = resultDATE.getTimezoneOffset() - tzOffsetBefore;

            date.setTime(resultDATE.getTime() + tzOffsetDiff * MS_PER_MINUTE);
        },
        views: [{
            name: MONTH,
            title: function (date, culture) {
                return getCalendarInfo(culture).months.names[date.getMonth()] + " " + date.getFullYear();
            },
            content: function (options) {
                var that = this,
                idx = 0,
                min = options.min,
                max = options.max,
                date = options.date,
                dates = options.dates,
                format = options.format,
                culture = options.culture,
                navigateUrl = options.url,
                hasUrl = navigateUrl && dates[0],
                currentCalendar = getCalendarInfo(culture),
                firstDayIdx = currentCalendar.firstDay,
                days = currentCalendar.days,
                names = shiftArray(days.names, firstDayIdx),
                short = shiftArray(days.namesShort, firstDayIdx),
                start = calendar.firstVisibleDay(date, currentCalendar),
                firstDayOfMonth = that.first(date),
                lastDayOfMonth = that.last(date),
                toDateString = that.toDateString,
                today = new DATE(),
                html = '<table class="k-content" cellspacing="0"><thead><tr>';

                for (; idx < 7; idx++) {
                    html += '<th scope="col" title="' + names[idx] + '">' + short[idx] + '</th>';
                }

                today = +new DATE(today.getFullYear(), today.getMonth(), today.getDate());

                return view({
                    cells: 42,
                    perRow: 7,
                    html: html += "</tr></thead><tbody><tr>",
                    start: new DATE(start.getFullYear(), start.getMonth(), start.getDate()),
                    min: new DATE(min.getFullYear(), min.getMonth(), min.getDate()),
                    max: new DATE(max.getFullYear(), max.getMonth(), max.getDate()),
                    content: options.content,
                    empty: options.empty,
                    setter: that.setDate,
                    build: function (date, idx) {
                        var cssClass = [],
                            day = date.getDay(),
                            linkClass = "",
                            url = "#";

                        if (date < firstDayOfMonth || date > lastDayOfMonth) {
                            cssClass.push(OTHERMONTH);
                        }

                        if (+date === today) {
                            cssClass.push("k-today");
                        }

                        if (day === 0 || day === 6) {
                            cssClass.push("k-weekend");
                        }

                        if (hasUrl && inArray(+date, dates)) {
                            url = navigateUrl.replace("{0}", kendo.toString(date, format, culture));
                            linkClass = " k-action-link";
                        }

                        return {
                            date: date,
                            dates: dates,
                            ns: kendo.ns,
                            title: kendo.toString(date, "D", culture),
                            value: date.getDate(),
                            dateString: toDateString(date),
                            cssClass: cssClass[0] ? ' class="' + cssClass.join(" ") + '"' : "",
                            linkClass: linkClass,
                            url: url
                        };
                    }
                });
            },
            first: function (date) {
                return calendar.firstDayOfMonth(date);
            },
            last: function (date) {
                return new DATE(date.getFullYear(), date.getMonth() + 1, 0);
            },
            compare: function (date1, date2) {
                var result,
                month1 = date1.getMonth(),
                year1 = date1.getFullYear(),
                month2 = date2.getMonth(),
                year2 = date2.getFullYear();

                if (year1 > year2) {
                    result = 1;
                } else if (year1 < year2) {
                    result = -1;
                } else {
                    result = month1 == month2 ? 0 : month1 > month2 ? 1 : -1;
                }

                return result;
            },
            setDate: function (date, value) {
                if (value instanceof DATE) {
                    date.setFullYear(value.getFullYear(), value.getMonth(), value.getDate());
                } else {
                    calendar.setTime(date, value * MS_PER_DAY);
                }
            },
            toDateString: function (date) {
                return date.getFullYear() + "/" + date.getMonth() + "/" + date.getDate();
            }
        },
        {
            name: "year",
            title: function (date) {
                return date.getFullYear();
            },
            content: function (options) {
                var namesAbbr = getCalendarInfo(options.culture).months.namesAbbr,
                toDateString = this.toDateString,
                min = options.min,
                max = options.max;

                return view({
                    min: new DATE(min.getFullYear(), min.getMonth(), 1),
                    max: new DATE(max.getFullYear(), max.getMonth(), 1),
                    start: new DATE(options.date.getFullYear(), 0, 1),
                    setter: this.setDate,
                    build: function (date) {
                        return {
                            value: namesAbbr[date.getMonth()],
                            ns: kendo.ns,
                            dateString: toDateString(date),
                            cssClass: ""
                        };
                    }
                });
            },
            first: function (date) {
                return new DATE(date.getFullYear(), 0, date.getDate());
            },
            last: function (date) {
                return new DATE(date.getFullYear(), 11, date.getDate());
            },
            compare: function (date1, date2) {
                return compare(date1, date2);
            },
            setDate: function (date, value) {
                if (value instanceof DATE) {
                    date.setFullYear(value.getFullYear(),
                    value.getMonth(),
                    date.getDate());
                } else {
                    var month = date.getMonth() + value;

                    date.setMonth(month);

                    if (month > 11) {
                        month -= 12;
                    }

                    if (month > 0 && date.getMonth() != month) {
                        date.setDate(0);
                    }
                }
            },
            toDateString: function (date) {
                return date.getFullYear() + "/" + date.getMonth() + "/1";
            }
        },
        {
            name: "decade",
            title: function (date) {
                var start = date.getFullYear();

                start = start - start % 10;

                return start + "-" + (start + 9);
            },
            content: function (options) {
                var year = options.date.getFullYear(),
                toDateString = this.toDateString;

                return view({
                    start: new DATE(year - year % 10 - 1, 0, 1),
                    min: new DATE(options.min.getFullYear(), 0, 1),
                    max: new DATE(options.max.getFullYear(), 0, 1),
                    setter: this.setDate,
                    build: function (date, idx) {
                        return {
                            value: date.getFullYear(),
                            ns: kendo.ns,
                            dateString: toDateString(date),
                            cssClass: idx === 0 || idx == 11 ? OTHERMONTHCLASS : ""
                        };
                    }
                });
            },
            first: function (date) {
                var year = date.getFullYear();
                return new DATE(year - year % 10, date.getMonth(), date.getDate());
            },
            last: function (date) {
                var year = date.getFullYear();
                return new DATE(year - year % 10 + 9, date.getMonth(), date.getDate());
            },
            compare: function (date1, date2) {
                return compare(date1, date2, 10);
            },
            setDate: function (date, value) {
                setDate(date, value, 1);
            },
            toDateString: function (date) {
                return date.getFullYear() + "/0/1";
            }
        },
        {
            name: CENTURY,
            title: function (date) {
                var start = date.getFullYear();

                start = start - start % 100;

                return start + "-" + (start + 99);
            },
            content: function (options) {
                var year = options.date.getFullYear(),
                minYear = options.min.getFullYear(),
                maxYear = options.max.getFullYear(),
                toDateString = this.toDateString;

                minYear = minYear - minYear % 10;
                maxYear = maxYear - maxYear % 10;

                if (maxYear - minYear < 10) {
                    maxYear = minYear + 9;
                }

                return view({
                    start: new DATE(year - year % 100 - 10, 0, 1),
                    min: new DATE(minYear, 0, 1),
                    max: new DATE(maxYear, 0, 1),
                    setter: this.setDate,
                    build: function (date, idx) {
                        var year = date.getFullYear();
                        return {
                            value: year + " - " + (year + 9),
                            ns: kendo.ns,
                            dateString: toDateString(date),
                            cssClass: idx === 0 || idx == 11 ? OTHERMONTHCLASS : ""
                        };
                    }
                });
            },
            first: function (date) {
                var year = date.getFullYear();
                return new DATE(year - year % 100, date.getMonth(), date.getDate());
            },
            last: function (date) {
                var year = date.getFullYear();
                return new DATE(year - year % 100 + 99, date.getMonth(), date.getDate());
            },
            compare: function (date1, date2) {
                return compare(date1, date2, 100);
            },
            setDate: function (date, value) {
                setDate(date, value, 10);
            },
            toDateString: function (date) {
                var year = date.getFullYear();
                return (year - year % 10) + "/0/1";
            }
        }]
    };

    function view(options) {
        var idx = 0,
            data,
            min = options.min,
            max = options.max,
            start = options.start,
            setter = options.setter,
            build = options.build,
            length = options.cells || 12,
            cellsPerRow = options.perRow || 4,
            content = options.content || cellTemplate,
            empty = options.empty || emptyCellTemplate,
            html = options.html || '<table class="k-content k-meta-view" cellspacing="0"><tbody><tr>';

        for (; idx < length; idx++) {
            if (idx > 0 && idx % cellsPerRow === 0) {
                html += "</tr><tr>";
            }

            data = build(start, idx);

            html += isInRange(start, min, max) ? content(data) : empty(data);

            setter(start, 1);
        }

        return html + "</tr></tbody></table>";
    }

    function compare(date1, date2, modifier) {
        var year1 = date1.getFullYear(),
            start = date2.getFullYear(),
            end = start,
            result = 0;

        if (modifier) {
            start = start - start % modifier;
            end = start - start % modifier + modifier - 1;
        }

        if (year1 > end) {
            result = 1;
        } else if (year1 < start) {
            result = -1;
        }

        return result;
    }

    function restrictValue(value, min, max) {
        var today = new DATE();

        today = new DATE(today.getFullYear(), today.getMonth(), today.getDate());

        if (value) {
            today = new DATE(value);
        }

        if (min > today) {
            today = new DATE(min);
        } else if (max < today) {
            today = new DATE(max);
        }
        return today;
    }

    function isInRange(date, min, max) {
        return +date >= +min && +date <= +max;
    }

    function shiftArray(array, idx) {
        return array.slice(idx).concat(array.slice(0, idx));
    }

    function setDate(date, value, multiplier) {
        value = value instanceof DATE ? value.getFullYear() : date.getFullYear() + multiplier * value;
        date.setFullYear(value);
    }

    function mousetoggle(e) {
        e.stopImmediatePropagation();
        $(this).toggleClass(HOVER, e.type == "mouseenter");
    }

    function prevent(e) {
        e.preventDefault();
    }

    function getCalendarInfo(culture) {
        return getCulture(culture).calendars.standard;
    }

    function normalize(options) {
        var start = views[options.start],
            depth = views[options.depth],
            culture = getCulture(options.culture);

        options.format = extractFormat(options.format || culture.calendars.standard.patterns.d);

        if (isNaN(start)) {
            start = 0;
            options.start = MONTH;
        }

        if (depth === undefined || depth > start) {
            options.depth = MONTH;
        }
    }

    function makeUnselectable(element) {
        if (isIE8) {
            element.find("*").attr("unselectable", "on");
        }
    }

    function inArray(date, dates) {
        for (var i = 0, length = dates.length; i < length; i++) {
            if (date === +dates[i]) {
                return true;
            }
        }
        return false;
    }

    function isEqualDatePart(value1, value2) {
        if (value1) {
            return value1.getFullYear() === value2.getFullYear() &&
                   value1.getMonth() === value2.getMonth() &&
                   value1.getDate() === value2.getDate();
        }

        return false;
    }

    calendar.isEqualDatePart = isEqualDatePart;
    calendar.makeUnselectable = makeUnselectable;
    calendar.restrictValue = restrictValue;
    calendar.isInRange = isInRange;
    calendar.normalize = normalize;
    calendar.viewsEnum = views;

    kendo.calendar = calendar;
})(jQuery);
(function ($, undefined) {

    var kendo = window.kendo,
    ui = kendo.ui,
    touch = kendo.support.touch,
    Widget = ui.Widget,
    parse = kendo.parseDate,
    keys = kendo.keys,
    template = kendo.template,
    DIV = "<div />",
    SPAN = "<span />",
    CLICK = (touch ? "touchend" : "click"),
    CLICK_DATEPICKER = CLICK + ".datepicker",
    OPEN = "open",
    CLOSE = "close",
    CHANGE = "change",
    FOCUSIN = "focusin",
    NAVIGATE = "navigate",
    DATEVIEW = "dateView",
    DISABLED = "disabled",
    DEFAULT = "k-state-default",
    FOCUSED = "",
    SELECTED = "k-state-selected",
    STATEDISABLED = "k-state-disabled",
    HOVER = "",
    HOVEREVENTS = "mouseenter mouseleave",
    MOUSEDOWN = (touch ? "touchstart" : "mousedown"),
    MIN = "min",
    MAX = "max",
    MONTH = "month",
    FIRST = "first",
    calendar = kendo.calendar,
    isInRange = calendar.isInRange,
    restrictValue = calendar.restrictValue,
    isEqualDatePart = calendar.isEqualDatePart,
    extend = $.extend,
    proxy = $.proxy,
    DATE = Date;

    function normalize(options) {
        var parseFormats = options.parseFormats;

        calendar.normalize(options);

        parseFormats = $.isArray(parseFormats) ? parseFormats : [parseFormats];
        parseFormats.splice(0, 0, options.format);

        options.parseFormats = parseFormats;
    }

    function preventDefault(e) {
        e.preventDefault();
    }

    var DateView = function (options) {
        var that = this,
            body = document.body,
            sharedCalendar = DatePicker.sharedCalendar;

        if (!sharedCalendar) {
            sharedCalendar = DatePicker.sharedCalendar = new ui.Calendar($(DIV).hide().appendTo(body));
            calendar.makeUnselectable(sharedCalendar.element);
        }

        that.calendar = sharedCalendar;
        that.options = options = options || {};
        that.popup = new ui.Popup($(DIV).addClass("k-calendar-container").appendTo(body), extend(options.popup, options, { name: "Popup" }));

        that._templates();

        that.value(options.value);
    };

    DateView.prototype = {
        _calendar: function () {
            var that = this,
                popup = that.popup,
                options = that.options,
                calendar = that.calendar,
                element = calendar.element;

            if (element.data(DATEVIEW) !== that) {

                element.appendTo(popup.element)
                       .data(DATEVIEW, that)
                       .undelegate(CLICK_DATEPICKER)
                       .delegate("td:has(.k-link)", CLICK_DATEPICKER, proxy(that._click, that))
                       .unbind(MOUSEDOWN)
                       .bind(MOUSEDOWN, preventDefault)
                       .show();

                calendar.unbind(CHANGE)
                        .bind(CHANGE, options);

                if (!touch) {
                    calendar.unbind(NAVIGATE)
                            .bind(NAVIGATE, proxy(that._navigate, that));
                }

                calendar.month = that.month;
                calendar.options.depth = options.depth;
                calendar.options.culture = options.culture;

                calendar._footer(that.footer);

                calendar.min(options.min);
                calendar.max(options.max);

                calendar.navigate(that._value, options.start);
                that.value(that._value);
            }
        },

        open: function () {
            var that = this;

            that._calendar();
            that.popup.open();
        },

        close: function () {
            this.popup.close();
        },

        min: function (value) {
            this._option(MIN, value);
        },

        max: function (value) {
            this._option(MAX, value);
        },

        toggle: function () {
            var that = this;

            that[that.popup.visible() ? CLOSE : OPEN]();
        },

        move: function (e) {
            var that = this,
                options = that.options,
                currentValue = new DATE(that._current),
                calendar = that.calendar,
                index = calendar._index,
                view = calendar._view,
                key = e.keyCode,
                value, prevent, method;

            if (key == keys.ESC) {
                that.close();
                return;
            }

            if (e.altKey) {
                if (key == keys.DOWN) {
                    that.open();
                    prevent = true;
                } else if (key == keys.UP) {
                    that.close();
                    prevent = true;
                }
                return;
            }

            if (!that.popup.visible() || calendar._table.parent().data("animating")) {
                return;
            }

            if (e.ctrlKey) {
                if (key == keys.RIGHT) {
                    calendar.navigateToFuture();
                    prevent = true;
                } else if (key == keys.LEFT) {
                    calendar.navigateToPast();
                    prevent = true;
                } else if (key == keys.UP) {
                    calendar.navigateUp();
                    prevent = true;
                } else if (key == keys.DOWN) {
                    that._navigateDown();
                    prevent = true;
                }
            } else {
                if (key == keys.RIGHT) {
                    value = 1;
                    prevent = true;
                } else if (key == keys.LEFT) {
                    value = -1;
                    prevent = true;
                } else if (key == keys.UP) {
                    value = index === 0 ? -7 : -4;
                    prevent = true;
                } else if (key == keys.DOWN) {
                    value = index === 0 ? 7 : 4;
                    prevent = true;
                } else if (key == keys.ENTER) {
                    that._navigateDown();
                    prevent = true;
                } else if (key == keys.HOME || key == keys.END) {
                    method = key == keys.HOME ? FIRST : "last";
                    currentValue = view[method](currentValue);
                    prevent = true;
                } else if (key == keys.PAGEUP) {
                    prevent = true;
                    calendar.navigateToPast();
                } else if (key == keys.PAGEDOWN) {
                    prevent = true;
                    calendar.navigateToFuture();
                }

                if (value || method) {
                    if (!method) {
                        view.setDate(currentValue, value);
                    }

                    that._current = currentValue = restrictValue(currentValue, options.min, options.max);
                    calendar._focus(currentValue);
                }
            }

            if (prevent) {
                e.preventDefault();
            }
        },

        value: function (value) {
            var that = this,
                calendar = that.calendar,
                options = that.options;
            that._value = value;
            that._current = new DATE(restrictValue(value, options.min, options.max));

            if (calendar.element.data(DATEVIEW) === that) {
                calendar._focus(that._current);
                calendar.value(value);
            }
        },

        _click: function (e) {
            if (e.currentTarget.className.indexOf(SELECTED) !== -1) {
                this.close();
            }
        },

        _navigate: function () {
            var that = this,
                calendar = that.calendar;

            that._current = new DATE(calendar._current);
            calendar._focus(calendar._current);
        },

        _navigateDown: function () {
            var that = this,
                calendar = that.calendar,
                currentValue = calendar._current,
                cell = calendar._table.find("." + FOCUSED),
                value = cell.children(":" + FIRST).attr(kendo.attr("value")).split("/");

            //Safari cannot create corretly date from "1/1/2090"
            value = new DATE(value[0], value[1], value[2]);

            if (!cell[0] || cell.hasClass(SELECTED)) {
                that.close();
                return;
            }

            calendar._view.setDate(currentValue, value);
            calendar.navigateDown(currentValue);
        },

        _option: function (option, value) {
            var that = this,
                options = that.options,
                calendar = that.calendar;

            options[option] = value;

            if (calendar.element.data(DATEVIEW) === that) {
                calendar[option](value);
            }
        },

        _templates: function () {
            var that = this,
                options = that.options,
                footer = options.footer,
                month = options.month || {},
                content = month.content,
                empty = month.empty;

            that.month = {
                content: template('<td#=data.cssClass#><a class="k-link" href="\\#" ' + kendo.attr("value") + '="#=data.dateString#" title="#=data.title#">' + (content || "#=data.value#") + '</a></td>', { useWithBlock: !!content }),
                empty: template("<td>" + (empty || "&nbsp;") + "</td>", { useWithBlock: !!empty })
            };

            if (footer !== false) {
                that.footer = template(footer || '#= kendo.toString(data,"D","' + options.culture + '") #', { useWithBlock: false });
            }
        }
    };

    DateView.normalize = normalize;

    kendo.DateView = DateView;

    var DatePicker = Widget.extend(/** @lends kendo.ui.DatePicker.prototype */{

        init: function (element, options) {
            var that = this;

            Widget.fn.init.call(that, element, options);
            element = that.element;
            options = that.options;
            //add focusin 
            options.format = (($("label[for='dateFormat']").text() != undefined && $("label[for='dateFormat']").text() != "") ? $("label[for='dateFormat']").text() : options.format);
            normalize(options);
            if (options.wrap) {
                options.placeholder = options.placeholder || element.attr("placeholder");
                that._wrapper();

                that.dateView = new DateView(extend({}, options, {
                    anchor: that.wrapper,
                    change: function () {
                        // calendar is the current scope
                        that._change(this.value());
                        that.close();
                    },
                    close: function (e) {
                        if (that.trigger(CLOSE)) {
                            e.preventDefault();
                        }
                    },
                    open: function (e) {
                        if (that.trigger(OPEN)) {
                            e.preventDefault();
                        }
                    }
                }));

                that._icon();

                if (!touch) {
                    element[0].type = "text";
                }

                element
                    .addClass("k-input")
                    .attr("sqlDateValue", "")
                    .attr("formattedValue", "")
                    .css("width", options.width)
                    .bind({
                        keydown: proxy(that._keydown, that),
                        focus: function (e) {
                            if (this.value == that.options.placeholder) {
                                this.value = "";
                            }
                            that._inputWrapper.addClass(FOCUSED);
                        },
                        blur: proxy(that._blur, that)
                    })
                    .closest("form")
                            .bind("reset", function () {
                                that.value(element[0].defaultValue);
                            });
                //Added by Amit Yadav 
                element.bind('keyup', function (e) {
                    if ((e.keyCode == 8 || e.keyCode == 46) && $(element).val().length == 1) {
                        that._blur();
                    }
                });
                that.enable(!element.is('[disabled]'));
            }
            var date = parse((that.element.val() || options.value), options.format, "in-IN");

            if (options.wrap) {
                that.element.css('color', 'black');
                if (date != null) {
                    that.element.val(date ? kendo.toString(date, options.format, options.culture) : value);
                    if (that.element.val() == "" || date == null) {
                        that.element.val(that.options.placeholder);
                        that.element.attr("sqlDateValue", "");
                        that.element.attr("formattedValue", "");
                    }
                    else {
                        that.element.attr("sqlDateValue", kendo.toString(date, options.format, options.culture));
                        that.element.attr("formattedValue", kendo.toString(date, options.format, options.culture));
                    }
                }
                that.value(that.element.val() || options.value);
                //that.value("");
                if (that.element.val() == that.options.placeholder) {
                    that.element.css('color', 'gray');
                }
            }
            else {
                that.element.css('color', 'gray');
                if (date != null) {
                    that.element.text(date ? kendo.toString(date, options.format, options.culture) : value);
                    if (that.element.text() == "" || date == null) {
                        that.element.text(that.options.placeholder);
                        that.element.attr("sqlDateValue", "");
                        that.element.attr("formattedValue", "");
                    }
                    else {
                        that.element.attr("sqlDateValue", kendo.toString(date, "MM/dd/yyyy", options.culture));
                        that.element.attr("formattedValue", kendo.toString(date, options.format, options.culture));
                    }
                }
            }
            kendo.notify(that);

        },
        events: [

        OPEN,
        CLOSE,
        CHANGE,
        FOCUSIN
        ],
        options: {
            name: "DatePicker",
            value: kendo.toString(new Date(), "dd-MMM-yyyy"),
            footer: "",
            format: "dd-MMM-yyyy",
            culture: "",

            placeholder: "",
            parseFormats: [],
            min: new Date(2010, 0, 1),
            max: new Date(2099, 11, 31),
            start: MONTH,
            depth: MONTH,
            animation: {},
            month: {},
            wrap: true
        },

        setOptions: function (options) {
            var that = this;

            Widget.fn.setOptions.call(that, options);

            normalize(that.options);

            extend(that.dateView.options, that.options);
        },


        enable: function (enable) {
            var that = this,
                icon = that._dateIcon.unbind(CLICK + " " + MOUSEDOWN),
                wrapper = that._inputWrapper.unbind(HOVEREVENTS),
                element = that.element;

            if (enable === false) {
                wrapper
                    .removeClass(DEFAULT)
                    .addClass(STATEDISABLED);

                element.attr(DISABLED, DISABLED);
            } else {
                wrapper
                    .addClass(DEFAULT)
                    .removeClass(STATEDISABLED)
                    .bind(HOVEREVENTS, that._toggleHover);

                element
                    .removeAttr(DISABLED);

                icon.bind(CLICK, proxy(that._click, that))
                    .bind(MOUSEDOWN, preventDefault);
            }
        },


        open: function () {
            this.dateView.open();
        },


        close: function () {
            this.dateView.close();
        },


        min: function (value) {
            return this._option(MIN, value);
        },


        max: function (value) {
            return this._option(MAX, value);
        },


        value: function (value) {
            var that = this;

            if (value === undefined) {
                return that._value;
            }

            that._old = that._update(value);
        },

        sqlDateValue: function () {
            var that = this;

            return new Date(that.element.attr("sqlDateValue"));
        },

        _toggleHover: function (e) {
            if (!touch) {
                $(e.currentTarget).toggleClass(HOVER, e.type === "mouseenter");
            }
        },

        _blur: function () {
            var that = this;

            that.close();
            that._change(that.element.val());
            that._inputWrapper.removeClass(FOCUSED);
        },

        _click: function () {
            var that = this,
                element = that.element;
            if (element.val() == that.options.placeholder) {
                element.val("");
            }
            that.dateView.toggle();

            if (!touch && element[0] !== document.activeElement) {
                element.focus();
            }
        },

        _change: function (value) {
            var that = this;

            value = that._update(value);

            if (+that._old != +value) {
                that._old = value;
                that.trigger(CHANGE);

                // trigger the DOM change event so any subscriber gets notified
                that.element.trigger(CHANGE);
            }
        },

        _keydown: function (e) {
            var that = this,
                dateView = that.dateView;

            if (!dateView.popup.visible() && e.keyCode == keys.ENTER) {
                that._change(that.element.val());
            } else {
                dateView.move(e);
            }
        },

        _icon: function () {
            var that = this,
                element = that.element,
                icon;

            icon = element.next("span.k-select");

            if (!icon[0]) {
                icon = $('<span unselectable="on" class="k-select"><span unselectable="on" class="k-icon k-i-calendar">select</span></span>').insertAfter(element);
            }

            that._dateIcon = icon;
        },

        _option: function (option, value) {
            var that = this,
                options = that.options;

            if (value === undefined) {
                return options[option];
            }

            value = parse(value, options.parseFormats, options.culture);

            if (!value) {
                return;
            }

            options[option] = new DATE(value);
            that.dateView[option](value);
        },

        _update: function (value) {
            var that = this,
                options = that.options,
                min = options.min,
                max = options.max,
                date = parse(value, options.parseFormats, options.culture);

            if (+date === +that._value && date != null) {
                return date;
            }

            if (date !== null && isEqualDatePart(date, min)) {
                date = restrictValue(date, min, max);
            } else if (!isInRange(date, min, max)) {
                date = null;
            }

            that._value = date;
            that.dateView.value(date);
            that.element.val(date ? kendo.toString(date, options.format, options.culture) : value);
            if (that.element.val() == "" || date == null) {
                that.element.val(that.options.placeholder);
                that.element.attr("sqlDateValue", "");
                that.element.attr("formattedValue", "");
            }
            else {
                that.element.attr("sqlDateValue", kendo.toString(date, "yyyy-MM-dd", options.culture));
                that.element.attr("formattedValue", kendo.toString(date, options.format, options.culture));
            }
            return date;
        },

        _wrapper: function () {
            var that = this,
                element = that.element,
                wrapper;

            wrapper = element.parents(".k-datepicker");

            if (!wrapper[0]) {
                wrapper = element.wrap(SPAN).parent().addClass("k-picker-wrap k-state-default").css("width", that.options.width);
                wrapper = element.parent();
            }

            wrapper[0].style.cssText = element[0].style.cssText;
            element.css({
                width: "100%",
                height: element[0].style.height
            });

            that.wrapper = wrapper.addClass("k-widget k-datepicker k-header").addClass(element[0].className);
            that._inputWrapper = $(wrapper[0].firstChild);
            //            that.wrapper = wrapper;//.addClass("k-datepicker");
            //            that._inputWrapper = $(wrapper[0].firstChild);
        }
    });

    ui.plugin(DatePicker);

})(jQuery);
(function ($, undefined) {

    var kendo = window.kendo,
        support = kendo.support,
        placeholderSupported = support.placeholder,
        ui = kendo.ui,
        keys = kendo.keys,
        DataSource = kendo.data.DataSource,
        List = ui.List,
        CHANGE = "change",
        DEFAULT = "k-state-default",
        DISABLED = "disabled",
        FOCUSED = "k-state-focused",
        SELECTED = "k-state-selected",
        STATEDISABLED = "k-state-disabled",
        HOVER = "k-state-hover",
        HOVEREVENTS = "mouseenter mouseleave",
        caretPosition = List.caret,
        selectText = List.selectText,
        proxy = $.proxy;

    function indexOfWordAtCaret(caret, text, separator) {
        return separator ? text.substring(0, caret).split(separator).length - 1 : 0;
    }

    function wordAtCaret(caret, text, separator) {
        return text.split(separator)[indexOfWordAtCaret(caret, text, separator)];
    }

    function replaceWordAtCaret(caret, text, word, separator) {
        var words = text.split(separator);

        words.splice(indexOfWordAtCaret(caret, text, separator), 1, word);

        if (separator && words[words.length - 1] !== "") {
            words.push("");
        }

        return words.join(separator);
    }

    function moveCaretAtEnd(element) {
        var length = element.value.length;

        selectText(element, length, length);
    }

    var AutoComplete = List.extend/** @lends kendo.ui.AutoComplete.prototype */({

        init: function (element, options) {
            var that = this, wrapper;

            options = $.isArray(options) ? { dataSource: options } : options;

            List.fn.init.call(that, element, options);

            element = that.element;
            options = that.options;

            options.placeholder = options.placeholder || element.attr("placeholder");
            if (placeholderSupported) {
                element.attr("placeholder", options.placeholder);
            }

            that._wrapper();

            that._accessors();

            that._dataSource();

            element[0].type = "text";

            wrapper = that.wrapper;
            if (that.options.separator != undefined) {
                that.options.minLength = 1;
                var dataValid = element.attr("data-valid");
                var dataValidMsg = element.attr("data-valid-msg");
                if (dataValid != undefined) {
                    that.options.valueControlID.attr("explicitValid", "1");
                }
            }
            element
                .attr("autocomplete", "off")
                .addClass("k-input")
                .css("text-transform", "uppercase")
                .bind({
                    keydown: proxy(that._keydown, that),
                    //Added By Amit Yadav
                    paste: function () {
                        setTimeout(function () {
                            that.search(that.value());
                        }, 0);
                    },
                    focus: function () {
                        that._prev = that.value();
                        that._placeholder(false);
                        //wrapper.addClass(FOCUSED);
                        clearTimeout(that._bluring);
                    },
                    blur: function () {
                        if (that.element.val() != that.options.placeholder) {
                            that._valid();
                        }


                        //                        if(that.element.val()==""){                        
                        //                            if(options.valueControlID!="" || options.valueControlID!=undefined)
                        //                                $(options.valueControlID).val("");
                        //                        } 

                        if (that.options.separator == undefined) {
                            if (that.element.val() == "") {
                                if (options.valueControlID != "" || options.valueControlID != undefined)
                                    $(options.valueControlID).val("");
                            }
                        }

                        that._change();
                        that._placeholder();
                    },
                    change: function () {
                        that._setValue();
                    }
                });

            that._enable();

            that._popup();

            that._old = that.value();

            that._placeholder();

            kendo.notify(that);
        },

        options: {
            name: "AutoComplete",
            suggest: false,
            template: "",
            filterField: "",
            rightAlign: false,
            dataTextField: "",
            dataValueField: "",
            valueControlID: "",
            minLength: 0,
            delay: 200,
            height: 200,
            filter: "startswith",
            ignoreCase: true,
            highlightFirst: true,
            separator: null,
            placeholder: "",
            animation: {},
            addOnFunction: null,
            newAllowed: false,
            confirmOnAdd: true,
            IsChangeOnBlankValue: false
        },
        setDefaultValue: function (key, value) {
            this._key = key;
            this._value = value;
            this.key(key);
            this.value(value);
            this.options.defaultValue = true;
        },
        setAddOnFunction: function (cntrlId) {
            if (this.options.addOnFunction != undefined && this.options.addOnFunction !== null) {
                this.options.textControlId = "Text_" + cntrlId;
                this.options.valueControlId = cntrlId;
                this.options.addOnFunction(this.options.textControlId, this.value(), this.options.valueControlId, this.key());
            }
        },
        _dataSource: function () {
            var that = this;

            if (that.dataSource && that._refreshHandler) {
                that.dataSource.unbind(CHANGE, that._refreshHandler);
            } else {
                that._refreshHandler = proxy(that.refresh, that);
            }

            that.dataSource = DataSource.create(that.options.dataSource)
                .bind(CHANGE, that._refreshHandler);
        },

        setDataSource: function (dataSource) {
            this.options.dataSource = dataSource;

            this._dataSource();
        },

        events: [

        "open",

        "close",

               CHANGE,

               "select",
               "dataBinding",
               "dataBound"
        ],
        setOptions: function (options) {
            List.fn.setOptions.call(this, options);

            this._template();
            this._accessors();
        },

        enable: function (enable) {
            var that = this,
                element = that.element,
                wrapper = that.wrapper;

            if (enable === false) {
                wrapper
                    .removeClass(DEFAULT)
                    .addClass(STATEDISABLED)
                    .unbind(HOVEREVENTS);
                wrapper.find(".k-i-arrow-s").unbind("click");

                element.attr(DISABLED, DISABLED);
            } else {
                wrapper
                    .removeClass(STATEDISABLED)
                    .addClass(DEFAULT)
                    .bind(HOVEREVENTS, that._toggleHover);

                element
                    .removeAttr(DISABLED);
                wrapper.find(".k-i-arrow-s")
                    .bind({
                        "click": function () {
                            current = that._current,
                            visible = false;
                            that._search(0);
                        }
                    });
            }
        },


        close: function () {
            var that = this;
            that._setValue();
            that._current = null;
            that.popup.close();
            return;
        },


        refresh: function () {
            var that = this,
            ul = that.ul[0],
            popup = that.popup,
            options = that.options,
            data = that._data(),
            length = data.length;

            that.trigger("dataBinding");

            ul.innerHTML = kendo.render(that.template, data);

            that._height(length);
            //Updated by Amit Yadav
            if (length <= 2) {
                if (options.highlightFirst) {
                    that.current($(ul.firstChild));
                }

                if (options.suggest) {
                    that.suggest($(ul.firstChild));
                }
            }

            if (that._open) {
                that._open = false;
                popup[length ? "open" : "close"]();
            }

            if (that._touchScroller) {
                that._touchScroller.reset();
            }

            that._makeUnselectable();

            that.trigger("dataBound");
        },


        select: function (li) {
            this._select(li);
        },


        search: function (word, strVal) {
            var that = this,
            options = that.options,
            ignoreCase = options.ignoreCase,
            separator = options.separator,
            length;
            if (strVal == undefined) {
                word = word || that.value();
            }
            else {
                word = "";
            }

            that._current = null;

            clearTimeout(that._typing);

            if (separator) {
                word = wordAtCaret(caretPosition(that.element[0]), word, separator);
            }

            length = word.length;

            if (!length && length < 0) {
                that.popup.close();
            } else if (length >= (strVal == "0" ? 0 : that.options.minLength)) {
                that._open = true;

                that.dataSource.filter({
                    value: ignoreCase ? word.toLowerCase() : word,
                    operator: options.filter,
                    field: options.filterField,
                    ignoreCase: ignoreCase
                });
            }
        },


        suggest: function (word) {
            var that = this,
                key = that._last,
                value = that.value(),
                element = that.element[0],
                caret = caretPosition(element),
                separator = that.options.separator,
                words = value.split(separator),
                wordIndex = indexOfWordAtCaret(caret, value, separator),
                selectionEnd = caret,
                idx;

            if (key == keys.BACKSPACE || key == keys.DELETE) {
                that._last = undefined;
                return;
            }

            word = word || "";

            if (typeof word !== "string") {
                idx = List.inArray(word[0], that.ul[0]);

                if (idx > -1) {
                    word = that._text(that._data()[idx]);
                } else {
                    word = "";
                }
            }

            if (caret <= 0) {
                caret = value.toLowerCase().indexOf(word.toLowerCase()) + 1;
            }

            idx = value.substring(0, caret).lastIndexOf(separator);
            idx = idx > -1 ? caret - (idx + separator.length) : caret;
            value = words[wordIndex].substring(0, idx);

            if (word) {
                idx = word.toLowerCase().indexOf(value.toLowerCase());
                if (idx > -1) {
                    word = word.substring(idx + value.length);

                    selectionEnd = caret + word.length;

                    value += word;
                }

                if (separator && words[words.length - 1] !== "") {
                    words.push("");
                }

            }

            words[wordIndex] = value;

            that.value(words.join(separator || ""));

            selectText(element, caret, selectionEnd);
        },


        value: function (value) {
            var that = this,
                element = that.element[0];

            if (value !== undefined) {
                element.value = value;
                that._placeholder();
            } else {
                value = element.value;

                if (element.className.indexOf("k-readonly") > -1) {
                    if (value === that.options.placeholder) {
                        return "";
                    } else {
                        return value;
                    }
                }

                return value;
            }
        },

        key: function (value) {
            var that = this,
                keyElement = that.options.valueControlID[0];

            if (value !== undefined) {
                keyElement.value = value;
                that._placeholder();
            } else {
                value = keyElement.value;

                if (keyElement.className.indexOf("k-readonly") > -1) {
                    if (value === that.options.placeholder) {
                        return "";
                    } else {
                        return value;
                    }
                }

                return value;
            }
        },
        _accept: function (li) {
            var that = this;

            that._focus(li);
            moveCaretAtEnd(that.element[0]);
        },

        _keydown: function (e) {
            var that = this,
                ul = that.ul[0],
                key = e.keyCode,
                current = that._current,
                visible = that.popup.visible();

            that._last = key;

            if (key === keys.DOWN) {
                //Updated by Amit Yadav
                if (that.popup.visible()) {
                    that._move(current ? current.next() : $(ul.firstChild));
                }
                else {
                    that._search();
                }
                //if (visible) {
                //    that._move(current ? current.next() : $(ul.firstChild));
                //}
                e.preventDefault();
            } else if (key === keys.UP) {
                if (visible) {
                    that._move(current ? current.prev() : $(ul.lastChild));
                }
                e.preventDefault();
            }
            else if (key === 222) {
                e.preventDefault();
            }
            else if (key === keys.ENTER || key === keys.TAB || key === 16) {

                if (that.popup.visible()) {
                    e.preventDefault();
                }

                that._accept(current);
                if (that.options.addOnFunction !== null) {
                    that.options.addOnFunction(that.element.attr("id"), that.value(), that.options.valueControlID.attr("id"), that.key());
                }
            } else if (key === keys.ESC) {
                that.close();
            } else {
                that._search();
            }
        },

        _move: function (li) {
            var that = this;

            li = li[0] ? li : null;

            that.current(li);

            if (that.options.suggest) {
                that.suggest(li);
            }
        },

        _placeholder: function (show) {
            if (placeholderSupported) {
                return;
            }

            var that = this,
                element = that.element,
                placeholder = that.options.placeholder,
                value;

            if (placeholder) {
                value = element.val();

                if (show === undefined) {
                    show = !value;
                }

                if (!show) {
                    if (value !== placeholder) {
                        placeholder = value;
                    } else {
                        placeholder = "";
                    }
                }

                if (value === that._old && !show) {
                    return;
                }

                element.toggleClass("k-readonly", show)
                       .val(placeholder);
            }
        },

        _search: function (strVal) {
            var that = this;
            clearTimeout(that._typing);

            that._typing = setTimeout(function () {
                if (that._prev !== that.value() || that._prev == that.options.placeholder) {
                    that._prev = (that._prev == that.options.placeholder ? "" : that.value());
                    that.search(undefined, strVal);
                }
                else {
                    if ((that._prev == that.value() && that._prev == "") || strVal != undefined) {
                        that.search(null, strVal);
                    }
                }
            }, that.options.delay);
        },

        _select: function (li) {
            var that = this,
                separator = that.options.separator,
                data = that._data(),
                text,
                idx;

            li = $(li);

            if (li[0] && !li.hasClass(SELECTED)) {
                idx = List.inArray(li[0], that.ul[0]);

                if (idx > -1) {
                    data = data[idx];
                    text = that._text(data);

                    if (separator) {
                        text = replaceWordAtCaret(caretPosition(that.element[0]), that.value(), text, separator);
                    }
                    //var idValue=that._value(data);
                    that.value(text);
                    if (that.options.valueControlID != "" || that.options.valueControlID != undefined)
                        $(that.options.valueControlID).val(data[that.options.dataValueField]);
                    that.current(li.addClass(SELECTED));
                    if (that.options.addOnFunction !== null) {
                        that.options.addOnFunction(that.element.attr("id"), that.value(), that.options.valueControlID.attr("id"), that.key());
                    }
                }
            }
        },

        _toggleHover: function (e) {
            //            if (!support.touch) {
            //                $(e.currentTarget).toggleClass(HOVER, e.type === "mouseenter");
            //            }
        },

        _wrapper: function () {
            var that = this,
                element = that.element,
                DOMelement = element[0],
                wrapper;

            wrapper = element.parent();

            if (!wrapper.is("span.k-widget")) {
                if ($(element).hasClass("k-input")) {
                    element.unwrap(".k-widget k-combobox k-header");
                    element.unwrap(".k-dropdown-wrap k-state-default");
                    $(element).next().remove();
                }
                wrapper = element.wrap("<span class='k-widget k-combobox k-header'/>").wrap("<span class='k-dropdown-wrap k-state-default' unselectable='on'/>").parent();

                var icon = $('<span class="k-select" unselectable="on"><span class="k-icon k-i-arrow-s" unselectable="on" style="cursor:pointer;">select</span></span>').insertAfter(element);
                icon.find(".k-i-arrow-s")
                    .bind({
                        "click": function () {
                            current = that._current,
                            visible = false;
                            that._search(0);
                        }
                    });
            }

            wrapper[0].style.cssText = DOMelement.style.cssText;
            element.css({
                width: "100%",
                height: DOMelement.style.height
            });

            that._focused = that.element;
            that.wrapper = wrapper;

            if (that.options.separator != undefined) {
                element.closest("td").append("<div style='display:none;overflow: auto;' id='divMulti" + that.element[0].name.replace('Text_', '') + "'><ul style='padding:3px 2px 2px 0px;margin-top:0px;'><li class='k-button' style='display:none;margin-bottom:10px !important;'><input type='hidden' id='Multi_" + that.element[0].name.replace('Text_', '') + "' name='Multi_" + that.element[0].name.replace('Text_', '') + "'/><span style='display:none;' id='FieldKeyValues" + that.element[0].name.replace('Text_', '') + "' name='FieldKeyValues" + that.element[0].name.replace('Text_', '') + "'></span></li></ul></div>");
            }
        },

        //Edit By Ramakant 13-June-2013

        _valid: function () {
            var that = this,
                separator = that.options.separator,
                dataSource = that.options.dataSource,
                data,
                text,
                newAllow = that.options.newAllowed,
                confirmOnAdd = that.options.confirmOnAdd,
                valid = false,
                idx;
            if (dataSource.length == undefined)
                dataSource = that.options.dataSource._data;
            if (that.value() != "") {
                if (separator == undefined) {
                    for (idx = 0; idx < dataSource.length; idx++) {
                        data = dataSource[idx];
                        text = that._text(data);

                        if (separator) {
                            text = replaceWordAtCaret(caretPosition(that.element[0]), that.value(), text, separator);
                        }
                        //Updated By Amit Yadav
                        if (that.value().toUpperCase() == text.toUpperCase() && that.key() == data.Key) {
                            valid = true;
                            break;
                        }
                    }
                    if (valid) {
                        that.value(that.value().toUpperCase());
                        if (that.options.valueControlID != "" || that.options.valueControlID != undefined)
                            $(that.options.valueControlID).val(data[that.options.dataValueField]);
                    }
                    else {
                        if (dataSource.length == 0) {
                            that.value(that._prev);
                            if (that.options.valueControlID != "" || that.options.valueControlID != undefined)
                                $(that.options.valueControlID).val($(that.options.valueControlID).val());
                        }
                        else if (newAllow) {
                            var cnt = true;

                            if (confirmOnAdd) {
                                cnt = confirm("'" + that._prev.replace(" -[NEW]", "").toUpperCase() + "' is not exist in our system. Do you wish to create this?");
                            }
                            if (cnt) {
                                that.value(that._prev.replace(" -[NEW]", "").toUpperCase() + " -[NEW]");
                                if (that.options.valueControlID != "" || that.options.valueControlID != undefined)
                                    $(that.options.valueControlID).val("0");
                            }
                        } else {
                            that.value("");
                            if (that.options.valueControlID != "" || that.options.valueControlID != undefined)
                                $(that.options.valueControlID).val("");
                        }
                    }
                }
                else {
                    var textArray = that.value().split(separator);
                    var count = 0;
                    var multiKey = "";
                    var multiText = "";

                    for (count = 0; count < textArray.length; count++) {
                        if (textArray[count] != "") {
                            for (idx = 0; idx < dataSource.length; idx++) {
                                data = dataSource[idx];
                                text = that._text(data);

                                if (separator) {
                                    text = replaceWordAtCaret(caretPosition(that.element[0]), textArray[count], text, separator);
                                }
                                //var idValue=that._value(data);
                                if (text.toUpperCase().indexOf(textArray[count].toUpperCase()) == 0) {
                                    valid = true;

                                    if (multiKey.indexOf(data[that.options.dataValueField]) > -1) {
                                        break;
                                    }
                                    else {
                                        multiKey = multiKey + (multiKey == "" ? "" : ",") + data[that.options.dataValueField];
                                        multiText = multiText + (multiText == "" ? "" : "") + text;
                                        break;
                                    }
                                }
                            }
                        }
                    }

                    if (multiKey != "") {
                        //that.value(text);
                        that.value(multiText);
                        if (that.options.valueControlID != "" || that.options.valueControlID != undefined)
                            $(that.options.valueControlID).val(multiKey);
                    }
                    else {
                        that.value("");
                        if (that.options.valueControlID != "" || that.options.valueControlID != undefined)
                            $(that.options.valueControlID).val("");
                    }
                }
            }
            else if (newAllow && that._prev != "") {
                var cnt = true;

                if (confirmOnAdd) {
                    cnt = confirm("'" + that._prev.replace(" -[NEW]", "").toUpperCase() + "' is not exist in our system. Do you wish to create this?");
                }
                if (cnt) {
                    that.value(that._prev.replace(" -[NEW]", "").toUpperCase() + " -[NEW]");
                    if (that.options.valueControlID != "" || that.options.valueControlID != undefined)
                        $(that.options.valueControlID).val("0");
                }
                else {
                    that.value("");
                    if (that.options.valueControlID != "" || that.options.valueControlID != undefined)
                        $(that.options.valueControlID).val("");
                }
            }

            if (that.options.addOnFunction !== null) {
                that.options.addOnFunction(that.element.attr("id"), that.value(), that.options.valueControlID.attr("id"), that.key());
            }
        },


        _setValue: function () {
            var that = this,
                separator = that.options.separator,
                dataSource = that.options.dataSource,
                data,
                text,
                valid = false,
                idx;
            if (dataSource.length == undefined)
                dataSource = that.options.dataSource._data;
            if (that.value() != "") {
                if (separator == undefined) {
                    for (idx = 0; idx < dataSource.length; idx++) {
                        data = dataSource[idx];
                        text = that._text(data);

                        if (separator) {
                            text = replaceWordAtCaret(caretPosition(that.element[0]), that.value(), text, separator);
                        }

                        if (text.trim().toUpperCase() == that.value().trim().toUpperCase() && that.key() == data.Key) {
                            //if (text.toUpperCase().indexOf(that.value().toUpperCase()) == 0) {
                            valid = true;
                            break;
                        }
                    }
                    if (valid) {
                        that.value(text);
                        if (that.options.valueControlID != "" || that.options.valueControlID != undefined)
                            $(that.options.valueControlID).val(data[that.options.dataValueField]);
                    }
                    else {
                        if (dataSource.length == 0) {
                            that.value(that._prev);
                            if (that.options.valueControlID != "" || that.options.valueControlID != undefined)
                                $(that.options.valueControlID).val($(that.options.valueControlID).val());
                            if (that._typing > 0) {
                                that.value("");
                            }
                        } else {
                            that.value("");
                            that.popup.close();
                            if (that.options.valueControlID != "" || that.options.valueControlID != undefined)
                                $(that.options.valueControlID).val("");
                        }
                    }
                }
                else {
                    var textArray = that.value().split(separator);
                    var count = 0;
                    var multiKey = "";
                    var multiText = "";

                    for (count = 0; count < textArray.length; count++) {
                        if (textArray[count] != "") {
                            for (idx = 0; idx < dataSource.length; idx++) {
                                data = dataSource[idx];
                                text = that._text(data);

                                if (separator) {
                                    text = replaceWordAtCaret(caretPosition(that.element[0]), textArray[count], text, separator);
                                }
                                //var idValue=that._value(textArray[count]);
                                if (text.toUpperCase() == that.value().toUpperCase()) {
                                    valid = true;

                                    if (multiKey.indexOf(data[that.options.dataValueField]) > -1) {
                                        break;
                                    }
                                    else {
                                        multiKey = multiKey + (multiKey == "" ? "" : ",") + data[that.options.dataValueField];
                                        multiText = multiText + (multiText == "" ? "" : "") + text;
                                        break;
                                    }
                                }
                            }
                        }
                    }

                    if (multiKey != "") {
                        that.value("");
                        var lControlName = that.element[0].name.replace('Text_', '');
                        $("div[id='divMulti" + lControlName + "']").show();
                        //Added by Amit Yadav
                        var str = $("div[id='divMulti" + lControlName + "']").find("span[name^='FieldKeyValues" + lControlName + "']").text();
                        if (str.match(new RegExp("(?:^|,)" + multiKey + "(?:,|$)"))) {
                            ShowMessage("error", "", "Selected item \"" + multiText.replace(',', '') + "\" already exists");
                        }
                        else {
                            var i = that.element.closest("td").find("li").length;

                            i = i + 1;

                            if (i == 2) {
                                if (that.options.rightAlign) {
                                    $("div[id='divMulti" + lControlName + "']").find("ul").append("<li class='k-button' style='margin-right:3px;margin-bottom:3px;'><span>" + multiText.replace(',', '') + "</span><span id='" + multiKey + "' class='k-icon k-delete'></span></li>");
                                } else {
                                    $("div[id='divMulti" + lControlName + "']").find("ul").prepend("<li class='k-button' style='margin-right:3px;margin-bottom:3px;'><span>" + multiText.replace(',', '') + "</span><span id='" + multiKey + "' class='k-icon k-delete'></span></li>");
                                }
                                $("div[id='divMulti" + lControlName + "']").find("span[id^='FieldKeyValues" + lControlName + "']").text(multiKey);
                                if (that.options.valueControlID != "" || that.options.valueControlID != undefined)
                                    $(that.options.valueControlID).val(multiKey);
                            }
                            else {
                                if (that.options.rightAlign) {
                                    $("div[id='divMulti" + lControlName + "']").find("ul").append("<li class='k-button' style='margin-right:3px;margin-bottom:3px;'><span>" + multiText.replace(',', '') + "</span><span id='" + multiKey + "' class='k-icon k-delete'></span></li>");
                                } else {
                                    $("div[id='divMulti" + lControlName + "']").find("ul").prepend("<li class='k-button' style='margin-right:3px;margin-bottom:3px;'><span>" + multiText.replace(',', '') + "</span><span id='" + multiKey + "' class='k-icon k-delete'></span></li>");
                                }

                                var lPreviousKey = $("div[id='divMulti" + lControlName + "']").find("span[name^='FieldKeyValues" + lControlName + "']").text();
                                lPreviousKey = lPreviousKey + "," + multiKey;
                                if (that.options.valueControlID != "" || that.options.valueControlID != undefined)
                                    $(that.options.valueControlID).val(lPreviousKey);
                                $("div[id='divMulti" + lControlName + "']").find("span[name^='FieldKeyValues" + lControlName + "']").text(lPreviousKey);
                            }

                            $("div[id='divMulti" + lControlName + "']").find("span[id='" + multiKey + "'].k-delete").click(function (e) {
                                //Added By Amit Yadav Delete Callback
                                var divId = "divMulti" + lControlName;
                                var textboxid = "Text_" + lControlName;
                                AutoCompleteDeleteCallBack(e, divId, textboxid);

                                $(this).parent().remove();

                                var arr = $("div[id='divMulti" + lControlName + "']").find("span[name^='FieldKeyValues" + lControlName + "']").text().split(',').filter(function (n) { return n != '' });
                                var idx = arr.indexOf($(this)[0].id);
                                arr.splice(idx, 1);

                                $("div[id='divMulti" + lControlName + "']").find("span[name^='FieldKeyValues" + lControlName + "']").text(arr.join(','));
                                $("div[id='divMulti" + lControlName + "']").find("input:hidden[name^='Multi_" + that.element[0].name.replace('Text_', '') + "']").val(arr.join(','));
                                if (that.options.valueControlID != "" || that.options.valueControlID != undefined)
                                    $(that.options.valueControlID).val(arr.join(','));
                                if ($(that.options.valueControlID).val() == "")
                                    $("div[id='divMulti" + lControlName + "']").hide();
                            });

                            $("div[id='divMulti" + lControlName + "']").find("input:hidden[name^='Multi_" + that.element[0].name.replace('Text_', '') + "']").val($("div[id='divMulti" + lControlName + "']").find("span[name^='FieldKeyValues" + lControlName + "']").text());

                            if (i > 0 && $('#' + that.element[0].name.replace('Text_', '')).attr('required') == 'required') {
                                $('#' + that.element[0].name.replace('Text_', '')).removeAttr('required');
                            }
                        }
                    }
                    else {
                        that.value("");
                        //if (that.options.valueControlID != "" || that.options.valueControlID != undefined)
                        //    $(that.options.valueControlID).val("");
                    }
                }
            }
        }
    });


    ui.plugin(AutoComplete);
})(jQuery);


(function ($, undefined) {

    var kendo = window.kendo,
        ui = kendo.ui,
        Select = ui.Select,
        os = kendo.support.mobileOS,
        ATTRIBUTE = "disabled",
        CHANGE = "change",
        SELECT = "select",
        FOCUSED = "k-state-focused",
        DEFAULT = "k-state-default",
        DISABLED = "k-state-disabled",
        SELECTED = "k-state-selected",
        TABINDEX = "tabIndex",
        HOVEREVENTS = "mouseenter mouseleave",
        proxy = $.proxy;

    var DropDownList = Select.extend( /** @lends kendo.ui.DropDownList.prototype */ {

        init: function (element, options) {
            var that = this,
                index = options && options.index,
                optionLabel, useOptionLabel, text;

            options = $.isArray(options) ? { dataSource: options } : options;

            Select.fn.init.call(that, element, options);

            options = that.options;
            element = that.element.focus(function () {
                that.wrapper.focus();
            });

            that._reset();

            that._word = "";

            that._wrapper();

            that._span();

            that._popup();

            that._mobile();

            that._accessors();

            that._dataSource();

            that._enable();

            that._cascade();

            that.selectedIndex = -1;

            if (index !== undefined) {
                options.index = index;
            }

            if (options.autoBind) {
                that._selectItem();
            } else {
                text = options.text;
                if (!text) {
                    optionLabel = that._optionLabelText(options.optionLabel),
                    useOptionLabel = optionLabel && options.index === 0;

                    if (element.is(SELECT)) {
                        if (useOptionLabel) {
                            text = optionLabel;
                        } else {
                            text = element.children(":selected").text();
                        }
                    } else if (!element[0].value && useOptionLabel) {
                        text = optionLabel;
                    }
                }
                that.text(text);
            }

            kendo.notify(that);
        },

        options: {
            name: "DropDownList",
            enable: true,
            index: 0,
            autoBind: true,
            text: "",
            template: "",
            delay: 500,
            height: 200,
            dataTextField: "",
            dataValueField: "",
            optionLabel: "",
            cascadeFrom: "",
            ignoreCase: true,
            animation: {}
        },
        events: [

            "open",

            "close",

            CHANGE,

            "select",
            "dataBinding",
            "dataBound"
        ],

        setOptions: function (options) {
            Select.fn.setOptions.call(this, options);

            this._template();
            this._accessors();
        },


        enable: function (enable) {
            var that = this,
                element = that.element,
                wrapper = that.wrapper.unbind(".dropdownlist"),
                dropDownWrapper = that._inputWrapper.unbind(HOVEREVENTS);

            if (enable === false) {
                element.attr(ATTRIBUTE, ATTRIBUTE);

                dropDownWrapper
                    .removeClass(DEFAULT)
                    .addClass(DISABLED);
            } else {
                element.removeAttr(ATTRIBUTE, ATTRIBUTE);

                dropDownWrapper
                    .addClass(DEFAULT)
                    .removeClass(DISABLED)
                    .bind(HOVEREVENTS, that._toggleHover);

                wrapper
                    .bind({
                        "click.dropdownlist": function (e) {
                            e.preventDefault();
                            that.toggle();
                        },
                        "keydown.dropdownlist": proxy(that._keydown, that),
                        "keypress.dropdownlist": proxy(that._keypress, that),
                        "focusin.dropdownlist": function () {
                            dropDownWrapper.addClass(FOCUSED);
                        },
                        "focusout.dropdownlist": function (e) {
                            that._blur();
                            dropDownWrapper.removeClass(FOCUSED);
                        }
                    });
            }
        },

        open: function () {
            var that = this;

            if (!that.ul[0].firstChild) {
                that._open = true;
                that._selectItem();
            } else {
                that.popup.open();
                that._scroll(that._current);
            }
        },


        toggle: function (toggle) {
            this._toggle(toggle);
        },

        refresh: function () {
            var that = this,
                data = that._data(),
                length = data.length,
                optionLabel = that.options.optionLabel;

            that.trigger("dataBinding");
            if (that._current) {
                that.current(null);
            }

            that.ul[0].innerHTML = kendo.render(that.template, data);
            that._height(length);

            if (that.element.is(SELECT)) {
                if (optionLabel && length) {
                    optionLabel = that._optionLabelText(optionLabel);
                    optionLabel = '<option value="">' + optionLabel + "</option>";
                }

                that._options(data, optionLabel);
            }

            if (that._open) {
                that._open = false;
                that.toggle(!!length);
            }

            that._hideBusy();
            that._makeUnselectable();

            that.trigger("dataBound");
        },

        search: function (word) {
            if (word) {
                var that = this,
                    ignoreCase = that.options.ignoreCase;

                if (ignoreCase) {
                    word = word.toLowerCase();
                }

                that._select(function (dataItem) {
                    var text = that._text(dataItem);

                    if (text !== undefined) {
                        text = (text + "");
                        if (ignoreCase) {
                            text = text.toLowerCase();
                        }

                        return text.indexOf(word) === 0;
                    }
                });
            }
        },

        select: function (li) {
            var that = this;

            if (li === undefined) {
                return that.selectedIndex;
            } else {
                that._select(li);
                that._old = that._accessor();
                that._oldIndex = that.selectedIndex;
            }
        },

        text: function (text) {
            var span = this.span;

            if (text !== undefined) {
                span.text(text);
            } else {
                return span.text();
            }
        },

        value: function (value) {
            var that = this,
                idx;

            if (value !== undefined) {
                if (value !== null) {
                    value = value.toString();
                }

                if (value && that._valueOnFetch(value)) {
                    return;
                }

                idx = that._index(value);

                that.select(idx > -1 ? idx : 0);
            } else {
                return that._accessor();
            }
        },

        _selectItem: function () {
            var that = this;

            that.dataSource.one(CHANGE, function () {
                var value = that.options.value || that.value();
                if (value) {
                    that.value(value);
                } else {
                    that.select(that.options.index);
                }

                that.trigger("selected");
            }).fetch();
        },

        _accept: function (li) {
            this._focus(li);
        },

        _optionLabelText: function () {
            var options = this.options,
                dataTextField = options.dataTextField,
                optionLabel = options.optionLabel;

            if (optionLabel && dataTextField && typeof optionLabel === "object") {
                return this._text(optionLabel);
            }

            return optionLabel;
        },

        _data: function () {
            var that = this,
                options = that.options,
                optionLabel = options.optionLabel,
                textField = options.dataTextField,
                valueField = options.dataValueField,
                data = that.dataSource.view(),
                length = data.length,
                first = optionLabel,
                idx = 0;

            if (optionLabel && length) {
                if (typeof optionLabel === "object") {
                    first = optionLabel;
                } else if (textField) {
                    first = {};

                    textField = textField.split(".");
                    valueField = valueField.split(".");

                    assign(first, valueField, "");
                    assign(first, textField, optionLabel);
                }

                first = new kendo.data.ObservableArray([first]);

                for (; idx < length; idx++) {
                    first.push(data[idx]);
                }
                data = first;
            }

            return data;
        },

        _keydown: function (e) {
            var that = this,
                key = e.keyCode,
                keys = kendo.keys,
                ul = that.ul[0];

            that._move(e);

            if (key === keys.HOME) {
                e.preventDefault();
                that._select(ul.firstChild);
            } else if (key === keys.END) {
                e.preventDefault();
                that._select(ul.lastChild);
            }
        },

        _keypress: function (e) {
            var that = this;

            setTimeout(function () {
                that._word += String.fromCharCode(e.keyCode || e.charCode);
                that._search();
            });
        },

        _popup: function () {
            Select.fn._popup.call(this);
            this.popup.one("open", function () {
                this.wrapper = kendo.wrap(this.element)
                                    .addClass("km-popup");
            });
        },

        _search: function () {
            var that = this;
            clearTimeout(that._typing);

            that._typing = setTimeout(function () {
                that._word = "";
            }, that.options.delay);

            that.search(that._word);
        },

        _select: function (li) {
            var that = this,
                current = that._current,
                data = that._data(),
                value,
                text,
                idx;

            li = that._get(li);

            if (li && li[0] && !li.hasClass(SELECTED)) {
                if (current) {
                    current.removeClass(SELECTED);
                }

                idx = ui.List.inArray(li[0], that.ul[0]);
                if (idx > -1) {
                    data = data[idx];
                    text = that._text(data);
                    value = that._value(data);
                    that.selectedIndex = idx;

                    that.text(text);
                    that._accessor(value !== undefined ? value : text, idx);
                    that.current(li.addClass(SELECTED));
                }
            }
        },

        _mobile: function () {
            var that = this,
                popup = that.popup,
                root = popup.element.parents(".km-root").eq(0);

            if (root.length && os) {
                popup.options.animation.open.effects = (os.android || os.meego) ? "fadeIn" : os.ios ? "slideIn:up" : popup.options.animation.open.effects;
            }
        },

        _span: function () {
            var that = this,
                wrapper = that.wrapper,
                SELECTOR = ".k-input",
                span;

            span = wrapper.find(SELECTOR);

            if (!span[0]) {
                wrapper.append('<span unselectable="on" class="k-dropdown-wrap k-state-default"><span unselectable="on" class="k-input">&nbsp;</span><span class="k-select"><span class="k-icon k-i-arrow-s">select</span></span></span>')
                       .append(that.element);

                span = wrapper.find(SELECTOR);
            }

            that.span = span;
            that._inputWrapper = $(wrapper[0].firstChild);
            that._arrow = wrapper.find(".k-icon").mousedown(function (e) { e.preventDefault(); });
        },

        _wrapper: function () {
            var that = this,
                element = that.element,
                DOMelement = element[0],
                tabIndex = element.attr(TABINDEX),
                wrapper;

            wrapper = element.parent();

            if (!wrapper.is("span.k-widget")) {
                wrapper = element.wrap("<span />").parent();
            }

            wrapper.attr(TABINDEX, tabIndex || 0);
            wrapper[0].style.cssText = DOMelement.style.cssText;
            element.hide();

            that._focused = that.wrapper = wrapper
                              .attr("unselectable", "on")
                              .addClass("k-widget k-dropdown k-header")
                              .addClass(DOMelement.className);
        }
    });

    function assign(instance, fields, value) {
        var idx = 0,
            lastIndex = fields.length - 1,
            field;

        for (; idx < lastIndex; ++idx) {
            field = fields[idx];

            if (!(field in instance)) {
                instance[field] = {};
            }

            instance = instance[field];
        }

        instance[fields[lastIndex]] = value;
    }

    ui.plugin(DropDownList);
})(jQuery);
(function ($, undefined) {
    var kendo = window.kendo,
        ui = kendo.ui,
        List = ui.List,
        Select = ui.Select,
        support = kendo.support,
        placeholderSupported = support.placeholder,
        removeFiltersForField = Select.removeFiltersForField,
        keys = kendo.keys,
        CLICK = support.touch ? "touchend" : "click",
        ATTRIBUTE = "disabled",
        CHANGE = "change",
        DEFAULT = "k-state-default",
        DISABLED = "k-state-disabled",
        FOCUSED = "k-state-focused",
        MOUSEDOWN = "mousedown",
        SELECT = "select",
        STATE_SELECTED = "k-state-selected",
        STATE_FILTER = "filter",
        STATE_ACCEPT = "accept",
        STATE_REBIND = "rebind",
        HOVEREVENTS = "mouseenter mouseleave",
        NULL = null,
        proxy = $.proxy;

    var ComboBox = Select.extend(/** @lends kendo.ui.ComboBox.prototype */{
        init: function (element, options) {
            var that = this, wrapper, text;

            options = $.isArray(options) ? { dataSource: options } : options;

            Select.fn.init.call(that, element, options);

            options = that.options;
            element = that.element.focus(function () {
                that.input.focus();
            });

            options.placeholder = options.placeholder || element.attr("placeholder");

            that._reset();

            that._wrapper();

            that._input();

            that._popup();

            that._accessors();

            that._dataSource();

            that._enable();

            that._cascade();

            wrapper = that._inputWrapper;

            that.input.bind({
                keydown: proxy(that._keydown, that),
                focus: function () {
                    wrapper.addClass(FOCUSED);
                    that._placeholder(false);
                },
                blur: function () {
                    wrapper.removeClass(FOCUSED);
                    clearTimeout(that._typing);
                    that.text(that.text());
                    that._placeholder();
                    that._blur();
                }
            });

            that._oldIndex = that.selectedIndex = -1;
            that._old = that.value();

            if (options.autoBind) {
                that._selectItem();
            } else {
                text = options.text;

                if (!text && element.is(SELECT)) {
                    text = element.children(":selected").text();
                }

                if (text) {
                    that.input.val(text);
                }
            }

            if (!text) {
                that._placeholder();
            }

            kendo.notify(that);
        },

        options: {
            name: "ComboBox",
            enable: true,
            index: -1,
            autoBind: true,
            delay: 200,
            dataTextField: "",
            dataValueField: "",
            minLength: 0,
            height: 200,
            highlightFirst: true,
            template: "",
            filter: "none",
            placeholder: "",
            suggest: false,
            ignoreCase: true,
            animation: {}
        },

        events: [
            "open",

            "close",

            CHANGE,
            "select",
            "dataBinding",
            "dataBound"
        ],
        setOptions: function (options) {
            Select.fn.setOptions.call(this, options);

            this._template();
            this._accessors();
        },

        current: function (li) {
            var that = this,
                current = that._current;

            if (li === undefined) {
                return current;
            }

            if (current) {
                current.removeClass(STATE_SELECTED);
            }

            Select.fn.current.call(that, li);
        },

        enable: function (enable) {
            var that = this,
                input = that.input.add(that.element),
                wrapper = that._inputWrapper.unbind(HOVEREVENTS),
                arrow = that._arrow.parent().unbind(CLICK + " " + MOUSEDOWN);

            if (enable === false) {
                wrapper
                    .removeClass(DEFAULT)
                    .addClass(DISABLED);

                input.attr(ATTRIBUTE, ATTRIBUTE);
            } else {
                wrapper
                    .removeClass(DISABLED)
                    .addClass(DEFAULT)
                    .bind(HOVEREVENTS, that._toggleHover);

                input.removeAttr(ATTRIBUTE);
                arrow.bind(CLICK, function () { that.toggle(); })
                     .bind(MOUSEDOWN, function (e) { e.preventDefault(); });
            }
        },

        open: function () {
            var that = this,
                serverFiltering = that.dataSource.options.serverFiltering;

            if (that.popup.visible()) {
                return;
            }

            if (!that.ul[0].firstChild || (that._state === STATE_ACCEPT && !serverFiltering)) {
                that._open = true;
                that._state = STATE_REBIND;
                that._selectItem();
            } else {
                that.popup.open();
                that._scroll(that._current);
            }
        },


        refresh: function () {
            var that = this,
                ul = that.ul[0],
                options = that.options,
                value = that.value(),
                data = that._data(),
                length = data.length;

            that.trigger("dataBinding");

            ul.innerHTML = kendo.render(that.template, data);
            that._height(length);

            if (that.element.is(SELECT)) {
                that._options(data);

                if (value && that._state === STATE_REBIND) {
                    that._state = "";
                    that.value(value);
                }
            }

            if (length) {
                if (options.highlightFirst) {
                    that.current($(ul.firstChild));
                }

                if (options.suggest && that.input.val()) {
                    that.suggest($(ul.firstChild));
                }
            }

            if (that._open) {
                that._open = false;
                that.toggle(!!length);
            }

            if (that._touchScroller) {
                that._touchScroller.reset();
            }

            that._makeUnselectable();

            that._hideBusy();
            that.trigger("dataBound");
        },

        select: function (li) {
            var that = this;

            if (li === undefined) {
                return that.selectedIndex;
            } else {
                that._select(li);
                that._old = that._accessor();
                that._oldIndex = that.selectedIndex;
            }
        },

        search: function (word) {
            word = typeof word === "string" ? word : this.text();
            var that = this,
                length = word.length,
                options = that.options,
                ignoreCase = options.ignoreCase,
                filter = options.filter,
                field = options.dataTextField,
                filters, expression;

            clearTimeout(that._typing);

            if (length >= options.minLength) {
                if (filter === "none") {
                    that._filter(word);
                } else {
                    that._open = true;
                    that._state = STATE_FILTER;

                    expression = that.dataSource.filter() || {};
                    removeFiltersForField(expression, field);

                    filters = expression.filters || [];
                    filters.push({
                        value: ignoreCase ? word.toLowerCase() : word,
                        field: field,
                        operator: filter,
                        ignoreCase: ignoreCase
                    });

                    that.dataSource.filter(filters);
                }
            }
        },

        suggest: function (word) {
            var that = this,
                element = that.input[0],
                value = that.text(),
                caret = List.caret(element),
                key = that._last,
                idx;

            if (key == keys.BACKSPACE || key == keys.DELETE) {
                that._last = undefined;
                return;
            }

            word = word || "";

            if (typeof word !== "string") {
                idx = List.inArray(word[0], that.ul[0]);

                if (idx > -1) {
                    word = that._text(that.dataSource.view()[idx]);
                } else {
                    word = "";
                }
            }

            if (caret <= 0) {
                caret = value.toLowerCase().indexOf(word.toLowerCase()) + 1;
            }

            if (word) {
                idx = word.toLowerCase().indexOf(value.toLowerCase());
                if (idx > -1) {
                    value += word.substring(idx + value.length);
                }
            } else {
                value = value.substring(0, caret);
            }

            if (value.length !== caret || !word) {
                element.value = value;
                List.selectText(element, caret, value.length);
            }
        },

        text: function (text) {
            text = text === null ? "" : text;

            var that = this,
                textAccessor = that._text,
                input = that.input[0],
                ignoreCase = that.options.ignoreCase,
                loweredText = text,
                dataItem;

            if (text !== undefined) {
                dataItem = that.dataItem();

                if (dataItem && textAccessor(dataItem) === text) {
                    return;
                }

                if (ignoreCase) {
                    loweredText = loweredText.toLowerCase();
                }

                that._select(function (data) {
                    data = textAccessor(data);

                    if (ignoreCase) {
                        data = (data + "").toLowerCase();
                    }

                    return data === loweredText;
                });

                if (that.selectedIndex < 0) {
                    that._custom(text);
                    input.value = text;
                }

            } else {
                return input.value;
            }
        },

        toggle: function (toggle) {
            var that = this;

            that._toggle(toggle);
        },


        value: function (value) {
            var that = this,
                idx;

            if (value !== undefined) {
                if (value !== null) {
                    value = value.toString();
                }

                if (value && that._valueOnFetch(value)) {
                    return;
                }

                idx = that._index(value);

                if (idx > -1) {
                    that.select(idx);
                } else {
                    that.current(NULL);
                    that._custom(value);
                    that.text(value);
                    that._placeholder();
                }

                that._old = that._accessor();
                that._oldIndex = that.selectedIndex;
            } else {
                return that._accessor();
            }
        },

        _accept: function (li) {
            var that = this;

            if (li && that.popup.visible()) {

                if (that._state === STATE_FILTER) {
                    that._state = STATE_ACCEPT;
                }

                that._focus(li);
            } else {
                that.text(that.text());
                that._change();
            }
        },

        _custom: function (value) {
            var that = this,
                element = that.element,
                custom = that._option;

            if (element.is(SELECT)) {
                if (!custom) {
                    custom = that._option = $("<option/>");
                    element.append(custom);
                }
                custom.text(value);
                custom[0].selected = true;
            } else {
                element.val(value);
            }
        },

        _filter: function (word) {
            var that = this,
                options = that.options,
                dataSource = that.dataSource,
                ignoreCase = options.ignoreCase,
                predicate = function (dataItem) {
                    var text = that._text(dataItem);
                    if (text !== undefined) {
                        text = text + "";
                        if (text !== "" && word === "") {
                            return false;
                        }

                        if (ignoreCase) {
                            text = text.toLowerCase();
                        }

                        return text.indexOf(word) === 0;
                    }
                };

            if (ignoreCase) {
                word = word.toLowerCase();
            }

            if (!that.ul[0].firstChild) {
                dataSource.one(CHANGE, function () {
                    if (dataSource.data()[0]) {
                        that.search(word);
                    }
                }).fetch();
                return;
            }

            if (that._highlight(predicate) !== -1) {
                if (options.suggest && that._current) {
                    that.suggest(that._current);
                }
                that.open();
            }

            that._hideBusy();
        },

        _highlight: function (li) {
            var that = this, idx;

            if (li === undefined || li === null) {
                return -1;
            }

            li = that._get(li);
            idx = List.inArray(li[0], that.ul[0]);

            if (idx == -1) {
                if (that.options.highlightFirst && !that.text()) {
                    li = $(that.ul[0].firstChild);
                } else {
                    li = NULL;
                }
            }

            that.current(li);

            return idx;
        },

        _input: function () {
            var that = this,
                element = that.element[0],
                tabIndex = element.tabIndex,
                wrapper = that.wrapper,
                SELECTOR = ".k-input",
                input, DOMInput,
                name = element.name || "";

            if (name) {
                name = 'name="' + name + '_input" ';
            }

            input = wrapper.find(SELECTOR);

            if (!input[0]) {
                wrapper.append('<span unselectable="on" class="k-dropdown-wrap k-state-default"><input ' + name + 'class="k-input" type="text" autocomplete="off"/><span unselectable="on" class="k-select"><span unselectable="on" class="k-icon k-i-arrow-s">select</span></span></span>')
                       .append(that.element);

                input = wrapper.find(SELECTOR);
            }

            DOMInput = input[0];
            DOMInput.tabIndex = tabIndex;
            DOMInput.style.cssText = element.style.cssText;

            if (element.maxLength > -1) {
                DOMInput.maxLength = element.maxLength;
            }

            input.addClass(element.className)
                 .val(element.value)
                 .css({
                     width: "100%",
                     height: element.style.height
                 })
                 .show();

            if (placeholderSupported) {
                input.attr("placeholder", that.options.placeholder);
            }

            that._focused = that.input = input;
            that._arrow = wrapper.find(".k-icon");
            that._inputWrapper = $(wrapper[0].firstChild);
        },

        _keydown: function (e) {
            var that = this,
                key = e.keyCode,
                input = that.input;

            that._last = key;

            clearTimeout(that._typing);

            if (key == keys.TAB) {
                that.text(input.val());

                if (that._state === STATE_FILTER && that.selectedIndex > -1) {
                    that._state = STATE_ACCEPT;
                }
            } else if (!that._move(e)) {
                that._search();
            }
        },

        _placeholder: function (show) {
            if (placeholderSupported) {
                return;
            }

            var that = this,
                input = that.input,
                placeholder = that.options.placeholder,
                value;

            if (placeholder) {
                value = that.value();

                if (show === undefined) {
                    show = !value;
                }

                input.toggleClass("k-readonly", show);

                if (!show) {
                    if (!value) {
                        placeholder = "";
                    } else {
                        return;
                    }
                }

                input.val(placeholder);
            }
        },

        _search: function () {
            var that = this;

            that._typing = setTimeout(function () {
                var value = that.text();
                if (that._prev !== value) {
                    that._prev = value;
                    that.search(value);
                }
            }, that.options.delay);
        },

        _select: function (li) {
            var that = this,
                text,
                value,
                idx = that._highlight(li),
                data = that._data();

            that.selectedIndex = idx;

            if (idx !== -1) {
                that._current.addClass(STATE_SELECTED);

                data = data[idx];
                text = that._text(data);
                value = that._value(data);

                that._prev = that.input[0].value = text;
                that._accessor(value !== undefined ? value : text, idx);
                that._placeholder();
            }
        },

        _selectItem: function () {
            var that = this,
                options = that.options,
                dataSource = that.dataSource,
                expression = dataSource.filter() || {};

            removeFiltersForField(expression, that.options.dataTextField);

            that.dataSource.one(CHANGE, function () {
                var value = options.value || that.value();
                if (value) {
                    that.value(value);
                } else {
                    that.select(options.index);
                }
                that.trigger("selected");
            }).filter(expression);
        },

        _wrapper: function () {
            var that = this,
                element = that.element,
                wrapper;

            wrapper = element.parent();

            if (!wrapper.is("span.k-widget")) {
                wrapper = element.hide().wrap("<span />").parent();
            }

            wrapper[0].style.cssText = element[0].style.cssText;
            that.wrapper = wrapper.addClass("k-widget k-combobox k-header")
                                  .addClass(element[0].className)
                                  .show();
        }
    });

    ui.plugin(ComboBox);
})(jQuery);
(function ($, undefined) {
    var kendo = window.kendo,
        ui = kendo.ui,
        proxy = $.proxy,
        extend = $.extend,
        grep = $.grep,
        map = $.map,
        inArray = $.inArray,
        ACTIVE = "k-state-selected",
        ASC = "asc",
        DESC = "desc",
        CLICK = "click",
        CHANGE = "change",
        POPUP = "kendoPopup",
        FILTERMENU = "kendoFilterMenu",
        MENU = "kendoMenu",
        Widget = ui.Widget;

    function trim(text) {
        if (!String.prototype.trim) {
            text = text.replace(/^\s\s*/, '').replace(/\s\s*$/, '');
        } else {
            text = text.trim();
        }

        return text.replace(/&nbsp;/gi, "");
    }

    var ColumnMenu = Widget.extend({
        init: function (element, options) {
            var that = this,
                link;

            Widget.fn.init.call(that, element, options);

            element = that.element;
            options = that.options;
            that.owner = options.owner;

            that.field = element.attr(kendo.attr("field"));
            link = element.find(".k-header-column-menu");
            if (!link[0]) {
                link = element.prepend('<a class="k-header-column-menu" href="#"><span class="k-icon k-i-arrowhead-s"/></a>').find(".k-header-column-menu");
            }
            that._clickHandler = proxy(that._click, that);
            link.click(that._clickHandler);
            that.link = link;

            that.wrapper = $('<div class="k-column-menu"/>');
            that.wrapper.html(kendo.template(template)({
                ns: kendo.ns,
                messages: options.messages,
                sortable: options.sortable,
                filterable: options.filterable,
                columns: that._ownerColumns(),
                showColumns: options.columns
            }));

            that.popup = that.wrapper[POPUP]({
                anchor: link,
                open: proxy(that._open, that)
            }).data(POPUP);

            that._menu();

            that._sort();

            that._columns();

            that._filter();
        },

        options: {
            name: "ColumnMenu",
            messages: {
                sortAscending: "Sort Ascending",
                sortDescending: "Sort Descending",
                filter: "Filter",
                columns: "Columns"
            },
            columns: true,
            sortable: true,
            filterable: true
        },

        destroy: function () {
            var that = this;

            if (that.filterMenu) {
                that.filterMenu.destroy();
                that.filterMenu = null;
            }

            that.wrapper.children().removeData(MENU);
            that.wrapper.removeData(POPUP).remove();
            that.link.unbind(CLICK, that._clickHandler);
            that.element.removeData("kendoColumnMenu");
            that.columns = null;
        },

        close: function () {
            this.menu.close();
            this.popup.close();
        },

        _click: function (e) {
            e.preventDefault();
            e.stopPropagation();
            this.popup.toggle();
        },

        _open: function () {
            $(".k-column-menu").not(this.wrapper).each(function () {
                $(this).data(POPUP).close();
            });
        },

        _ownerColumns: function () {
            var columns = this.owner.columns,
                menuColumns = grep(columns, function (col) {
                    var result = true,
                        title = trim(col.title || "");

                    if (col.menu === false || (!col.field && !title.length)) {
                        result = false;
                    }

                    return result;
                });

            return map(menuColumns, function (col) {
                return {
                    field: col.field,
                    title: col.title || col.field,
                    hidden: col.hidden,
                    index: inArray(col, columns)
                };
            });
        },

        _menu: function () {
            this.menu = this.wrapper.children()[MENU]({
                orientation: "vertical",
                closeOnClick: false
            }).data(MENU);
        },

        _sort: function () {
            var that = this;

            if (that.options.sortable) {

                that.refresh();

                that.options.dataSource.bind(CHANGE, proxy(that.refresh, that));

                that.menu.element.delegate(".k-sort-asc, .k-sort-desc", CLICK, function () {
                    var item = $(this),
                        dir = item.hasClass("k-sort-asc") ? ASC : DESC;

                    item.parent().find(".k-sort-" + (dir == ASC ? DESC : ASC)).removeClass(ACTIVE);

                    that._sortDataSource(item, dir);

                    that.close();
                });
            }
        },

        _sortDataSource: function (item, dir) {
            var that = this,
                sortable = that.options.sortable,
                dataSource = that.options.dataSource,
                idx,
                length,
                sort = dataSource.sort() || [];

            if (item.hasClass(ACTIVE) && sortable && sortable.allowUnsort !== false) {
                item.removeClass(ACTIVE);
                dir = undefined;
            } else {
                item.addClass(ACTIVE);
            }

            if (sortable === true || sortable.mode === "single") {
                sort = [{ field: that.field, dir: dir }];
            } else {
                for (idx = 0, length = sort.length; idx < length; idx++) {
                    if (sort[idx].field === that.field) {
                        sort.splice(idx, 1);
                        break;
                    }
                }
                sort.push({ field: that.field, dir: dir });
            }

            dataSource.sort(sort);
        },

        _columns: function () {
            var that = this;

            if (that.options.columns) {

                that._updateColumnsMenu();

                that.owner.bind(["columnHide", "columnShow"], function () {
                    that._updateColumnsMenu();
                });

                that.wrapper.delegate("[type=checkbox]", CHANGE, function (e) {
                    var input = $(this),
                        index = parseInt(input.attr(kendo.attr("index")), 10);

                    if (input.is(":checked")) {
                        that.owner.showColumn(index);
                    } else {
                        that.owner.hideColumn(index);
                    }
                });
            }
        },

        _updateColumnsMenu: function () {
            var columns = this._ownerColumns(),
                allselector = map(columns, function (field) {
                    return "[" + kendo.attr("index") + "=" + field.index + "]";
                }).join(","),
                visible = grep(columns, function (field) {
                    return !field.hidden;
                }),
                selector = map(visible, function (field) {
                    return "[" + kendo.attr("index") + "=" + field.index + "]";
                }).join(",");

            this.wrapper.find(allselector).attr("checked", false);
            this.wrapper.find(selector).attr("checked", true).attr("disabled", visible.length == 1);
        },

        _filter: function () {
            var that = this,
                options = that.options;

            if (options.filterable !== false) {
                that.filterMenu = that.wrapper.find(".k-filterable")[FILTERMENU](
                    extend(true, {}, {
                        appendToElement: true,
                        dataSource: options.dataSource,
                        values: options.values,
                        field: that.field
                    },
                    options.filterable)
                ).data(FILTERMENU);
            }
        },

        refresh: function () {
            var that = this,
                sort = that.options.dataSource.sort() || [],
                descriptor,
                field = that.field,
                idx,
                length;

            that.wrapper.find(".k-sort-asc, .k-sort-desc").removeClass(ACTIVE);

            for (idx = 0, length = sort.length; idx < length; idx++) {
                descriptor = sort[idx];

                if (field == descriptor.field) {
                    that.wrapper.find(".k-sort-" + descriptor.dir).addClass(ACTIVE);
                }
            }
        }
    });

    var template = '<ul>' +
                    '#if(sortable){#' +
                        '<li class="k-item k-sort-asc"><span class="k-link"><span class="k-sprite k-i-sort-asc"></span>${messages.sortAscending}</span></li>' +
                        '<li class="k-item k-sort-desc"><span class="k-link"><span class="k-sprite k-i-sort-desc"></span>${messages.sortDescending}</span></li>' +
                        '#if(showColumns || filterable){#' +
                            '<li class="k-separator"></li>' +
                        '#}#' +
                    '#}#' +
                    '#if(showColumns){#' +
                        '<li class="k-item k-columns-item"><span class="k-link"><span class="k-sprite k-i-columns"></span>${messages.columns}</span><ul>' +
                        '#for (var col in columns) {#' +
                            '<li><label><input type="checkbox" data-#=ns#field="#=columns[col].field#" data-#=ns#index="#=columns[col].index#"/>#=columns[col].title#</label></li>' +
                        '#}#' +
                        '</ul></li>' +
                        '#if(filterable){#' +
                            '<li class="k-separator"></li>' +
                        '#}#' +
                    '#}#' +
                    '#if(filterable){#' +
                        '<li class="k-item k-filter-item"><span class="k-link"><span class="k-sprite k-filter"></span>${messages.filter}</span><ul>' +
                            '<li><div class="k-filterable"></div></li>' +
                        '</ul></li>' +
                    '#}#' +
                    '</ul>';

    ui.plugin(ColumnMenu);
})(jQuery);
(function ($, undefined) {
    var kendo = window.kendo,
        ui = kendo.ui,
        DataSource = kendo.data.DataSource,
        Groupable = ui.Groupable,
        tbodySupportsInnerHtml = kendo.support.tbodyInnerHtml,
        Widget = ui.Widget,
        keys = kendo.keys,
        isPlainObject = $.isPlainObject,
        extend = $.extend,
        map = $.map,
        grep = $.grep,
        isArray = $.isArray,
        inArray = $.inArray,
        proxy = $.proxy,
        isFunction = $.isFunction,
        isEmptyObject = $.isEmptyObject,
        math = Math,
        REQUESTSTART = "requestStart",
        ERROR = "error",
        ROW_SELECTOR = "tbody>tr:not(.k-grouping-row,.k-detail-row,.k-group-footer):visible",
        DATA_CELL = ":not(.k-group-cell,.k-hierarchy-cell):visible",
        SELECTION_CELL_SELECTOR = "tbody>tr:not(.k-grouping-row,.k-detail-row,.k-group-footer) > td:not(.k-group-cell,.k-hierarchy-cell)",
        CELL_SELECTOR = ROW_SELECTOR + ">td" + DATA_CELL,
        FIRST_CELL_SELECTOR = CELL_SELECTOR + ":first",
        EDIT = "edit",
        SAVE = "save",
        REMOVE = "remove",
        DETAILINIT = "detailInit",
        CHANGE = "change",
        COLUMNHIDE = "columnHide",
        COLUMNSHOW = "columnShow",
        SAVECHANGES = "saveChanges",
        DATABOUND = "dataBound",
        DETAILEXPAND = "detailExpand",
        DETAILCOLLAPSE = "detailCollapse",
        FOCUSED = "k-state-focused",
        FOCUSABLE = "k-focusable",
        SELECTED = "k-state-selected",
        COLUMNRESIZE = "columnResize",
        COLUMNREORDER = "columnReorder",
        CLICK = "click",
        HEIGHT = "height",
        TABINDEX = "tabIndex",
        FUNCTION = "function",
        STRING = "string",
        DELETECONFIRM = "Are you sure you want to delete this record?",
        formatRegExp = /(\}|\#)/ig,
        indicatorWidth = 3,
        templateHashRegExp = /#/ig,
        COMMANDBUTTONTMPL = '<a class="k-button k-button-icontext #=className#" #=attr# href="\\#"><span class="#=iconClass# #=imageClass#"></span>#=text#</a>';

    var VirtualScrollable = Widget.extend({
        init: function (element, options) {
            var that = this;

            Widget.fn.init.call(that, element, options);
            that._refreshHandler = proxy(that.refresh, that);
            that.setDataSource(options.dataSource);
            that.wrap();
        },

        setDataSource: function (dataSource) {
            var that = this;
            if (that.dataSource) {
                that.dataSource.unbind(CHANGE, that._refreshHandler);
            }
            that.dataSource = dataSource;
            that.dataSource.bind(CHANGE, that._refreshHandler);
        },

        options: {
            name: "VirtualScrollable",
            itemHeight: $.noop
        },

        wrap: function () {
            var that = this,
                // workaround for IE issue where scroll is not raised if container is same width as the scrollbar
                scrollbar = kendo.support.scrollbar() + 1,
                element = that.element;

            element.css({
                width: "auto",
                paddingRight: scrollbar,
                overflow: "hidden"
            });
            that.content = element.children().first();
            that.wrapper = that.content.wrap('<div class="k-virtual-scrollable-wrap"/>')
                                .parent()
                                .bind("DOMMouseScroll", proxy(that._wheelScroll, that))
                                .bind("mousewheel", proxy(that._wheelScroll, that));

            if (kendo.support.touch) {
                that.drag = new kendo.Drag(that.wrapper, {
                    global: true,
                    move: function (e) {
                        that.verticalScrollbar.scrollTop(that.verticalScrollbar.scrollTop() - e.y.delta);
                        e.preventDefault();
                    }
                });
            }

            that.verticalScrollbar = $('<div class="k-scrollbar k-scrollbar-vertical" />')
                                        .css({
                                            width: scrollbar
                                        }).appendTo(element)
                                        .bind("scroll", proxy(that._scroll, that));
        },

        _wheelScroll: function (e) {
            var that = this,
                scrollTop = that.verticalScrollbar.scrollTop(),
                originalEvent = e.originalEvent,
                delta;

            e.preventDefault();

            if (originalEvent.wheelDelta) {
                delta = originalEvent.wheelDelta;
            } else if (originalEvent.detail) {
                delta = (-originalEvent.detail) * 10;
            } else if ($.browser.opera) {
                delta = -originalEvent.wheelDelta;
            }
            that.verticalScrollbar.scrollTop(scrollTop + (-delta));
        },

        _scroll: function (e) {
            var that = this,
                scrollTop = e.currentTarget.scrollTop,
                dataSource = that.dataSource,
                rowHeight = that.itemHeight,
                skip = dataSource.skip() || 0,
                start = that._rangeStart || skip,
                height = that.element.innerHeight(),
                isScrollingUp = !!(that._scrollbarTop && that._scrollbarTop > scrollTop),
                firstItemIndex = math.max(math.floor(scrollTop / rowHeight), 0),
                lastItemIndex = math.max(firstItemIndex + math.floor(height / rowHeight), 0);

            that._scrollTop = scrollTop - (start * rowHeight);
            that._scrollbarTop = scrollTop;

            if (!that._fetch(firstItemIndex, lastItemIndex, isScrollingUp)) {
                that.wrapper[0].scrollTop = that._scrollTop;
            }
        },

        _fetch: function (firstItemIndex, lastItemIndex, scrollingUp) {
            var that = this,
                dataSource = that.dataSource,
                itemHeight = that.itemHeight,
                take = dataSource.take(),
                rangeStart = that._rangeStart || dataSource.skip() || 0,
                currentSkip = math.floor(firstItemIndex / take) * take,
                fetching = false,
                prefetchAt = 0.33;

            if (firstItemIndex < rangeStart) {

                fetching = true;
                rangeStart = math.max(0, lastItemIndex - take);
                that._scrollTop = (firstItemIndex - rangeStart) * itemHeight;
                that._page(rangeStart, take);

            } else if (lastItemIndex >= rangeStart + take && !scrollingUp) {

                fetching = true;
                rangeStart = firstItemIndex;
                that._scrollTop = itemHeight;
                that._page(rangeStart, take);

            } else if (!that._fetching) {

                if (firstItemIndex < (currentSkip + take) - take * prefetchAt && firstItemIndex > take) {
                    dataSource.prefetch(currentSkip - take, take);
                }
                if (lastItemIndex > currentSkip + take * prefetchAt) {
                    dataSource.prefetch(currentSkip + take, take);
                }

            }
            return fetching;
        },

        _page: function (skip, take) {
            var that = this,
                dataSource = that.dataSource;

            clearTimeout(that._timeout);
            that._fetching = true;
            that._rangeStart = skip;

            if (dataSource.inRange(skip, take)) {
                dataSource.range(skip, take);
            } else {
                kendo.ui.progress(that.wrapper.parent(), true);
                that._timeout = setTimeout(function () {
                    dataSource.range(skip, take);
                }, 100);
            }
        },

        refresh: function () {
            var that = this,
                html = "",
                maxHeight = 250000,
                dataSource = that.dataSource,
                rangeStart = that._rangeStart,
                scrollbar = kendo.support.scrollbar(),
                wrapperElement = that.wrapper[0],
                totalHeight,
                idx,
                itemHeight;

            kendo.ui.progress(that.wrapper.parent(), false);
            clearTimeout(that._timeout);

            itemHeight = that.itemHeight = that.options.itemHeight() || 0;

            var addScrollBarHeight = (wrapperElement.scrollWidth > wrapperElement.offsetWidth) ? scrollbar : 0;

            totalHeight = dataSource.total() * itemHeight + addScrollBarHeight;

            for (idx = 0; idx < math.floor(totalHeight / maxHeight) ; idx++) {
                html += '<div style="width:1px;height:' + maxHeight + 'px"></div>';
            }

            if (totalHeight % maxHeight) {
                html += '<div style="width:1px;height:' + (totalHeight % maxHeight) + 'px"></div>';
            }

            that.verticalScrollbar.html(html);
            wrapperElement.scrollTop = that._scrollTop;

            if (that.drag) {
                that.drag.cancel();
            }

            if (rangeStart && !that._fetching) { // we are rebound from outside local range should be reset
                that._rangeStart = dataSource.skip();
            }
            that._fetching = false;
        }
    });

    function groupCells(count) {
        return new Array(count + 1).join('<td class="k-group-cell">&nbsp;</td>');
    }

    function stringifyAttributes(attributes) {
        var attr,
            result = " ";

        if (attributes) {
            if (typeof attributes === STRING) {
                return attributes;
            }

            for (attr in attributes) {
                result += attr + '="' + attributes[attr] + '"';
            }
        }
        return result;
    }

    var defaultCommands = {
        create: {
            text: "Add new record",
            imageClass: "k-add",
            className: "k-grid-add",
            iconClass: "k-icon"
        },
        cancel: {
            text: "Cancel changes",
            imageClass: "k-cancel",
            className: "k-grid-cancel-changes",
            iconClass: "k-icon"
        },
        save: {
            text: "Save changes",
            imageClass: "k-update",
            className: "k-grid-save-changes",
            iconClass: "k-icon"
        },
        destroy: {
            text: "Delete",
            imageClass: "k-delete",
            className: "k-grid-delete",
            iconClass: "k-icon"
        },
        edit: {
            text: "Edit",
            imageClass: "k-edit",
            className: "k-grid-edit",
            iconClass: "k-icon"
        },
        update: {
            text: "Update",
            imageClass: "k-update",
            className: "k-grid-update",
            iconClass: "k-icon"
        },
        canceledit: {
            text: "Cancel",
            imageClass: "k-cancel",
            className: "k-grid-cancel",
            iconClass: "k-icon"
        }
    };

    function heightAboveHeader(context) {
        var top = 0;
        $('> .k-grouping-header, > .k-grid-toolbar', context).each(function () {
            top += this.offsetHeight;
        });
        return top;
    }

    function cursor(context, value) {
        $('th, th .k-grid-filter, th .k-link', context)
            .add(document.body)
            .css('cursor', value);
    }

    function buildEmptyAggregatesObject(aggregates) {
        var idx,
            length,
            aggregate = {},
            fieldsMap = {};

        if (!isEmptyObject(aggregates)) {
            if (!isArray(aggregates)) {
                aggregates = [aggregates];
            }

            for (idx = 0, length = aggregates.length; idx < length; idx++) {
                aggregate[aggregates[idx].aggregate] = 0;
                fieldsMap[aggregates[idx].field] = aggregate;
            }
        }

        return fieldsMap;
    }

    function reorder(selector, sourceIndex, destIndex) {
        var source = selector.eq(sourceIndex),
            dest = selector.eq(destIndex);

        source[sourceIndex > destIndex ? "insertBefore" : "insertAfter"](dest);
    }

    function attachCustomCommandEvent(context, container, commands) {
        var idx,
            length,
            command,
            commandName;

        commands = !isArray(commands) ? [commands] : commands;

        for (idx = 0, length = commands.length; idx < length; idx++) {
            command = commands[idx];

            if (isPlainObject(command) && command.click) {
                commandName = command.name || command.text;
                container.on(CLICK, "a.k-grid-" + commandName, { commandName: commandName }, proxy(command.click, context));
            }
        }
    }

    function visibleColumns(columns) {
        return grep(columns, function (column) {
            return !column.hidden;
        });
    }

    function addHiddenStyle(attr) {
        attr = attr || {};
        var style = attr.style;

        if (!style) {
            style = "display:none";
        } else {
            style = style.replace(/((.*)?display)(.*)?:([^;]*)/i, "$1:none");
            if (style === attr.style) {
                style = style.replace(/(.*)?/i, "display:none;$1");
            }
        }

        return extend({}, attr, { style: style });
    }

    function removeHiddenStyle(attr) {
        attr = attr || {};
        var style = attr.style;

        if (style) {
            attr.style = style.replace(/((.*)?)(display\s*:\s*none)\s*;?/i, "$1");
        }

        return attr;
    }

    function normalizeCols(table, visibleColumns, hasDetails, groups) {
        var colgroup = table.find(">colgroup"),
            width,
            cols = map(visibleColumns, function (column) {
                width = column.width;
                if (width && parseInt(width, 10) !== 0) {
                    return kendo.format('<col style="width:{0}"/>', typeof width === STRING ? width : width + "px");
                }

                return "<col />";
            });

        if (hasDetails || colgroup.find(".k-hierarchy-col").length) {
            cols.splice(0, 0, '<col class="k-hierarchy-col" />');
        }

        if (colgroup.length) {
            colgroup.remove();
        }

        colgroup = $("<colgroup/>").append($(new Array(groups + 1).join('<col class="k-group-col">') + cols.join("")));

        table.prepend(colgroup);
    }

    var Grid = Widget.extend({
        init: function (element, options) {
            var that = this;

            options = isArray(options) ? { dataSource: options } : options;

            // Added By Amit Yadav

            if (options.allexcel) {
                options.allexcel = $.extend({ cssClass: "k-i-expand" }, options.allexcel);
                options.toolbar = $.merge([
                    {
                        name: "export",
                        template: kendo.format("<a class='k-button k-button-icontext k-grid-exportAll' title='Export All to Excel'><div class='{0}'></div></a>", options.allexcel.cssClass)
                    }
                ], options.toolbar || []);
            }
            if (options.excel) {
                options.excel = $.extend({ cssClass: "k-i-expand" }, options.excel);
                options.toolbar = $.merge([
                    {
                        name: "export",
                        template: kendo.format("<a class='k-button k-button-icontext k-grid-export' title='Export to Excel'><div class='{0}'></div></a>", options.excel.cssClass)
                    }
                ], options.toolbar || []);
            }


            Widget.fn.init.call(that, element, options);

            that._element();

            if (options.dataSource.parentValue != undefined) {
                that.element.attr("id", "div__" + options.dataSource.parentValue);
            }

            that._columns(that.options.columns);

            that._dataSource();

            that._tbody();

            that._pageable();

            that._thead();

            that._groupable();

            that._toolbar();

            that._setContentHeight();

            that._templates();

            that._navigatable();

            that._selectable();

            that._details();

            that._editable();

            that._attachCustomCommandsEvent();

            if (that.options.autoBind) {
                that.dataSource.fetch();
            }

            kendo.notify(that);
        },

        events: [
           CHANGE,
           "dataBinding",
           DATABOUND,
           DETAILEXPAND,
           DETAILCOLLAPSE,
           DETAILINIT,
           EDIT,
           SAVE,
           REMOVE,
           SAVECHANGES,
           COLUMNRESIZE,
           COLUMNREORDER,
           COLUMNSHOW,
           COLUMNHIDE
        ],

        setDataSource: function (dataSource) {
            var that = this;

            that.options.dataSource = dataSource;

            that._dataSource();

            that._pageable();

            if (that.options.groupable) {
                that._groupable();
            }

            that._thead();

            if (that.virtualScrollable) {
                that.virtualScrollable.setDataSource(that.options.dataSource);
            }

            if (that.options.autoBind) {
                dataSource.fetch();
            }
        },

        options: {
            name: "Grid",
            columns: [],
            toolbar: null,
            autoBind: true,
            filterable: true,
            scrollable: true,
            sortable: false,
            selectable: false,
            navigatable: false,
            pageable: false,
            editable: false,
            groupable: false,
            rowTemplate: "",
            altRowTemplate: "",
            dataSource: {},
            height: null,
            resizable: false,
            reorderable: false,
            columnMenu: false,
            parentValue: "",
            storedparentValue: "",
            whereCondition: "",
            AddSlashInColumn: "",
            ExcludeColumnsFromExcel: ""
        },

        setOptions: function (options) {
            var that = this;

            Widget.fn.setOptions.call(this, options);

            that._templates();
        },

        items: function () {
            return this.tbody.children(':not(.k-grouping-row,.k-detail-row,.k-group-footer)');
        },

        _attachCustomCommandsEvent: function () {
            var that = this,
                columns = that.columns || [],
                command,
                idx,
                length;

            for (idx = 0, length = columns.length; idx < length; idx++) {
                command = columns[idx].command;

                if (command) {
                    attachCustomCommandEvent(that, that.wrapper, command);
                }
            }
        },

        _element: function () {
            var that = this,
                table = that.element;

            if (!table.is("table")) {
                if (that.options.scrollable) {
                    table = that.element.find("> .k-grid-content > table");
                } else {
                    table = that.element.children("table");
                }

                if (!table.length) {
                    table = $("<table />").appendTo(that.element);
                }
            }

            that.table = table.attr("cellspacing", 0);

            that._wrapper();
        },

        _positionColumnResizeHandle: function (container) {
            var that = this,
                scrollable = that.options.scrollable,
                resizeHandle = that.resizeHandle,
                left;

            that.thead.on("mousemove", "th:not(.k-group-cell,.k-hierarchy-cell)", function (e) {
                var th = $(this),
                   position = th.offset().left + this.offsetWidth;

                if (e.clientX > position - indicatorWidth && e.clientX < position + indicatorWidth) {
                    cursor(that.wrapper, th.css('cursor'));

                    if (!resizeHandle) {
                        resizeHandle = that.resizeHandle = $('<div class="k-resize-handle"/>');
                        container.append(resizeHandle);
                    }

                    left = this.offsetWidth;

                    th.prevAll().each(function () {
                        left += this.offsetWidth;
                    });

                    resizeHandle.css({
                        top: scrollable ? 0 : heightAboveHeader(that.wrapper),
                        left: left - indicatorWidth,
                        height: th.outerHeight(),
                        width: indicatorWidth * 3
                    })
                    .data("th", th)
                    .show();

                } else {
                    cursor(that.wrapper, "");

                    if (resizeHandle) {
                        resizeHandle.hide();
                    }
                }
            });
        },

        _resizable: function () {
            var that = this,
                options = that.options,
                container,
                columnStart,
                columnWidth,
                gridWidth,
                col;

            if (options.resizable) {
                container = options.scrollable ? that.wrapper.find(".k-grid-header-wrap") : that.wrapper;

                that._positionColumnResizeHandle(container);

                container.kendoResizable({
                    handle: ".k-resize-handle",
                    hint: function (handle) {
                        return $('<div class="k-grid-resize-indicator" />').css({
                            height: handle.data("th").outerHeight() + that.tbody.attr("clientHeight")
                        });
                    },
                    start: function (e) {
                        var th = $(e.currentTarget).data("th"),
                            index = $.inArray(th[0], th.parent().children(":visible")),
                            contentTable = that.tbody.parent(),
                            footer = that.footer || $();

                        cursor(that.wrapper, th.css('cursor'));

                        if (options.scrollable) {
                            col = that.thead.parent().find("col:eq(" + index + ")")
                                .add(contentTable.children("colgroup").find("col:eq(" + index + ")"))
                                .add(footer.find("colgroup").find("col:eq(" + index + ")"));
                        } else {
                            col = contentTable.children("colgroup").find("col:eq(" + index + ")");
                        }

                        columnStart = e.x.location;
                        columnWidth = th.outerWidth();
                        gridWidth = that.tbody.outerWidth();
                    },
                    resize: function (e) {
                        var width = columnWidth + e.x.location - columnStart,
                            footer = that.footer || $();

                        if (width > 10) {
                            col.css('width', width);

                            if (options.scrollable) {
                                that._footerWidth = gridWidth + e.x.location - columnStart;
                                that.tbody.parent()
                                    .add(that.thead.parent())
                                    .add(footer.find("table"))
                                    .css('width', that._footerWidth);
                            }
                        }
                    },
                    resizeend: function (e) {
                        var th = $(e.currentTarget).data("th"),
                            newWidth = th.outerWidth(),
                            column;

                        cursor(that.wrapper, "");

                        if (columnWidth != newWidth) {
                            column = that.columns[th.parent().find("th:not(.k-group-cell,.k-hierarchy-cell)").index(th)];

                            column.width = newWidth;

                            that.trigger(COLUMNRESIZE, {
                                column: column,
                                oldWidth: columnWidth,
                                newWidth: newWidth
                            });
                        }
                        that.resizeHandle.hide();
                    }
                });
            }
        },

        _draggable: function () {
            var that = this;
            if (that.options.reorderable) {
                that._draggableInstance = that.thead.kendoDraggable({
                    group: kendo.guid(),
                    filter: ".k-header:not(.k-group-cell,.k-hierarchy-cell):visible[" + kendo.attr("field") + "]",
                    hint: function (target) {
                        return $('<div class="k-header k-drag-clue" />')
                            .css({
                                width: target.width(),
                                paddingLeft: target.css("paddingLeft"),
                                paddingRight: target.css("paddingRight"),
                                lineHeight: target.height() + "px",
                                paddingTop: target.css("paddingTop"),
                                paddingBottom: target.css("paddingBottom")
                            })
                            .html(target.attr(kendo.attr("title")) || target.attr(kendo.attr("field")))
                            .prepend('<span class="k-icon k-drag-status k-denied" />');
                    }
                }).data("kendoDraggable");
            }
        },

        _reorderable: function () {
            var that = this;
            if (that.options.reorderable) {
                that.thead.kendoReorderable({
                    draggable: that._draggableInstance,
                    change: function (e) {
                        var column = visibleColumns(that.columns)[e.oldIndex];
                        that.trigger(COLUMNREORDER, {
                            newIndex: e.newIndex,
                            oldIndex: e.oldIndex,
                            column: column
                        });
                        that.reorderColumn(e.newIndex, column);
                    }
                });
            }
        },

        reorderColumn: function (destIndex, column) {
            var that = this,
                sourceIndex = $.inArray(column, that.columns),
                colSourceIndex = $.inArray(column, visibleColumns(that.columns)),
                rows,
                idx,
                length,
                footer = that.footer || that.wrapper.find(".k-grid-footer");

            if (sourceIndex === destIndex) {
                return;
            }

            that.columns.splice(sourceIndex, 1);
            that.columns.splice(destIndex, 0, column);
            that._templates();

            reorder(that.thead.prev().find("col:not(.k-group-col,.k-hierarchy-col)"), colSourceIndex, destIndex);
            if (that.options.scrollable) {
                reorder(that.tbody.prev().find("col:not(.k-group-col,.k-hierarchy-col)"), colSourceIndex, destIndex);
            }

            reorder(that.thead.find(".k-header:not(.k-group-cell,.k-hierarchy-cell)"), sourceIndex, destIndex);

            if (footer && footer.length) {
                reorder(footer.find(".k-grid-footer-wrap>table>colgroup>col:not(.k-group-col,.k-hierarchy-col)"), colSourceIndex, destIndex);
                reorder(footer.find(".k-footer-template>td:not(.k-group-cell,.k-hierarchy-cell)"), sourceIndex, destIndex);
            }

            rows = that.tbody.children(":not(.k-grouping-row,.k-detail-row)");
            for (idx = 0, length = rows.length; idx < length; idx += 1) {
                reorder(rows.eq(idx).find(">td:not(.k-group-cell,.k-hierarchy-cell)"), sourceIndex, destIndex);
            }
        },

        cellIndex: function (td) {
            return $(td).parent().find('td:not(.k-group-cell,.k-hierarchy-cell)').index(td);
        },

        _modelForContainer: function (container) {
            container = $(container);

            if (!container.is("tr") && this._editMode() !== "popup" || container.attr("cellEditable") == "true") {
                container = container.closest("tr");
            }

            var id = container.attr(kendo.attr("uid"));

            return this.dataSource.getByUid(id);
        },

        _editable: function () {
            var that = this,
                editable = that.options.editable,
                handler = function () {
                    var target = document.activeElement,
                        cell = that._editContainer;

                    if (cell && !$.contains(cell[0], target) && cell[0] !== target && !$(target).closest(".k-animation-container").length) {
                        if (that.editable.end()) {
                            that.closeCell();
                        }
                    }
                };

            if (editable) {
                var mode = that._editMode();

                if (mode === "incell") {
                    if (editable.update !== false) {
                        that.wrapper.delegate("tr:not(.k-grouping-row) > td:not(.k-hierarchy-cell,.k-detail-cell,.k-group-cell,:has(a.k-grid-delete))", CLICK, function (e) {
                            var td = $(this);
                            if (td.attr("editMode") != undefined) {
                                if (td.closest("tbody")[0] !== that.tbody[0] || $(e.target).is(":input")) {
                                    return;
                                }

                                if (that.editable) {
                                    if (that.editable.end()) {
                                        that.closeCell();
                                        that.editCell(td);
                                    }
                                } else {
                                    that.editCell(td);
                                }
                            }
                        });

                        that.wrapper.bind("focusin", function (e) {
                            clearTimeout(that.timer);
                            that.timer = null;
                        });
                        that.wrapper.bind("focusout", function (e) {
                            that.timer = setTimeout(handler, 1);
                        });
                    }
                } else {
                    if (editable.update !== false) {
                        that.wrapper.delegate("tbody>tr:not(.k-detail-row,.k-grouping-row):visible a.k-grid-edit", CLICK, function (e) {
                            e.preventDefault();
                            that.editRow($(this).closest("tr"));
                        });
                    }
                }

                if (editable.destroy !== false) {
                    that.wrapper.delegate("tbody>tr:not(.k-detail-row,.k-grouping-row):visible a.k-grid-delete", CLICK, function (e) {
                        e.preventDefault();
                        that.removeRow($(this).closest("tr"));
                    });
                }
            }
        },

        editCell: function (cell) {
            var that = this,
                column = that.columns[that.cellIndex(cell)],
                model = that._modelForContainer(cell);


            if (model && (!model.editable || model.editable(column.field)) && !column.command && column.field && column.celleditable) {

                that._attachModelChange(model);

                that._editContainer = cell;

                that.editable = cell.addClass("k-edit-cell")
                    .kendoEditable({
                        fields: { field: column.field, format: column.format, editor: column.editor, values: column.values },
                        model: model,
                        change: function (e) {
                            if (that.trigger(SAVE, { values: e.values, container: cell, model: model })) {
                                e.preventDefault();
                            }
                        }
                    }).data("kendoEditable");
                if (column.defaulteditable != true)
                    cell.parent().addClass("k-grid-edit-row");
                else

                    cell.parent().removeClass("k-grid-edit-row");

                that.trigger(EDIT, { container: cell, model: model });
            }
        },

        _destroyEditable: function () {
            var that = this;

            if (that.editable) {
                that._detachModelChange();

                that.editable.destroy();
                delete that.editable;

                if (that._editMode() === "popup") {
                    if (that._editContainer.data("kendoWindow") != undefined && that._editContainer.data("kendoWindow") != null)
                        that._editContainer.data("kendoWindow").close();
                }

                that._editContainer = null;
            }
        },

        _attachModelChange: function (model) {
            var that = this;

            that._modelChangeHandler = function (e) {
                that._modelChange({ field: e.field, model: this });
            };

            model.bind("change", that._modelChangeHandler);
        },

        _detachModelChange: function () {
            var that = this,
                container = that._editContainer,
                model = that._modelForContainer(container);

            if (model) {
                model.unbind(CHANGE, that._modelChangeHandler);
            }
        },

        closeCell: function () {
            var that = this,
                cell = that._editContainer.removeClass("k-edit-cell"),
                id = cell.closest("tr").attr(kendo.attr("uid")),
                column = that.columns[that.cellIndex(cell)],
                model = that.dataSource.getByUid(id);

            if (column.defaulteditable != true) {
                cell.parent().removeClass("k-grid-edit-row");
                that._destroyEditable(); // editable should be destoryed before content of the container is changed

                that._displayCell(cell, column, model);

                if (cell.hasClass("k-dirty-cell")) {
                    $('<span class="k-dirty"/>').prependTo(cell);
                }
            }
            else {
                cell.parent().removeClass("k-grid-edit-row");
                cell.addClass("k-edit-cell");
            }
        },

        _displayCell: function (cell, column, dataItem) {
            var that = this,
                state = { storage: {}, count: 0 },
                settings = extend({}, kendo.Template, that.options.templateSettings),
                tmpl = kendo.template(that._cellTmpl(column, state), settings);

            if (state.count > 0) {
                tmpl = proxy(tmpl, state.storage);
            }

            cell.empty().html(tmpl(dataItem));
        },

        removeRow: function (row) {
            var that = this,
                model,
                mode;

            if (!that._confirmation()) {
                return;
            }

            row = $(row).hide();
            model = that._modelForContainer(row);

            if (model && !that.trigger(REMOVE, { row: row, model: model })) {
                that.dataSource.remove(model);

                mode = that._editMode();

                if (mode === "inline" || mode === "popup") {
                    that.dataSource.sync();
                }
            }
        },

        _editMode: function () {
            var mode = "incell",
                editable = this.options.editable;

            if (editable !== true) {
                if (typeof editable == "string") {
                    mode = editable;
                } else {
                    mode = editable.mode || mode;
                }
            }

            return mode;
        },

        editRow: function (row) {
            var that = this,
                model = that._modelForContainer(row),
                mode = that._editMode(),
                container;

            that.cancelRow();

            if (model) {

                that._attachModelChange(model);

                if (mode === "popup") {
                    that._createPopupEditor(model);
                } else if (mode === "inline") {
                    that._createInlineEditor(row, model);
                } else if (mode === "incell") {
                    $(row).children(DATA_CELL).each(function () {
                        var cell = $(this);
                        var column = that.columns[cell.index()];

                        model = that._modelForContainer(cell);

                        if (model && (!model.editable || model.editable(column.field)) && column.field) {
                            that.editCell(cell);
                            return false;
                        }
                    });
                }

                container = that._editContainer;

                container.delegate("a.k-grid-cancel", CLICK, function (e) {
                    e.preventDefault();
                    that.cancelRow();
                });

                container.delegate("a.k-grid-update", CLICK, function (e) {
                    e.preventDefault();
                    that.saveRow();
                });
            }
        },

        _createPopupEditor: function (model) {
            var that = this,
                html = '<div ' + kendo.attr("uid") + '="' + model.uid + '"><div class="k-edit-form-container">',
                column,
                command,
                fields = [],
                idx,
                length,
                tmpl,
                updateText,
                cancelText,
                attr,
                editable = that.options.editable,
                options = isPlainObject(editable) ? editable.window : {},
                settings = extend({}, kendo.Template, that.options.templateSettings);

            if (editable.template) {
                html += (kendo.template(window.unescape(editable.template), settings))(model);

                for (idx = 0, length = that.columns.length; idx < length; idx++) {
                    column = that.columns[idx];
                    if (column.command) {
                        command = getCommand(column.command, "edit");
                    }
                }
            } else {
                for (idx = 0, length = that.columns.length; idx < length; idx++) {
                    column = that.columns[idx];

                    if (!column.command) {
                        html += '<div class="k-edit-label"><label for="' + column.field + '">' + (column.title || column.field || "") + '</label></div>';

                        if ((!model.editable || model.editable(column.field)) && column.field) {
                            fields.push({ field: column.field, format: column.format, editor: column.editor, values: column.values });
                            html += '<div ' + kendo.attr("container-for") + '="' + column.field + '" class="k-edit-field"></div>';
                        } else {
                            var state = { storage: {}, count: 0 };

                            tmpl = kendo.template(that._cellTmpl(column, state), settings);

                            if (state.count > 0) {
                                tmpl = proxy(tmpl, state.storage);
                            }

                            html += '<div class="k-edit-field">' + tmpl(model) + '</div>';
                        }
                    } else if (column.command) {
                        command = getCommand(column.command, "edit");
                    }
                }
            }

            if (command) {
                if (isPlainObject(command)) {
                    if (command.text && isPlainObject(command.text)) {
                        updateText = command.text.update;
                        cancelText = command.text.cancel;
                    }

                    if (command.attr) {
                        attr = command.attr;
                    }
                }
            }

            html += that._createButton({ name: "update", text: updateText, attr: attr }) + that._createButton({ name: "canceledit", text: cancelText, attr: attr });
            html += '</div></div>';

            var container = that._editContainer = $(html)
                .appendTo(that.wrapper).eq(0)
                .kendoWindow(extend({
                    modal: true,
                    resizable: false,
                    draggable: true,
                    title: "Edit",
                    visible: false
                }, options));

            var wnd = container.data("kendoWindow");

            wnd.wrapper.delegate(".k-i-close", "click", function () {
                that.cancelRow();
            });

            that.editable = that._editContainer
                .kendoEditable({
                    fields: fields,
                    model: model,
                    clearContainer: false
                }).data("kendoEditable");

            wnd.center().open();

            that.trigger(EDIT, { container: container, model: model });
        },

        _createInlineEditor: function (row, model) {
            var that = this,
                column,
                cell,
                command,
                fields = [];

            row.children(":not(.k-group-cell,.k-hierarchy-cell)").each(function () {
                cell = $(this);
                column = that.columns[that.cellIndex(cell)];

                if (!column.command && column.field && (!model.editable || model.editable(column.field))) {
                    fields.push({ field: column.field, format: column.format, editor: column.editor, values: column.values });
                    cell.attr("data-container-for", column.field);
                    cell.empty();
                } else if (column.command) {
                    command = getCommand(column.command, "edit");
                    if (command) {
                        cell.empty();

                        var updateText,
                            cancelText,
                            attr;

                        if (isPlainObject(command)) {
                            if (command.text && isPlainObject(command.text)) {
                                updateText = command.text.update;
                                cancelText = command.text.cancel;
                            }

                            if (command.attr) {
                                attr = command.attr;
                            }
                        }

                        $(that._createButton({ name: "update", text: updateText, attr: attr }) +
                            that._createButton({ name: "canceledit", text: cancelText, attr: attr })).appendTo(cell);
                    }
                }
            });

            that._editContainer = row;

            that.editable = row
                .addClass("k-grid-edit-row")
                .kendoEditable({
                    fields: fields,
                    model: model,
                    clearContainer: false
                }).data("kendoEditable");

            that.trigger(EDIT, { container: row, model: model });
        },

        cancelRow: function () {
            var that = this,
                container = that._editContainer,
                model;

            if (container) {
                model = that._modelForContainer(container);

                that.dataSource.cancelChanges(model);

                if (that._editMode() !== "popup") {
                    that._displayRow(container);
                } else {
                    that._displayRow(that.items().filter("[" + kendo.attr("uid") + "=" + model.uid + "]"));
                }

                that._destroyEditable();
            }
        },

        saveRow: function () {
            var that = this,
                container = that._editContainer,
                model = that._modelForContainer(container),
                editable = that.editable;

            if (container && editable && editable.end() &&
                !that.trigger(SAVE, { container: container, model: model })) {

                if (that._editMode() !== "popup") {
                    that._displayRow(container);
                }

                that._destroyEditable();
                that.dataSource.sync();
            }
        },

        _displayRow: function (row) {
            var that = this,
                model = that._modelForContainer(row);

            if (model) {
                row.replaceWith($((row.hasClass("k-alt") ? that.altRowTemplate : that.rowTemplate)(model)));
            }
        },

        _showMessage: function (text) {
            return window.confirm(text);
        },

        _confirmation: function () {
            var that = this,
                editable = that.options.editable,
                confirmation = editable === true || typeof editable === STRING ? DELETECONFIRM : editable.confirmation;

            return confirmation !== false && confirmation != null ? that._showMessage(confirmation) : true;
        },

        cancelChanges: function () {
            this.dataSource.cancelChanges();
        },

        saveChanges: function () {
            var that = this;

            if (((that.editable && that.editable.end()) || !that.editable) && !that.trigger(SAVECHANGES)) {
                that.dataSource.sync();
            }
        },

        addRow: function () {
            var that = this,
                index,
                dataSource = that.dataSource,
                mode = that._editMode(),
                createAt = that.options.editable.createAt || "",
                pageSize = dataSource.pageSize(),
                view = dataSource.view() || [];

            if ((that.editable && that.editable.end()) || !that.editable) {
                if (mode != "incell") {
                    that.cancelRow();
                }

                index = dataSource.indexOf(view[0]);

                if (createAt.toLowerCase() == "bottom") {
                    index += view.length;

                    if (pageSize && !dataSource.options.serverPaging && pageSize <= view.length) {
                        index -= 1;
                    }
                }

                if (index < 0) {
                    index = 0;
                }

                var model = dataSource.insert(index, {}),
                    id = model.uid,
                    row = that.table.find("tr[" + kendo.attr("uid") + "=" + id + "]"),
                    cell = row.children("td:not(.k-group-cell,.k-hierarchy-cell)").first();

                if ((mode === "inline" || mode === "popup") && row.length) {
                    that.editRow(row);
                } else if (cell.length) {
                    that.editCell(cell);
                }
            }
        },

        _toolbar: function () {
            var that = this,
                wrapper = that.wrapper,
                toolbar = that.options.toolbar,
                editable = that.options.editable,
                container,
                template;

            if (toolbar) {
                container = that.wrapper.find(".k-grid-toolbar");

                if (!container.length) {
                    toolbar = isFunction(toolbar) ? toolbar({}) : (typeof toolbar === STRING ? toolbar : that._toolbarTmpl(toolbar).replace(templateHashRegExp, "\\#"));

                    template = proxy(kendo.template(toolbar), that);

                    container = $('<div class="k-toolbar k-grid-toolbar" />')
                        .html(template({}))
                        .prependTo(wrapper);
                }

                if (editable && editable.create !== false) {
                    container.delegate(".k-grid-add", CLICK, function (e) { e.preventDefault(); that.addRow(); })
                        .delegate(".k-grid-cancel-changes", CLICK, function (e) { e.preventDefault(); that.cancelChanges(); })
                        .delegate(".k-grid-save-changes", CLICK, function (e) { e.preventDefault(); that.saveChanges(); });
                }
                //Added By Amit Yadav
                container.on(CLICK, ".k-grid-export", function (e) {
                    e.preventDefault();
                    that.exportToExcel(that);
                });

                container.on(CLICK, ".k-grid-exportAll", function (e) {
                    e.preventDefault();
                    that.exportAllToExcel(that);
                });
                container.on(CLICK, ".k-grid-pdf", function (e) {
                    e.preventDefault();
                    that.saveAsPDF();
                });
            }
        },

        //Added By Amit Yadav
        exportToExcel: function (e) {

            var that = e;
            var data = {
                title: that.options.excel.title,
                page: that.dataSource._page,
                pageSize: that.dataSource._pageSize,
                storedProcedure: that.dataSource.transport.options.read.storedProcedure,
                filter: that.dataSource._filter,
                sort: that.dataSource._sort,
                skip: that.dataSource._skip,
                take: that.dataSource._take,
                //model: JSON.stringify(that.columns)
            };

            $.extend(data, that.dataSource.transport.options.read.data);
            var exceldata;
            if (that.options.excel != undefined) {
                if (that.options.excel.createUrl == 'Services/Rate/OtherChargesService.svc/GetGridData')
                    that.options.excel.createUrl = 'Services/Rate/OtherChargesService.svc/DownloadExcelGridData'
                //else if (that.options.excel.createUrl == 'Services/Rate/RateService.svc/GetGridData')
                //   that.options.excel.createUrl = 'Services/Rate/RateService.svc/DownloadExcelGridData'
            }
            $.ajax({
                type: "POST",
                url: that.options.excel.createUrl,
                contentType: "application/json; charset=utf-8",
                dataType: "json",
                data: JSON.stringify(data),
                success: function (data) {
                    exceldata = data;
                }
            })
            .done(function (e) {

                //Added by Amit Yadav
                var str = "<html><body><table dd='HelloWorld' width='100%' cellspacing=0 border='1px'>";
                //var str2 = '';
                //str1 = "<tr bgcolor='#FF8033'><td>Slab Name</td><td>Start Value</td><td>End Value</td><td>Slab Type</td><td>Rate</td></tr>";
                var col = that.columns;
                col = col.filter(function (i) {
                    return i.title != "Action";
                });
                //---- Added by Arman ali For Excel recoeds with hidden column For Account : 2018-01-03

                //var checkUrl="MASTER/ACCOUNTSERVICE.SVC/GETGRIDDATA";
                // if(checkUrl==true){
                //   col = col.filter(function (i) {
                //        return i.hidden != "true";
                //    });
                // }

                var len = that.dataSource.transport.options.read['url'].toUpperCase().split('SERVICES/');
                if (len.length > 1 && len[1].toUpperCase() == "MASTER/ACCOUNTSERVICE.SVC/GETGRIDDATA" || len[1].toUpperCase() == "RATE/OTHERCHARGESSERVICE.SVC/GETGRIDDATA" || len[1].toUpperCase() == "RATE/RATESERVICE.SVC/GETGRIDDATA" || len[1].toUpperCase() == "SHIPMENT/BOOKINGSERVICE.SVC/GETWMSWAYBILLGRIDDATA") {

                } else {
                    col = col.filter(function (i) {
                        return i.hidden != "true";
                    });
                }


                col = col.filter(function (i) {
                    return i.title != "Warning!!";
                });

                col = col.filter(function (f) {
                    if (!f.template) return true;
                    else
                        return f.template.indexOf('currentProcess') == -1
                });

                if (that.options.ExcludeColumnsFromExcel) {
                    var arrExcludeColumns = that.options.ExcludeColumnsFromExcel.split(',');
                    for (var i = 0; i < arrExcludeColumns.length; i++) {
                        col = col.filter(function (f) {
                            return f.field != arrExcludeColumns[i];
                        });
                    }
                }

                str += "<tr bgcolor='#7bd2f6'>"
                for (var i = 0; i < col.length; i++) {
                    //if (col[i].title != "Slab Name" && col[i].title != "Slab Details with Rate") {
                    str += "<td>" + col[i].title + "</td>";
                    //}
                }
                str += "</tr>";

                for (var i = 0; i < exceldata.Data.length; i++) {

                    //var co = i % 2 == 0 ? "#EFF7FA" : "#FFFFFF";
                    str += "<tr style='background-color:#33F0FF'>";
                    for (var j = 0; j < col.length; j++) {
                        //if (col[j].field != "SlabName" && col[j].field != "SlabDetails") {
                        var res = exceldata.Data[i][col[j].field] || '';
                        //    }
                        //else {
                        //   var resslab = exceldata.Data[i][col[j].field]|| '';

                        //   if (resslab != "") {

                        //    //    if (col[j].field == "SlabName")
                        //        //        {
                        //            //        str1 += "<td>'" +res + "</td>";
                        //            //}
                        //            str2 = '';
                        //            var slabvalue = resslab.split(';')
                        //        for (var k = 0; k < slabvalue.length -1; k++) {
                        //            var slab = slabvalue[k].split('-');
                        //        str2 += "<tr bgcolor='#FFCA33'>";
                        //                str2 += "<td>Weight</td>";
                        //                for (var h = 0; h < slab.length; h++) {

                        //                    str2 += "<td>" + slab[h].split(':')[1]+ "</td>";

                        //                }
                        //                str2 += "</tr>";
                        //                }

                        //                }

                        //    }
                        if (that.options.AddSlashInColumns)
                            if (that.options.AddSlashInColumns == col[j].field)
                                res = "'" + res;

                        if (res != "" && isNaN(res)) {
                            if (res.indexOf("/Date(") != -1) {
                                var temp = col[j].template.indexOf("HH:mm") != -1 ? "dd-MMM-yyyy HH:mm" : "dd-MMM-yyyy";
                                var dt = new Date(parseInt(res.split('(')[1].split(')')[0]));
                                res = "'" + kendo.toString(new Date(dt.getTime() + dt.getTimezoneOffset() * 60000), temp);
                            }
                            else if (res.indexOf("/") != -1 && res.indexOf(":") < 0) {
                                res = "'" + res;
                            }
                        }
                        if (exceldata.StoredProcedure == "spReservation_GetList_AWB" || exceldata.StoredProcedure == "spReservation_GetList") {
                            if (col[j].field == "BookingRefNo" || col[j].field == "AWBNo") {
                                if (res != "")
                                    str += "<td>'" + res + "</td>";
                                else
                                    str += "<td>" + res + "</td>";
                            }
                            else
                                str += "<td>" + res + "</td>";
                        }
                        else
                            str += "<td>" + res + "</td>";
                    }
                    str += "</tr>"; //+str1 +str2;
                    str += "<br/>"
                }
                str += "</table></body></html>";
                exportToExcelNew(str, that.options.excel.fileName)
                //var data_type = 'data:application/vnd.ms-excel';
                //var a = document.createElement('a');
                //a.href = data_type + ', ' + encodeURIComponent(str);
                //a.download = that.options.excel.fileName + '_.xls';
                //a.click();

            });
        },
        exportAllToExcel: function (e) {
            var that = e;
            var data = {
                title: that.options.allexcel.title,
                page: 1,
                pageSize: that.dataSource._total > 3501 ? 3500 : that.dataSource._total,
                storedProcedure: that.dataSource.transport.options.read.storedProcedure,
                filter: that.dataSource._filter,
                sort: that.dataSource._sort,
                // model: JSON.stringify(that.columns)
            };

            $.extend(data, that.dataSource.transport.options.read.data);
            var exceldata;
            if (that.options.allexcel != undefined) {
                if (that.options.allexcel.createUrl == 'Services/Rate/OtherChargesService.svc/GetGridData')
                    that.options.allexcel.createUrl = 'Services/Rate/OtherChargesService.svc/DownloadExcelGridData'
                //else if (that.options.allexcel.createUrl == 'Services/Rate/RateService.svc/GetGridData')
                //    that.options.allexcel.createUrl = 'Services/Rate/RateService.svc/DownloadExcelGridData'
            }
            $.ajax({
                type: "POST",
                url: that.options.allexcel.createUrl,
                contentType: "application/json; charset=utf-8",
                dataType: "json",
                data: JSON.stringify(data),
                success: function (data) {
                    exceldata = data;

                }
            })
            .done(function (e) {
                //Added by Amit Yadav
                var str = "<html><body><table width='100%' cellspacing=0 border='1px'>";
                //var str2 = '';
                //str1 = "<tr bgcolor='#FF8033'><td>Slab Name</td><td>Start Value</td><td>End Value</td><td>Slab Type</td><td>Rate</td></tr>";
                var col = that.columns;

                col = col.filter(function (i) {
                    return i.title != "Action";
                });
                //---- Added by Arman ali For Excel recoeds with hidden column For Account : 2018-01-03
                var len = that.dataSource.transport.options.read['url'].toUpperCase().split('SERVICES/');
                if (len.length > 1 && len[1].toUpperCase() == "MASTER/ACCOUNTSERVICE.SVC/GETGRIDDATA" || len[1].toUpperCase() == "RATE/OTHERCHARGESSERVICE.SVC/GETGRIDDATA" || len[1].toUpperCase() == "RATE/RATESERVICE.SVC/GETGRIDDATA"|| len[1].toUpperCase() == "SHIPMENT/BOOKINGSERVICE.SVC/GETWMSWAYBILLGRIDDATA") {

                } else {
                    col = col.filter(function (i) {
                        return i.hidden != "true";
                    });
                }

                col = col.filter(function (i) {
                    return i.title != "Warning!!";
                });
                col = col.filter(function (f) {
                    if (!f.template) return true;
                    else
                        return f.template.indexOf('currentProcess') == -1
                });
                 

                if (that.options.ExcludeColumnsFromExcel) {
                    var arrExcludeColumns = that.options.ExcludeColumnsFromExcel.split(',');
                    for (var i = 0; i < arrExcludeColumns.length; i++) {
                        col = col.filter(function (f) {
                            return f.field != arrExcludeColumns[i];
                        });
                    }
                }

                str += "<tr bgcolor='#7bd2f6'>"
                for (var i = 0; i < col.length; i++) {
                    //if (col[i].title != "Slab Name" && col[i].title != "Slab Details with Rate") {
                    str += "<td>" + col[i].title + "</td>";
                    //}
                }
                str += "</tr>";
                for (var i = 0; i < exceldata.Data.length; i++) {

                    //var co = i % 2 == 0 ? "#EFF7FA" : "#33F0FF";
                    //str += "<tr style='background-color:" + co + "'>";
                    str += "<tr style='background-color:#33F0FF'>";
                    for (var j = 0; j < col.length; j++) {

                        //if (col[j].field != "SlabName" && col[j].field != "SlabDetails") {
                        var res = exceldata.Data[i][col[j].field] || '';
                        //}
                        //else {
                        //    var resslab = exceldata.Data[i][col[j].field] || '';

                        //    if (resslab != "") {

                        //        //    if (col[j].field == "SlabName")
                        //        //        {
                        //        //        str1 += "<td>'" +res + "</td>";
                        //        //}
                        //        str2 = '';
                        //        var slabvalue = resslab.split(';')
                        //        for (var k = 0; k < slabvalue.length - 1; k++) {
                        //            var slab = slabvalue[k].split('-');
                        //            str2 += "<tr bgcolor='#FFCA33'>";
                        //            str2 += "<td>Weight</td>";
                        //            for (var h = 0; h < slab.length; h++) {

                        //                str2 += "<td>" + slab[h].split(':')[1] + "</td>";

                        //            }
                        //            str2 += "</tr>";
                        //        }

                        //    }

                        //}

                        if (that.options.AddSlashInColumns)
                            if (that.options.AddSlashInColumns == col[j].field)
                                res = "'" + res;

                        if (res != "" && isNaN(res)) {
                            if (res.indexOf("/Date(") != -1) {
                                var temp = col[j].template.indexOf("HH:mm") != -1 ? "dd-MMM-yyyy HH:mm" : "dd-MMM-yyyy";
                                var dt = new Date(parseInt(res.split('(')[1].split(')')[0]));
                                res = "'" + kendo.toString(new Date(dt.getTime() + dt.getTimezoneOffset() * 60000), temp);
                            }

                                //Created By NEHAL
                            else if (res.indexOf("/") != -1 && res.indexOf(":") < 0) {
                                res = "'" + res;
                            }
                        }
                        if (exceldata.StoredProcedure == "spReservation_GetList_AWB" || exceldata.StoredProcedure == "spReservation_GetList") {
                            if (col[j].field == "BookingRefNo" || col[j].field == "AWBNo") {
                                if (res != "")
                                    str += "<td>'" + res + "</td>";
                                else
                                    str += "<td>" + res + "</td>";
                            }
                            else
                                str += "<td>" + res + "</td>";
                        }
                        else
                            str += "<td>" + res + "</td>";
                    }
                    str += "</tr>";// + str1 + str2;
                    str += "<br/>"
                    //str += "<tr bgcolor='#7bd2f6'><td>Slab Type</td><td>Start Value</td><td>End Value</td><td>Slab Value</td><td>Flat Rate</td></tr>"
                    //var co = i % 2 == 0 ? "#EFF7FA" : "#FFFFFF";
                    //str += "<tr style='background-color:" + co + "'>";

                    //str += "<td>'" + res + "</td>";
                    //str += "</tr>";
                }
                str += "</table></body></html>";
                var data_type = 'data:application/vnd.ms-excel';
                //var a = document.createElement('a');
                //a.href = data_type + ', ' + encodeURIComponent(str);
                //a.download = that.options.allexcel.fileName + '_.xls';
                //a.click();
                exportToExcelNew(str, that.options.allexcel.fileName);
            });
        },
        _toolbarTmpl: function (commands) {
            var that = this,
                idx,
                length,
                html = "";

            if (isArray(commands)) {
                for (idx = 0, length = commands.length; idx < length; idx++) {
                    html += that._createButton(commands[idx]);
                }
            }
            return html;
        },

        _createButton: function (command) {
            var template = command.template || COMMANDBUTTONTMPL,
                commandName = typeof command === STRING ? command : command.name || command.text,
                options = {
                    className: "k-grid-" + commandName, text: commandName, imageClass: "", attr: "", iconClass: ""
                };

            if (!commandName && !(isPlainObject(command) && command.template)) {
                throw new Error("Custom commands should have name specified");
            }

            if (isPlainObject(command)) {
                if (command.className) {
                    command.className += " " + options.className;
                }

                if (commandName === "edit" && isPlainObject(command.text)) {
                    command = extend(true, {
                    }, command);
                    command.text = command.text.edit;
                }

                if (command.attr && isPlainObject(command.attr)) {
                    command.attr = stringifyAttributes(command.attr);
                }

                options = extend(true, options, defaultCommands[commandName], command);
            } else {
                options = extend(true, options, defaultCommands[commandName]);
            }

            return kendo.template(template)(options);
        },

        _groupable: function () {
            var that = this,
                wrapper = that.wrapper,
                groupable = that.options.groupable;

            if (!that.groupable) {
                that.table.delegate(".k-grouping-row .k-i-collapse, .k-grouping-row .k-i-expand", CLICK, function (e) {
                    var element = $(this),
                    group = element.closest("tr");

                    if (element.hasClass('k-i-collapse')) {
                        that.collapseGroup(group);
                    } else {
                        that.expandGroup(group);
                    }
                    e.preventDefault();
                    e.stopPropagation();
                });
            }

            if (groupable) {
                if (!wrapper.has("div.k-grouping-header")[0]) {
                    $("<div />").addClass("k-grouping-header").html("&nbsp;").prependTo(wrapper);
                }

                if (that.groupable) {
                    that.groupable.destroy();
                }

                that.groupable = new Groupable(wrapper, extend({
                }, groupable, {
                    draggable: that._draggableInstance,
                    groupContainer: ">div.k-grouping-header",
                    dataSource: that.dataSource,
                    filter: ".k-header:not(.k-group-cell,.k-hierarchy-cell):visible[" + kendo.attr("field") + "]",
                    allowDrag: that.options.reorderable
                }));
            }
        },

        _selectable: function () {
            var that = this,
                multi,
                cell,
                selectable = that.options.selectable;

            if (selectable) {
                multi = typeof selectable === STRING && selectable.toLowerCase().indexOf("multiple") > -1;
                cell = typeof selectable === STRING && selectable.toLowerCase().indexOf("cell") > -1;

                that.selectable = new kendo.ui.Selectable(that.table, {
                    filter: ">" + (cell ? SELECTION_CELL_SELECTOR : "tbody>tr:not(.k-grouping-row,.k-detail-row,.k-group-footer)"),
                    multiple: multi,
                    change: function () {
                        that.trigger(CHANGE);
                    }
                });

                if (that.options.navigatable) {
                    that.wrapper.keydown(function (e) {
                        var current = that.current();
                        if (e.keyCode === keys.SPACEBAR && e.target == that.wrapper[0] && !current.hasClass("k-edit-cell")) {
                            e.preventDefault();
                            e.stopPropagation();
                            current = cell ? current : current.parent();

                            if (multi) {
                                if (!e.ctrlKey) {
                                    that.selectable.clear();
                                } else {
                                    if (current.hasClass(SELECTED)) {
                                        current.removeClass(SELECTED);
                                        current = null;
                                    }
                                }
                            } else {
                                that.selectable.clear();
                            }

                            that.selectable.value(current);
                        }
                    });
                }
            }
        },

        clearSelection: function () {
            var that = this;
            that.selectable.clear();
            that.trigger(CHANGE);
        },

        select: function (items) {
            var that = this,
                selectable = that.selectable;

            items = $(items);
            if (items.length) {
                if (!selectable.options.multiple) {
                    selectable.clear();
                    items = items.first();
                }
                selectable.value(items);
                return;
            }

            return selectable.value();
        },

        current: function (element) {
            var that = this,
                scrollable = that.options.scrollable,
                current = that._current;

            if (element !== undefined && element.length) {
                if (!current || current[0] !== element[0]) {
                    element.addClass(FOCUSED);
                    if (current) {
                        current.removeClass(FOCUSED);
                    }
                    that._current = element;

                    if (element.length && scrollable) {
                        that._scrollTo(element.parent()[0], that.content[0]);
                        if (scrollable.virtual) {
                            that._scrollTo(element[0], that.content.find(">.k-virtual-scrollable-wrap")[0]);
                        } else {
                            that._scrollTo(element[0], that.content[0]);
                        }
                    }
                }
            }

            return that._current;
        },

        _scrollTo: function (element, container) {
            var isHorizontal = element.tagName.toLowerCase() === "td",
                elementOffset = element[isHorizontal ? "offsetLeft" : "offsetTop"],
                elementOffsetDir = element[isHorizontal ? "offsetWidth" : "offsetHeight"],
                containerScroll = container[isHorizontal ? "scrollLeft" : "scrollTop"],
                containerOffsetDir = container[isHorizontal ? "clientWidth" : "clientHeight"],
                bottomDistance = elementOffset + elementOffsetDir;

            container[isHorizontal ? "scrollLeft" : "scrollTop"] = containerScroll > elementOffset ?
                elementOffset :
                                        (bottomDistance > (containerScroll + containerOffsetDir) ?
                                            (bottomDistance - containerOffsetDir) : containerScroll);
        },

        _navigatable: function () {
            var that = this,
            wrapper = that.wrapper,
            table = that.table.addClass(FOCUSABLE),
            currentProxy = proxy(that.current, that),
            selector = "." + FOCUSABLE + " " + CELL_SELECTOR,
            browser = $.browser,
            clickCallback = function (e) {
                var currentTarget = $(e.currentTarget);
                if (currentTarget.closest("tbody")[0] !== that.tbody[0]) {
                    return;
                }

                currentProxy(currentTarget);
                if (!$(e.target).is(":button,a,:input,a>.k-icon,textarea,span.k-icon,.k-input")) {
                    setTimeout(function () {
                        wrapper.focus();
                    });
                }

                e.stopPropagation();
            };

            if (that.options.navigatable) {
                wrapper.bind({
                    focus: function () {
                        var current = that._current;
                        if (current && current.is(":visible")) {
                            current.addClass(FOCUSED);
                        } else {
                            currentProxy(that.table.find(FIRST_CELL_SELECTOR));
                        }
                    },
                    focusout: function (e) {
                        if (that._current) {
                            that._current.removeClass(FOCUSED);
                        }
                        e.stopPropagation();
                    },
                    keydown: function (e) {
                        var key = e.keyCode,
                                current = that.current(),
                                shiftKey = e.shiftKey,
                                dataSource = that.dataSource,
                                pageable = that.options.pageable,
                                canHandle = !$(e.target).is(":button,a,:input,a>.t-icon"),
                                isInCell = that._editMode() == "incell",
                                currentIndex,
                                cell,
                                handled = false;

                        if (canHandle && keys.UP === key) {
                            currentProxy(current ? current.parent().prevAll(ROW_SELECTOR).last().children(":eq(" + current.index() + "),:eq(0)").last() : table.find(FIRST_CELL_SELECTOR));
                            handled = true;
                        } else if (canHandle && keys.DOWN === key) {
                            currentProxy(current ? current.parent().nextAll(ROW_SELECTOR).first().children(":eq(" + current.index() + "),:eq(0)").last() : table.find(FIRST_CELL_SELECTOR));
                            handled = true;
                        } else if (canHandle && keys.LEFT === key) {
                            currentProxy(current ? current.prevAll(DATA_CELL + ":first") : table.find(FIRST_CELL_SELECTOR));
                            handled = true;
                        } else if (canHandle && keys.RIGHT === key) {
                            currentProxy(current ? current.nextAll(":visible:first") : table.find(FIRST_CELL_SELECTOR));
                            handled = true;
                        } else if (canHandle && pageable && keys.PAGEDOWN == key) {
                            that._current = null;
                            dataSource.page(dataSource.page() + 1);
                            handled = true;
                        } else if (canHandle && pageable && keys.PAGEUP == key) {
                            that._current = null;
                            dataSource.page(dataSource.page() - 1);
                            handled = true;
                        } else if (that.options.editable) {
                            current = current ? current : table.find(FIRST_CELL_SELECTOR);
                            if (keys.ENTER == key || keys.F2 == key) {
                                that._handleEditing(current);
                                handled = true;
                            } else if (keys.TAB == key && isInCell) {
                                cell = shiftKey ? current.prevAll(DATA_CELL + ":first") : current.nextAll(":visible:first");
                                if (!cell.length) {
                                    cell = current.parent()[shiftKey ? "prevAll" : "nextAll"]("tr:not(.k-grouping-row,.k-detail-row):visible")
                                        .children(DATA_CELL + (shiftKey ? ":last" : ":first"));
                                }

                                if (cell.length) {
                                    that._handleEditing(current, cell);
                                    handled = true;
                                }
                            } else if (keys.ESC == key && that._editContainer) {
                                if (that._editContainer.has(current[0]) || current[0] === that._editContainer[0]) {
                                    if (isInCell) {
                                        that.closeCell();
                                    } else {
                                        currentIndex = that.items().index(current.parent());
                                        document.activeElement.blur();
                                        that.cancelRow();
                                        if (currentIndex >= 0) {
                                            that.current(that.items().eq(currentIndex).children().filter(DATA_CELL).first());
                                        }
                                    }

                                    if (browser.msie && parseInt(browser.version, 10) < 9) {
                                        document.body.focus();
                                    }
                                    wrapper.focus();
                                    handled = true;
                                }
                            }
                        }

                        if (handled) {
                            e.preventDefault();
                            e.stopPropagation();
                        }
                    }
                });

                wrapper.delegate(selector, "mousedown", clickCallback);
            }
        },

        _handleEditing: function (current, next) {
            var that = this,
                mode = that._editMode(),
                editContainer = that._editContainer,
                idx,
                isEdited;

            if (mode == "incell") {
                isEdited = current.hasClass("k-edit-cell");
            } else {
                isEdited = current.parent().hasClass("k-grid-edit-row");
            }

            if (that.editable) {
                if ($.contains(editContainer[0], document.activeElement)) {
                    $(document.activeElement).blur();
                }

                if (that.editable.end()) {
                    if (mode == "incell") {
                        that.closeCell();
                    } else {
                        if (current.parent()[0] === editContainer[0]) {
                            idx = that.items().index(current.parent());
                        } else {
                            idx = that.items().index(editContainer);
                        }
                        that.saveRow();
                        that.current(that.items().eq(idx).children().filter(DATA_CELL).first());
                        isEdited = true;
                    }
                } else {
                    if (mode == "incell") {
                        that.current(editContainer);
                    } else {
                        that.current(editContainer.children().filter(DATA_CELL).first());
                    }
                    editContainer.find(":input:visible:first").focus();
                    return;
                }
            }

            if (next) {
                that.current(next);
            }

            that.wrapper.focus();
            if ((!isEdited && !next) || next) {
                if (mode == "incell") {
                    that.editCell(that.current());
                } else {
                    that.editRow(that.current().parent());
                }
            }
        },

        _wrapper: function () {
            var that = this,
                table = that.table,
                height = that.options.height,
                wrapper = that.element;

            if (!wrapper.is("div")) {
                wrapper = wrapper.wrap("<div/>").parent();
            }

            that.wrapper = wrapper.addClass("k-grid k-widget")
                                  .attr(TABINDEX, math.max(table.attr(TABINDEX) || 0, 0));

            table.removeAttr(TABINDEX);

            if (height) {
                that.wrapper.css(HEIGHT, height);
                table.css(HEIGHT, "auto");
            }
        },

        _tbody: function () {
            var that = this,
                table = that.table,
                tbody;

            tbody = table.find(">tbody");

            if (!tbody.length) {
                tbody = $("<tbody/>").appendTo(table);
            }

            that.tbody = tbody;
        },

        _scrollable: function () {
            var that = this,
                header,
                table,
                options = that.options,
                scrollable = options.scrollable,
                scrollbar = kendo.support.scrollbar();

            if (scrollable) {
                header = that.wrapper.children(".k-grid-header");

                if (!header[0]) {
                    header = $('<div class="k-grid-header" />').insertBefore(that.table);
                }

                // workaround for IE issue where scroll is not raised if container is same width as the scrollbar
                //commented by suman kumar. 02-AUG-2013
                //header.css("padding-right", scrollable.virtual ? scrollbar + 1 : scrollbar);
                table = $('<table cellspacing="0" />');
                table.append(that.thead);
                header.empty().append($('<div class="k-grid-header-wrap" />').append(table));

                that.content = that.table.parent();

                if (that.content.is(".k-virtual-scrollable-wrap")) {
                    that.content = that.content.parent();
                }

                if (!that.content.is(".k-grid-content, .k-virtual-scrollable-wrap")) {
                    that.content = that.table.wrap('<div class="k-grid-content" />').parent();
                }
                if (scrollable !== true && scrollable.virtual && !that.virtualScrollable) {
                    that.virtualScrollable = new VirtualScrollable(that.content, {
                        dataSource: that.dataSource,
                        itemHeight: proxy(that._averageRowHeight, that)
                    });
                }

                that.scrollables = header.children(".k-grid-header-wrap"); // the footer does not exists here yet!

                if (scrollable.virtual) {
                    that.content.find(">.k-virtual-scrollable-wrap").bind('scroll', function () {
                        that.scrollables.scrollLeft(this.scrollLeft);
                    });
                } else {
                    that.content.bind('scroll', function () {
                        that.scrollables.scrollLeft(this.scrollLeft);
                    });

                    var touchScroller = kendo.touchScroller(that.content);
                    if (touchScroller && touchScroller.movable) {
                        touchScroller.movable.bind("change", function (e) {
                            that.scrollables.scrollLeft(-e.sender.x);
                        });
                    }
                }
            }
        },

        _setContentHeight: function () {
            var that = this,
options = that.options,
height = that.wrapper.innerHeight(),
header = that.wrapper.children(".k-grid-header"),
scrollbar = kendo.support.scrollbar();

            if (options.scrollable) {

                height -= header.outerHeight();

                if (that.pager) {
                    height -= that.pager.element.outerHeight();
                }

                if (options.groupable) {
                    height -= that.wrapper.children(".k-grouping-header").outerHeight();
                }

                if (options.toolbar) {
                    height -= that.wrapper.children(".k-grid-toolbar").outerHeight();
                }

                if (that.footerTemplate) {
                    height -= that.wrapper.children(".k-grid-footer").outerHeight();
                }

                var isGridHeightSet = function (el) {
                    var initialHeight, newHeight;
                    if (el[0].style.height) {
                        return true;
                    } else {
                        initialHeight = el.height();
                    }

                    el.height("auto");
                    newHeight = el.height();

                    if (initialHeight != newHeight) {
                        el.height("");
                        return true;
                    }
                    el.height("");
                    return false;
                };

                if (isGridHeightSet(that.wrapper)) { // set content height only if needed
                    if (height > scrollbar * 2) { // do not set height if proper scrollbar cannot be displayed
                        that.content.height(height);
                    } else {
                        that.content.height(scrollbar * 2 + 1);
                    }
                }
            }
        },

        _averageRowHeight: function () {
            var that = this,
                rowHeight = that._rowHeight;

            if (!that._rowHeight) {
                that._rowHeight = rowHeight = that.table.outerHeight() / that.table[0].rows.length;
                that._sum = rowHeight;
                that._measures = 1;
            }

            var currentRowHeight = that.table.outerHeight() / that.table[0].rows.length;

            if (rowHeight !== currentRowHeight) {
                that._measures++;
                that._sum += currentRowHeight;
                that._rowHeight = that._sum / that._measures;
            }
            return rowHeight;
        },

        _dataSource: function () {
            var that = this,
options = that.options,
pageable,
                dataSource = options.dataSource;

            dataSource = isArray(dataSource) ? {
                data: dataSource
            } : dataSource;

            if (isPlainObject(dataSource)) {
                extend(dataSource, {
                    table: that.table, fields: that.columns
                });

                pageable = options.pageable;

                if (isPlainObject(pageable) && pageable.pageSize !== undefined) {
                    dataSource.pageSize = pageable.pageSize;
                }
            }

            if (that.dataSource && that._refreshHandler) {
                that.dataSource.unbind(CHANGE, that._refreshHandler)
                                    .unbind(REQUESTSTART, that._requestStartHandler)
                                .unbind(ERROR, that._errorHandler);
            } else {
                that._refreshHandler = proxy(that.refresh, that);
                that._requestStartHandler = proxy(that._requestStart, that);
                that._errorHandler = proxy(that._error, that);
            }

            that.dataSource = DataSource.create(dataSource)
                                .bind(CHANGE, that._refreshHandler)
                                .bind(REQUESTSTART, that._requestStartHandler)
                                .bind(ERROR, that._errorHandler);
        },

        _error: function () {
            this._progress(false);
        },

        _requestStart: function () {
            this._progress(true);
        },

        _modelChange: function (e) {
            var that = this,
                model = e.model,
                row = that.tbody.find("tr[" + kendo.attr("uid") + "=" + model.uid + "]"),
                cell,
                column,
                isAlt = row.hasClass("k-alt"),
                tmp,
                idx,
                length;

            if (row.children(".k-edit-cell").length && !that.options.rowTemplate) {
                row.children(":not(.k-group-cell,.k-hierarchy-cell)").each(function () {
                    cell = $(this);
                    column = that.columns[that.cellIndex(cell)];

                    if (column.field === e.field) {
                        if (!cell.hasClass("k-edit-cell")) {
                            that._displayCell(cell, column, model);
                            $('<span class="k-dirty"/>').prependTo(cell);
                        } else {
                            cell.addClass("k-dirty-cell");
                        }
                    }
                });

            } else if (!row.hasClass("k-grid-edit-row")) {
                tmp = $((isAlt ? that.altRowTemplate : that.rowTemplate)(model));

                row.replaceWith(tmp);

                for (idx = 0, length = that.columns.length; idx < length; idx++) {
                    column = that.columns[idx];

                    if (column.field === e.field) {
                        cell = tmp.children(":not(.k-group-cell,.k-hierarchy-cell)").eq(idx);
                        $('<span class="k-dirty"/>').prependTo(cell);
                    }
                }
                that.trigger("itemChange", {
                    item: tmp, data: model, ns: ui
                });
            }

        },

        _pageable: function () {
            var that = this,
wrapper,
pageable = that.options.pageable;

            if (pageable) {
                wrapper = that.wrapper.children("div.k-grid-pager");

                if (!wrapper.length) {
                    wrapper = $('<div class="k-pager-wrap k-grid-pager"/>').appendTo(that.wrapper);
                }

                if (that.pager) {
                    that.pager.destroy();
                }

                if (typeof pageable === "object" && pageable instanceof kendo.ui.Pager) {
                    that.pager = pageable;
                } else {

                    that.pager = new kendo.ui.Pager(wrapper, extend({
                    }, pageable, { dataSource: that.dataSource }), that.options.filterable);
                }
            }
        },

        _footer: function () {
            var that = this,
                aggregates = that.dataSource.aggregates(),
                html = "",
                footerTemplate = that.footerTemplate,
                options = that.options,
                footer;

            if (footerTemplate) {
                aggregates = !isEmptyObject(aggregates) ? aggregates : buildEmptyAggregatesObject(that.dataSource.aggregate());

                html = $(that._wrapFooter(footerTemplate(aggregates)));
                footer = that.footer || that.wrapper.find(".k-grid-footer");

                if (footer.length) {
                    var tmp = html;

                    footer.replaceWith(tmp);
                    that.footer = tmp;
                } else {
                    if (options.scrollable) {
                        that.footer = options.pageable ? html.insertBefore(that.wrapper.children("div.k-grid-pager")) : html.appendTo(that.wrapper);
                    } else {
                        that.footer = html.insertBefore(that.tbody);
                    }
                }

                if (options.scrollable) {
                    var containsFooter = false;
                    that.scrollables.each(function () {
                        if ($(this).hasClass("k-grid-footer-wrap")) {
                            containsFooter = true;
                        }
                    });
                    if (!containsFooter) {
                        that.scrollables = that.scrollables.add(that.footer.children(".k-grid-footer-wrap"));
                    }
                }

                if (options.resizable && that._footerWidth) {
                    that.footer.find("table").css('width', that._footerWidth);
                }
            }
        },

        _wrapFooter: function (footerRow) {
            var that = this,
                html = "";

            if (that.options.scrollable) {
                html = $('<div class="k-grid-footer"><div class="k-grid-footer-wrap"><table cellspacing="0"><tbody>' + footerRow + '</tbody></table></div></div>');
                that._appendCols(html.find("table"));
                return html;
            }

            return '<tfoot class="k-grid-footer">' + footerRow + '</tfoot>';
        },

        _columnMenu: function () {
            var that = this,
                menu,
                columns = that.columns,
                column,
                options = that.options,
                columnMenu = options.columnMenu,
                menuOptions,
                sortable,
                filterable,
                cell;

            if (columnMenu) {
                if (typeof columnMenu == "boolean") {
                    columnMenu = {
                    };
                }

                that.thead
                    .find("th:not(.k-hierarchy-cell,.k-group-cell)")
                    .each(function (index) {
                        column = columns[index];
                        cell = $(this);

                        if (!column.command && (column.field || cell.attr("data-" + kendo.ns + "field"))) {
                            menu = cell.data("kendoColumnMenu");
                            if (menu) {
                                menu.destroy();
                            }
                            sortable = column.sortable !== false && columnMenu.sortable !== false ? options.sortable : false;
                            filterable = options.filterable && column.filterable !== false && columnMenu.filterable !== false ? extend({
                            }, column.filterable, options.filterable) : false;
                            menuOptions = {
                                dataSource: that.dataSource,
                                values: column.values,
                                columns: columnMenu.columns,
                                sortable: sortable,
                                filterable: filterable,
                                messages: columnMenu.messages,
                                owner: that
                            };

                            cell.kendoColumnMenu(menuOptions);
                        }
                    });
            }
        },

        _filterable: function () {
            var that = this,
columns = that.columns,
cell,
filterMenu,
filterable = that.options.filterable;

            if (filterable && !that.options.columnMenu) {
                that.thead
                    .find("th:not(.k-hierarchy-cell,.k-group-cell)")
                    .each(function (index) {
                        cell = $(this);
                        if (columns[index].filterable !== false && !columns[index].command && (columns[index].field || cell.attr("data-" + kendo.ns + "field"))) {
                            filterMenu = cell.data("kendoFilterMenu");
                            if (filterMenu) {
                                filterMenu.destroy();
                            }
                            cell.kendoFilterMenu(extend(true, {
                            }, filterable, columns[index].filterable, {
                                dataSource: that.dataSource, values: columns[index].values
                            }));
                        }
                    });
            }
        },

        _sortable: function () {
            var that = this,
                columns = that.columns,
                column,
                sortable = that.options.sortable;

            if (sortable) {
                that.thead
                    .find("th:not(.k-hierarchy-cell,.k-group-cell)")
                        .each(function (index) {
                            column = columns[index];
                            if (column.sortable !== false && !column.command && column.field) {
                                $(this).attr("data-" + kendo.ns + "field", column.field).kendoSortable(extend({}, sortable, {
                                    dataSource: that.dataSource
                                }));
                            }
                        });
            }
        },

        _columns: function (columns) {
            var that = this,
            table = that.table,
            encoded,
            cols = table.find("col"),
            dataSource = that.options.dataSource;

            // using HTML5 data attributes as a configuration option e.g. <th data-field="foo">Foo</foo>
            columns = columns.length ? columns : map(table.find("th"), function (th, idx) {
                th = $(th);
                var sortable = th.attr(kendo.attr("sortable")),
                    filterable = th.attr(kendo.attr("filterable")),
                    type = th.attr(kendo.attr("type")),
                    groupable = th.attr(kendo.attr("groupable")),
                    field = th.attr(kendo.attr("field")),
                    menu = th.attr(kendo.attr("menu"));

                if (!field) {
                    field = th.text().replace(/\s|[^A-z0-9]/g, "");
                }

                return {
                    field: field,
                    type: type,
                    sortable: sortable !== "false",
                    filterable: filterable !== "false",
                    groupable: groupable !== "false",
                    menu: menu,
                    template: th.attr(kendo.attr("template")),
                    width: cols.eq(idx).css("width")
                };
            });

            encoded = !(that.table.find("tbody tr").length > 0 && (!dataSource || !dataSource.transport));

            that.columns = map(columns, function (column) {
                column = typeof column === STRING ? { field: column } : column;
                if (column.hidden) {
                    column.attributes = addHiddenStyle(column.attributes);
                    column.footerAttributes = addHiddenStyle(column.footerAttributes);
                    column.headerAttributes = addHiddenStyle(column.headerAttributes);
                }

                return extend({
                    encoded: encoded
                }, column);
            });
        },

        _tmpl: function (rowTemplate, alt) {
            var that = this,
                settings = extend({
                }, kendo.Template, that.options.templateSettings),
                idx,
                length = that.columns.length,
                template,
                state = {
                    storage: {}, count: 0
                },
                column,
                type,
                hasDetails = that._hasDetails(),
                className = [],
                groups = that.dataSource.group().length;

            if (!rowTemplate) {
                rowTemplate = "<tr";

                if (alt) {
                    className.push("k-alt");
                }

                if (hasDetails) {
                    className.push("k-master-row");
                }

                if (className.length) {
                    rowTemplate += ' class="' + className.join(" ") + '"';
                }

                if (length) { // data item is an object
                    rowTemplate += ' ' + kendo.attr("uid") + '="#=uid#"';
                }

                rowTemplate += ">";

                if (groups > 0) {
                    rowTemplate += groupCells(groups);
                }

                if (hasDetails) {
                    rowTemplate += '<td class="k-hierarchy-cell"><a class="k-icon k-plus" href="\\#"></a></td>';
                }

                for (idx = 0; idx < length; idx++) {
                    column = that.columns[idx];
                    template = column.template;
                    type = typeof template;
                    var cellEditable = false;
                    if (column.celleditable != undefined)
                        cellEditable = column.celleditable;

                    var defaultEditable = false;
                    if (column.defaulteditable != undefined)
                        defaultEditable = column.defaulteditable;
                    rowTemplate += "<td " + (column.field != undefined ? "data-column='" + column.field + "'" : "") + " " + stringifyAttributes(column.attributes) + "cellEditable=" + cellEditable + " editMode=" + defaultEditable + ">";
                    rowTemplate += that._cellTmpl(column, state);

                    rowTemplate += "</td>";
                }

                rowTemplate += "</tr>";
            }

            rowTemplate = kendo.template(rowTemplate, settings);

            if (state.count > 0) {
                return proxy(rowTemplate, state.storage);
            }

            return rowTemplate;
        },

        _headerCellText: function (column) {
            var that = this,
                settings = extend({
                }, kendo.Template, that.options.templateSettings),
                template = column.headerTemplate,
                type = typeof (template),
                text = column.title || column.field || "";

            if (type === FUNCTION) {
                text = kendo.template(template, settings)({
                });
            } else if (type === STRING) {
                text = template;
            }
            return text;
        },

        _cellTmpl: function (column, state) {
            var that = this,
                settings = extend({}, kendo.Template, that.options.templateSettings),
                template = column.template,
                    paramName = settings.paramName,
                html = "",
                idx,
                length,
                    format = column.format,
                    type = typeof template,
                    columnValues = column.values;

            if (column.command) {
                if (isArray(column.command)) {
                    for (idx = 0, length = column.command.length; idx < length; idx++) {
                        html += that._createButton(column.command[idx]);
                    }
                    return html.replace(templateHashRegExp, "\\#");
                }
                return that._createButton(column.command).replace(templateHashRegExp, "\\#");
            }
            if (type === FUNCTION) {
                state.storage["tmpl" + state.count] = template;
                html += "#=this.tmpl" + state.count + "(" + paramName + ")#";
                state.count++;
            } else if (type === STRING) {
                html += template;
            } else if (columnValues && columnValues.length && isPlainObject(columnValues[0]) && "value" in columnValues[0]) {
                html += "#var v =" + kendo.stringify(columnValues) + "#";
                html += "#for (var idx=0,length=v.length;idx<length;idx++) {#";
                html += "#if (v[idx].value == ";

                if (!settings.useWithBlock) {
                    html += paramName + ".";
                }

                html += column.field;
                html += ") { #";
                html += "${v[idx].text}";
                html += "#break;#";
                html += "#}#";
                html += "#}#";
            } else {
                html += column.encoded ? "${" : "#=";

                if (format) {
                    html += 'kendo.format(\"' + format.replace(formatRegExp, "\\$1") + '\",';
                }

                if (!settings.useWithBlock) {
                    html += paramName + ".";
                }

                html += column.field;

                if (format) {
                    html += ")";
                }

                html += column.encoded ? "}" : "#";
            }
            if (column.showAction) {

                html = "<a class=\"k-button k-button-icontext k-grid-View Details\" onclick=\"showoptionbutton('" + html + "')\" href=\"javascript:void(0);\">" + html + "</a>";
            }
            return html;
        },

        _templates: function () {
            var that = this,
                options = that.options,
                dataSource = that.dataSource,
                groups = dataSource.group(),
                aggregates = dataSource.aggregate();

            that.rowTemplate = that._tmpl(options.rowTemplate);
            that.altRowTemplate = that._tmpl(options.altRowTemplate || options.rowTemplate, true);

            if (that._hasDetails()) {
                that.detailTemplate = that._detailTmpl(options.detailTemplate || "");
            }

            if (!isEmptyObject(aggregates) ||
                grep(that.columns, function (column) { return column.footerTemplate; }).length) {

                that.footerTemplate = that._footerTmpl(aggregates, "footerTemplate", "k-footer-template");
            }

            if (groups.length && grep(that.columns, function (column) {
return column.groupFooterTemplate;
            }).length) {
                aggregates = $.map(groups, function (g) {
                    return g.aggregates;
                });
                that.groupFooterTemplate = that._footerTmpl(aggregates, "groupFooterTemplate", "k-group-footer");
            }
        },

        _footerTmpl: function (aggregates, templateName, rowClass) {
            var that = this,
                settings = extend({}, kendo.Template, that.options.templateSettings),
                paramName = settings.paramName,
                html = "",
                idx,
                length,
                columns = that.columns,
                template,
                type,
                storage = {
                },
                count = 0,
                scope = {},
                dataSource = that.dataSource,
                groups = dataSource.group().length,
                fieldsMap = buildEmptyAggregatesObject(aggregates),
                column;

            html += '<tr class="' + rowClass + '">';

            if (groups > 0) {
                html += groupCells(groups);
            }

            if (that._hasDetails()) {
                html += '<td class="k-hierarchy-cell">&nbsp;</td>';
            }

            for (idx = 0, length = that.columns.length; idx < length; idx++) {
                column = columns[idx];
                template = column[templateName];
                type = typeof template;

                html += "<td" + stringifyAttributes(column.footerAttributes) + ">";

                if (template) {
                    if (type !== FUNCTION) {
                        scope = fieldsMap[column.field] ? extend({
                        }, settings, {
                            paramName: paramName + "." + column.field
                        }) : {
                        };
                        template = kendo.template(template, scope);
                    }

                    storage["tmpl" + count] = template;
                    html += "#=this.tmpl" + count + "(" + paramName + ")#";
                    count++;
                } else {
                    html += "&nbsp;";
                }

                html += "</td>";
            }

            html += '</tr>';

            html = kendo.template(html, settings);

            if (count > 0) {
                return proxy(html, storage);
            }

            return html;
        },

        _detailTmpl: function (template) {
            var that = this,
                html = "",
                settings = extend({
                }, kendo.Template, that.options.templateSettings),
                        paramName = settings.paramName,
                        templateFunctionStorage = {
                        },
                        templateFunctionCount = 0,
                        groups = that.dataSource.group().length,
                        colspan = visibleColumns(that.columns).length,
                        type = typeof template;

            html += '<tr class="k-detail-row">';
            if (groups > 0) {
                html += groupCells(groups);
            }
            html += '<td class="k-hierarchy-cell"></td><td class="k-detail-cell"' + (colspan ? ' colspan="' + colspan + '"' : '') + ">";

            if (type === FUNCTION) {
                templateFunctionStorage["tmpl" + templateFunctionCount] = template;
                html += "#=this.tmpl" + templateFunctionCount + "(" + paramName + ")#";
                templateFunctionCount++;
            } else {
                html += template;
            }

            html += "</td></tr>";

            html = kendo.template(html, settings);

            if (templateFunctionCount > 0) {
                return proxy(html, templateFunctionStorage);
            }

            return html;
        },

        _hasDetails: function () {
            var that = this;

            return that.options.detailTemplate !== undefined || (that._events[DETAILINIT] || []).length;
        },

        _details: function () {
            var that = this;

            that.table.delegate(".k-hierarchy-cell .k-plus, .k-hierarchy-cell .k-minus", CLICK, function (e) {

                if (that.options.accordion) {
                    var parIndex = $(this).closest("tr").index();
                    $(this).closest("table").find("tr.k-master-row").find("a.k-minus").each(function () {
                        var nestedIndex = $(this).closest("tr").index();
                        if (parIndex != nestedIndex) {
                            var button = $(this),
                            expanding = button.hasClass("k-plus"),
                            masterRow = button.closest("tr.k-master-row"),
                            detailRow,
                            detailTemplate = that.detailTemplate,
                            data,
                            hasDetails = that._hasDetails();
                            button.toggleClass("k-plus", !expanding)
                            .toggleClass("k-minus", expanding);

                            detailRow = masterRow.next();
                            data = that.dataItem(masterRow);

                            if (hasDetails && !detailRow.hasClass("k-detail-row")) {

                                detailRow = $(detailTemplate(data))
                                    .addClass(masterRow.hasClass("k-alt") ? "k-alt" : "")
                                    .insertAfter(masterRow);

                                that.angular("compile", function () {
                                    return {
                                        elements: detailRow.get(),
                                        data: [{
                                            dataItem: data
                                        }]
                                    };
                                });

                                that.trigger(DETAILINIT, {
                                    masterRow: masterRow, detailRow: detailRow, data: data, detailCell: detailRow.find(".k-detail-cell")
                                });
                            }

                            that.trigger(expanding ? DETAILEXPAND : DETAILCOLLAPSE, {
                                masterRow: masterRow, detailRow: detailRow, data: data
                            });
                            detailRow.toggle(expanding);
                            if (that._current) {
                                that._current.attr("aria-expanded", expanding);
                            }
                        }
                    });
                }
                var button = $(this),
                    expanding = button.hasClass("k-plus"),
                    masterRow = button.closest("tr.k-master-row"),
                    detailRow,
                    detailTemplate = that.detailTemplate,
                    data,
                    hasDetails = that._hasDetails();

                button.toggleClass("k-plus", !expanding)
                .toggleClass("k-minus", expanding);

                detailRow = masterRow.next();
                data = that.dataItem(masterRow);
                if (hasDetails && !detailRow.hasClass("k-detail-row")) {

                    detailRow = $(detailTemplate(data))
                        .addClass(masterRow.hasClass("k-alt") ? "k-alt" : "")
                        .insertAfter(masterRow);



                    that.trigger(DETAILINIT, {
                        masterRow: masterRow, detailRow: detailRow, data: data, detailCell: detailRow.find(".k-detail-cell")
                    });
                }

                that.trigger(expanding ? DETAILEXPAND : DETAILCOLLAPSE, {
                    masterRow: masterRow, detailRow: detailRow, data: data
                });
                detailRow.toggle(expanding);
                if (!expanding) {
                    that.options.expandedRowText = "";
                    that.options.parentValue = "";
                }
                else {
                    that.options.expandedRowText = masterRow[0].innerText;
                    that.options.parentValue = that.options.storedparentValue;
                }
                if (that._current) {
                    that._current.attr("aria-expanded", expanding);
                }

                e.preventDefault();
                return false;
            });
        },

        dataItem: function (tr) {
            return this._data[this.tbody.find('> tr:not(.k-grouping-row,.k-detail-row,.k-group-footer)').index($(tr))];
        },

        expandRow: function (tr) {
            $(tr).find('> td .k-plus, > td .k-i-expand').click();
        },

        collapseRow: function (tr) {
            $(tr).find('> td .k-minus, > td .k-i-collapse').click();
        },

        _thead: function () {
            var that = this,
                columns = that.columns,
                hasDetails = that._hasDetails() && columns.length,
                idx,
            length,
            html = "",
                thead = that.table.find(">thead"),
                tr,
            text,
            th;

            if (!thead.length) {
                thead = $("<thead/>").insertBefore(that.tbody);
            }

            tr = that.element.find("tr:has(th):first");

            if (!tr.length) {
                tr = thead.children().first();
                if (!tr.length) {
                    tr = $("<tr/>");
                }
            }

            if (!tr.children().length) {
                if (hasDetails) {
                    html += '<th class="k-hierarchy-cell">&nbsp;</th>';
                }

                for (idx = 0, length = columns.length; idx < length; idx++) {
                    th = columns[idx];
                    text = that._headerCellText(th);

                    if (!th.command) {
                        html += "<th " + kendo.attr("field") + "='" + (th.field || "") + "' ";
                        if (th.title) {
                            html += kendo.attr("title") + '="' + th.title.replace(/'/g, "\'") + '" ';
                        }

                        if (th.groupable !== undefined) {
                            html += kendo.attr("groupable") + "='" + th.groupable + "' ";
                        }

                        if (th.aggregates) {
                            html += kendo.attr("aggregates") + "='" + th.aggregates + "'";
                        }

                        html += stringifyAttributes(th.headerAttributes);

                        html += ">" + text + "</th>";
                    } else {
                        html += "<th" + stringifyAttributes(th.headerAttributes) + ">" + text + "</th>";
                    }
                }

                tr.html(html);
            } else if (hasDetails && !tr.find(".k-hierarchy-cell")[0]) {
                tr.prepend('<th class="k-hierarchy-cell">&nbsp;</th>');
            }

            tr.find("th").addClass("k-header");

            if (!that.options.scrollable) {
                thead.addClass("k-grid-header");
            }

            tr.appendTo(thead);

            that.thead = thead;

            that._sortable();

            that._filterable();

            that._scrollable();

            that._updateCols();

            //that._setContentHeight(); ***

            that._resizable();

            that._draggable();

            that._reorderable();

            that._columnMenu();
        },

        _updateCols: function () {
            var that = this;

            that._appendCols(that.thead.parent().add(that.table));
        },

        _appendCols: function (table) {
            var that = this;

            normalizeCols(table, visibleColumns(that.columns), that._hasDetails(), that.dataSource.group().length);
        },

        _autoColumns: function (schema) {
            if (schema && schema.toJSON) {
                var that = this,
                    field;

                schema = schema.toJSON();

                for (field in schema) {
                    that.columns.push({
                        field: field
                    });
                }

                that._thead();

                that._templates();
            }
        },


        _rowsHtml: function (data) {
            var that = this,
                html = "",
            idx,
            length,
                rowTemplate = that.rowTemplate,
            altRowTemplate = that.altRowTemplate;

            for (idx = 0, length = data.length; idx < length; idx++) {
                if (idx % 2) {
                    html += altRowTemplate(data[idx]);
                } else {
                    html += rowTemplate(data[idx]);
                }

                that._data.push(data[idx]);
            }

            return html;
        },

        _groupRowHtml: function (group, colspan, level) {
            var that = this,
                html = "",
                idx,
                length,
                field = group.field,
                column = grep(that.columns, function (column) { return column.field == field; })[0] || {},
                value = column.format ? kendo.format(column.format, group.value) : group.value,
                template = column.groupHeaderTemplate,
                text = (column.title || field) + ': ' + value,
                data = extend({}, { field: group.field, value: group.value }, group.aggregates[group.field]),
                groupItems = group.items;

            if (template) {
                text = typeof template === FUNCTION ? template(data) : kendo.template(template)(data);
            }

            html += '<tr class="k-grouping-row">' + groupCells(level) +
                      '<td colspan="' + colspan + '">' +
                        '<p class="k-reset">' +
                         '<a class="k-icon k-i-collapse" href="#"></a>' + text +
                         '</p></td></tr>';

            if (group.hasSubgroups) {
                for (idx = 0, length = groupItems.length; idx < length; idx++) {
                    html += that._groupRowHtml(groupItems[idx], colspan - 1, level + 1);
                }
            } else {
                html += that._rowsHtml(groupItems);
            }

            if (that.groupFooterTemplate) {
                html += that.groupFooterTemplate(group.aggregates);
            }
            return html;
        },

        collapseGroup: function (group) {
            group = $(group).find(".k-icon").addClass("k-i-expand").removeClass("k-i-collapse").end();

            var level = group.find(".k-group-cell").length,
                footerCount = 1,
                    offset,
                    tr;

            group.nextAll("tr").each(function () {
                tr = $(this);
                offset = tr.find(".k-group-cell").length;

                if (tr.hasClass("k-grouping-row")) {
                    footerCount++;
                } else if (tr.hasClass("k-group-footer")) {
                    footerCount--;
                }

                if (offset <= level || (tr.hasClass("k-group-footer") && footerCount < 0)) {
                    return false;
                }

                tr.hide();
            });
        },

        expandGroup: function (group) {
            group = $(group).find(".k-icon").addClass("k-i-collapse").removeClass("k-i-expand").end();
            var that = this,
                level = group.find(".k-group-cell").length,
                tr,
                offset,
                groupsCount = 1;

            group.nextAll("tr").each(function () {
                tr = $(this);
                offset = tr.find(".k-group-cell").length;
                if (offset <= level) {
                    return false;
                }

                if (offset == level + 1 && !tr.hasClass("k-detail-row")) {
                    tr.show();

                    if (tr.hasClass("k-grouping-row") && tr.find(".k-icon").hasClass("k-i-collapse")) {
                        that.expandGroup(tr);
                    }

                    if (tr.hasClass("k-master-row") && tr.find(".k-icon").hasClass("k-minus")) {
                        tr.next().show();
                    }
                }

                if (tr.hasClass("k-grouping-row")) {
                    groupsCount++;
                }

                if (tr.hasClass("k-group-footer")) {
                    if (groupsCount == 1) {
                        tr.show();
                    } else {
                        groupsCount--;
                    }
                }
            });
        },

        _updateHeader: function (groups) {
            var that = this,
                cells = that.thead.find("th.k-group-cell"),
                length = cells.length;

            if (groups > length) {
                $(new Array(groups - length + 1).join('<th class="k-group-cell k-header">&nbsp;</th>')).prependTo(that.thead.find("tr"));
            } else if (groups < length) {
                length = length - groups;
                $(grep(cells, function (item, index) { return length > index; })).remove();
            }
        },

        _firstDataItem: function (data, grouped) {
            if (data && grouped) {
                if (data.hasSubgroups) {
                    data = this._firstDataItem(data.items[0], grouped);
                } else {
                    data = data.items[0];
                }
            }
            return data;
        },

        hideColumn: function (column) {
            var that = this,
                rows,
                row,
                cell,
                idx,
                cols,
                colWidth,
                width = 0,
                length,
                footer = that.footer || that.wrapper.find(".k-grid-footer"),
                columns = that.columns,
                columnIndex;

            if (typeof column == "number") {
                column = columns[column];
            } else {
                column = grep(columns, function (item) {
                    return item.field === column;
                })[0];
            }

            if (!column || column.hidden) {
                return;
            }

            columnIndex = inArray(column, visibleColumns(columns));
            column.hidden = true;
            column.attributes = addHiddenStyle(column.attributes);
            column.footerAttributes = addHiddenStyle(column.footerAttributes);
            column.headerAttributes = addHiddenStyle(column.headerAttributes);
            that._templates();

            that._updateCols();
            that.thead.find(">tr>th:not(.k-hierarchy-cell,.k-group-cell):visible").eq(columnIndex).hide();
            if (footer) {
                that._appendCols(footer.find("table:first"));
                footer.find(".k-footer-template>td:not(.k-hierarchy-cell,.k-group-cell):visible").eq(columnIndex).hide();
            }

            rows = that.tbody.children();
            for (idx = 0, length = rows.length; idx < length; idx += 1) {
                row = rows.eq(idx);
                if (row.is(".k-grouping-row,.k-detail-row")) {
                    cell = row.children(":not(.k-group-cell):first,.k-detail-cell").last();
                    cell.attr("colspan", parseInt(cell.attr("colspan"), 10) - 1);
                } else {
                    if (row.hasClass("k-grid-edit-row") && (cell = row.children(".k-edit-container")[0])) {
                        cell = $(cell);
                        cell.attr("colspan", parseInt(cell.attr("colspan"), 10) - 1);
                        cell.find("col").eq(columnIndex).remove();
                        row = cell.find("tr:first");
                    }

                    row.children(":not(.k-group-cell,.k-hierarchy-cell):visible").eq(columnIndex).hide();
                }
            }

            cols = that.thead.prev().find("col");
            for (idx = 0, length = cols.length; idx < length; idx += 1) {
                colWidth = cols[idx].style.width;
                if (colWidth && colWidth.indexOf("%") == -1) {
                    width += parseInt(colWidth, 10);
                } else {
                    width = 0;
                    break;
                }
            }

            if (width) {
                $(">.k-grid-header table:first,>.k-grid-footer table:first", that.wrapper).add(that.table).width(width);
            }

            that.trigger(COLUMNHIDE, {
                column: column
            });
        },

        showColumn: function (column) {
            var that = this,
                    rows,
                idx,
                length,
        row,
        cell,
        tables,
        width,
        colWidth,
        cols,
        columns = that.columns,
        footer = that.footer || that.wrapper.find(".k-grid-footer"),
        columnIndex;

            if (typeof column == "number") {
                column = columns[column];
            } else {
                column = grep(columns, function (item) {
                    return item.field === column;
                })[0];
            }

            if (!column || !column.hidden) {
                return;
            }

            columnIndex = inArray(column, columns);
            column.hidden = false;
            column.attributes = removeHiddenStyle(column.attributes);
            column.footerAttributes = removeHiddenStyle(column.footerAttributes);
            column.headerAttributes = removeHiddenStyle(column.headerAttributes);
            that._templates();

            that._updateCols();
            that.thead.find(">tr>th:not(.k-hierarchy-cell,.k-group-cell)").eq(columnIndex).show();
            if (footer) {
                that._appendCols(footer.find("table:first"));
                footer.find(".k-footer-template>td:not(.k-hierarchy-cell,.k-group-cell)").eq(columnIndex).show();
            }

            rows = that.tbody.children();
            for (idx = 0, length = rows.length; idx < length; idx += 1) {
                row = rows.eq(idx);
                if (row.is(".k-grouping-row,.k-detail-row")) {
                    cell = row.children(":not(.k-group-cell):first,.k-detail-cell").last();
                    cell.attr("colspan", parseInt(cell.attr("colspan"), 10) + 1);
                } else {
                    if (row.hasClass("k-grid-edit-row") && (cell = row.children(".k-edit-container")[0])) {
                        cell = $(cell);
                        cell.attr("colspan", parseInt(cell.attr("colspan"), 10) + 1);
                        normalizeCols(cell.find(">form>table"), visibleColumns(columns), false, 0);
                        row = cell.find("tr:first");
                    }

                    row.children(":not(.k-group-cell,.k-hierarchy-cell)").eq(columnIndex).show();
                }
            }

            tables = $(">.k-grid-header table:first,>.k-grid-footer table:first", that.wrapper).add(that.table);
            if (!column.width) {
                tables.width("");
            } else {
                width = 0;
                cols = that.thead.prev().find("col");
                for (idx = 0, length = cols.length; idx < length; idx += 1) {
                    colWidth = cols[idx].style.width;
                    if (colWidth.indexOf("%") > -1) {
                        width = 0;
                        break;
                    }
                    width += parseInt(colWidth, 10);
                }

                if (width) {
                    tables.width(width);
                }
            }

            that.trigger(COLUMNSHOW, {
                column: column
            });
        },

        _progress: function (toggle) {
            var that = this,
                element = that.element.is("table") ? that.element.parent() : (that.content && that.content.length ? that.content : that.element);

            kendo.ui.progress(element, toggle);
        },

        refresh: function (e) {
            var that = this,
                length,
                idx,
                html = "",
                data = that.dataSource.view(),
                tbody,
                placeholder,
                currentIndex,
                current = that.current(),
                groups = (that.dataSource.group() || []).length,
                colspan = groups + visibleColumns(that.columns).length;

            if (e && e.action === "itemchange" && that.editable) { // skip rebinding if editing is in progress
                return;
            }

            that.trigger("dataBinding");

            if (current && current.hasClass("k-state-focused")) {
                currentIndex = that.items().index(current.parent());
            }

            that._destroyEditable();

            that._progress(false);

            that._data = [];

            if (!that.columns.length) {
                that._autoColumns(that._firstDataItem(data[0], groups));
                colspan = groups + that.columns.length;
            }

            that._group = groups > 0 || that._group;

            if (that._group) {
                that._templates();
                that._updateCols();
                that._updateHeader(groups);
                that._group = groups > 0;
            }

            if (groups > 0) {
                if (that.detailTemplate) {
                    colspan++;
                }

                for (idx = 0, length = data.length; idx < length; idx++) {
                    html += that._groupRowHtml(data[idx], colspan, 0);
                }
            } else {
                html += that._rowsHtml(data);
            }

            if (tbodySupportsInnerHtml) {
                that.tbody[0].innerHTML = html;
            } else {
                placeholder = document.createElement("div");
                placeholder.innerHTML = "<table><tbody>" + html + "</tbody></table>";
                tbody = placeholder.firstChild.firstChild;
                that.table[0].replaceChild(tbody, that.tbody[0]);
                that.tbody = $(tbody);
            }

            that._footer();

            that._setContentHeight();

            if (currentIndex >= 0) {
                that.current(that.items().eq(currentIndex).children().filter(DATA_CELL).first());
            }

            that.trigger(DATABOUND);
            $(that.table).find("tr:not(.k-grouping-row) > td").each(function () {
                var td = $(this);
                if (td.attr("editMode") == "true") {
                    if (td.closest("tbody")[0] !== that.tbody[0] || $(e.target).is(":input")) {
                        return;
                    }

                    if (that.editable) {
                        if (that.editable.end()) {
                            that.closeCell();
                            that.editCell(td);
                        }
                    } else {
                        that.editCell(td);
                    }
                }
            });
        }
    });

    function getCommand(commands, name) {
        var idx, length, command;

        if (typeof commands === STRING && commands === name) {
            return commands;
        }

        if (isPlainObject(commands) && commands.name === name) {
            return commands;
        }

        if (isArray(commands)) {
            for (idx = 0, length = commands.length; idx < length; idx++) {
                command = commands[idx];

                if ((typeof command === STRING && command === name) || (command.name === name)) {
                    return command;
                }
            }
        }
        return null;
    }

    ui.plugin(Grid);
    ui.plugin(VirtualScrollable);
})(jQuery);
(function ($, undefined) {
    var kendo = window.kendo,
        CHANGE = "change",
        DATABOUND = "dataBound",
        DATABINDING = "dataBinding",
        Widget = kendo.ui.Widget,
        keys = kendo.keys,
        FOCUSSELECTOR = ">*",
        REQUESTSTART = "requestStart",
        ERROR = "error",
    FOCUSED = "k-state-focused",
FOCUSABLE = "k-focusable",
SELECTED = "k-state-selected",
KEDITITEM = "k-edit-item",
STRING = "string",
EDIT = "edit",
REMOVE = "remove",
SAVE = "save",
CLICK = "click",
proxy = $.proxy,
progress = kendo.ui.progress,
DataSource = kendo.data.DataSource;

    var ListView = Widget.extend({
        init: function (element, options) {
            var that = this;

            options = $.isArray(options) ? { dataSource: options } : options;

            Widget.fn.init.call(that, element, options);

            options = that.options;

            that.wrapper = that.element;

            that._element();

            that._dataSource();

            that.template = kendo.template(options.template || "");
            that.altTemplate = kendo.template(options.altTemplate || options.template);
            that.editTemplate = kendo.template(options.editTemplate || "");

            that._navigatable();

            that._selectable();

            that._pageable();

            that._crudHandlers();

            if (that.options.autoBind) {
                that.dataSource.fetch();
            }

            kendo.notify(that);
        },

        events: [
CHANGE,
DATABINDING,
DATABOUND,
EDIT,
REMOVE,
SAVE
        ],

        options: {
            name: "ListView",
            autoBind: true,
            selectable: false,
            navigatable: false,
            template: "",
            altTemplate: "",
            editTemplate: ""
        },

        items: function () {
            return this.element.find(FOCUSSELECTOR);
        },

        setDataSource: function (dataSource) {
            this.options.dataSource = dataSource;
            this._dataSource();

            if (this.options.autoBind) {
                dataSource.fetch();
            }
        },

        _dataSource: function () {
            var that = this;

            if (that.dataSource && that._refreshHandler) {
                that.dataSource.unbind(CHANGE, that._refreshHandler)
                                .unbind(REQUESTSTART, that._requestStartHandler)
                                .unbind(ERROR, that._errorHandler);
            } else {
                that._refreshHandler = proxy(that.refresh, that);
                that._requestStartHandler = proxy(that._requestStart, that);
                that._errorHandler = proxy(that._error, that);
            }

            that.dataSource = DataSource.create(that.options.dataSource)
                                .bind(CHANGE, that._refreshHandler)
                                .bind(REQUESTSTART, that._requestStartHandler)
                                .bind(ERROR, that._errorHandler);
        },

        _requestStart: function () {
            progress(this.element, true);
        },

        _error: function () {
            progress(this.element, false);
        },

        _element: function () {
            this.element.addClass("k-widget k-listview");
        },

        refresh: function (e) {
            var that = this,
                view = that.dataSource.view(),
                data,
                items,
                item,
                html = "",
                idx,
                length,
                template = that.template,
    altTemplate = that.altTemplate;

            if (e && e.action === "itemchange") {
                if (!that.editable) {
                    data = e.items[0];
                    idx = view.indexOf(data);

                    if (idx >= 0) {
                        item = $(template(data));
                        that.items().eq(idx).replaceWith(item);

                        that.trigger("itemChange", {
                            item: item,
                            data: data
                        });
                    }
                }

                return;
            }

            that.trigger(DATABINDING);

            that._destroyEditable();

            for (idx = 0, length = view.length; idx < length; idx++) {
                if (idx % 2) {
                    html += altTemplate(view[idx]);
                } else {
                    html += template(view[idx]);
                }
            }

            that.element.html(html);

            items = that.items();
            for (idx = 0, length = view.length; idx < length; idx++) {
                items.eq(idx).attr(kendo.attr("uid"), view[idx].uid);
            }

            that.trigger(DATABOUND);
        },

        _pageable: function () {
            var that = this,
                pageable = that.options.pageable,
                settings,
                pagerId;

            if ($.isPlainObject(pageable)) {
                pagerId = pageable.pagerId;
                settings = $.extend({
                }, pageable, {
                    dataSource: that.dataSource,
                    pagerId: null
                });

                $("#" + pagerId).kendoPager(settings);
            }
        },

        _selectable: function () {
            var that = this,
                multi,
                current,
                selectable = that.options.selectable,
                navigatable = that.options.navigatable;

            if (selectable) {
                multi = typeof selectable === STRING && selectable.toLowerCase().indexOf("multiple") > -1;

                that.selectable = new kendo.ui.Selectable(that.element, {
                    multiple: multi,
                    filter: FOCUSSELECTOR,
                    change: function () {
                        that.trigger(CHANGE);
                    }
                });

                if (navigatable) {
                    that.element.keydown(function (e) {
                        if (e.keyCode === keys.SPACEBAR) {
                            current = that.current();
                            e.preventDefault();
                            if (multi) {
                                if (!e.ctrlKey) {
                                    that.selectable.clear();
                                } else {
                                    if (current.hasClass(SELECTED)) {
                                        current.removeClass(SELECTED);
                                        current = null;
                                    }
                                }
                            } else {
                                that.selectable.clear();
                            }

                            that.selectable.value(current);
                        }
                    });
                }
            }
        },

        current: function (element) {
            var that = this,
                current = that._current;

            if (element !== undefined && element.length) {
                if (!current || current[0] !== element[0]) {
                    element.addClass(FOCUSED);
                    if (current) {
                        current.removeClass(FOCUSED);
                    }
                    that._current = element;
                }
            }

            return that._current;
        },

        _navigatable: function () {
            var that = this,
                navigatable = that.options.navigatable,
                element = that.element,
                currentProxy = proxy(that.current, that),
                clickCallback = function (e) {
                    currentProxy($(e.currentTarget));
                    if (!$(e.target).is(":button,a,:input,a>.k-icon,textarea")) {
                        element.focus();
                    }
                };

            if (navigatable) {
                element.attr("tabIndex", Math.max(element.attr("tabIndex") || 0, 0));
                element.bind({
                    focus: function () {
                        var current = that._current;
                        if (current && current.is(":visible")) {
                            current.addClass(FOCUSED);
                        } else {
                            currentProxy(element.find(FOCUSSELECTOR).first());
                        }
                    },
                    focusout: function () {
                        if (that._current) {
                            that._current.removeClass(FOCUSED);
                        }
                    },
                    keydown: function (e) {
                        var key = e.keyCode,
                            current = that.current();

                        if (keys.UP === key) {
                            that.current(current ? current.prev() : element.find(FOCUSSELECTOR).first());
                        } else if (keys.DOWN === key) {
                            that.current(current ? current.next() : element.find(FOCUSSELECTOR).first());
                        } else if (keys.PAGEUP == key) {
                            that._current = null;
                            that.dataSource.page(that.dataSource.page() - 1);
                        } else if (keys.PAGEDOWN == key) {
                            that._current = null;
                            that.dataSource.page(that.dataSource.page() + 1);
                        }
                    }
                });

                element.addClass(FOCUSABLE).delegate("." + FOCUSABLE + FOCUSSELECTOR, "mousedown", clickCallback);
            }
        },

        clearSelection: function () {
            var that = this;
            that.selectable.clear();
            that.trigger(CHANGE);
        },

        select: function (items) {
            var that = this,
selectable = that.selectable;

            items = $(items);
            if (items.length) {
                if (!selectable.options.multiple) {
                    selectable.clear();
                    items = items.first();
                }
                selectable.value(items);
                return;
            }

            return selectable.value();
        },

        _destroyEditable: function () {
            var that = this;
            if (that.editable) {
                that.editable.destroy();
                delete that.editable;
            }
        },

        _modelFromElement: function (element) {
            var uid = element.attr(kendo.attr("uid"));

            return this.dataSource.getByUid(uid);
        },

        _closeEditable: function (validate) {
            var that = this,
editable = that.editable,
data,
container,
valid = true;

            if (editable) {
                if (validate) {
                    valid = editable.end();
                }

                if (valid) {
                    data = that._modelFromElement(editable.element);
                    container = $(that.template(data)).attr(kendo.attr("uid"), data.uid);
                    that._destroyEditable();
                    editable.element.replaceWith(container);
                }
            }

            return valid;
        },

        edit: function (item) {
            var that = this,
                data = that._modelFromElement(item),
                container = $(that.editTemplate(data)).addClass(KEDITITEM);

            that.cancel();
            container.attr(kendo.attr("uid"), data.uid);
            item.replaceWith(container);
            that.editable = container.kendoEditable({
                model: data, clearContainer: false, errorTemplate: false
            }).data("kendoEditable");

            that.trigger(EDIT, {
                model: data, item: container
            });
        },

        save: function () {
            var that = this,
            editable = that.editable.element,
            model = that._modelFromElement(editable);

            if (!that.trigger(SAVE, {
                model: model, item: editable
            }) && that._closeEditable(true)) {
                that.dataSource.sync();
            }
        },

        remove: function (item) {
            var that = this,
                dataSource = that.dataSource,
            data = that._modelFromElement(item);

            if (!that.trigger(REMOVE, {
                model: data, item: item
            })) {
                item.hide();
                dataSource.remove(data);
                dataSource.sync();
            }
        },

        add: function () {
            var that = this,
                dataSource = that.dataSource,
                index = dataSource.indexOf((dataSource.view() || [])[0]);

            if (index < 0) {
                index = 0;
            }

            that.cancel();
            dataSource.insert(index, {});
            that.edit(that.element.children().first());
        },

        cancel: function () {
            var that = this,
                dataSource = that.dataSource;

            if (that.editable) {
                dataSource.cancelChanges(that._modelFromElement(that.editable.element));
                that._closeEditable(false);
            }
        },

        _crudHandlers: function () {
            var that = this;

            that.element.on(CLICK, ".k-edit-button", function (e) {
                var item = $(this).closest("[" + kendo.attr("uid") + "]");
                that.edit(item);
                e.preventDefault();
            });

            that.element.on(CLICK, ".k-delete-button", function (e) {
                var item = $(this).closest("[" + kendo.attr("uid") + "]");
                that.remove(item);
                e.preventDefault();
            });

            that.element.on(CLICK, ".k-update-button", function (e) {
                that.save();
                e.preventDefault();
            });

            that.element.on(CLICK, ".k-cancel-button", function (e) {
                that.cancel();
                e.preventDefault();
            });
        }
    });

    kendo.ui.plugin(ListView);
})(jQuery);
(function ($, undefined) {

    // Imports ================================================================
    var kendo = window.kendo,
        Class = kendo.Class,
        Widget = kendo.ui.Widget,
        os = kendo.support.mobileOS,
        extend = $.extend,
        deepExtend = kendo.deepExtend,
        keys = kendo.keys;

    // options can be: template (as string), cssClass, title, defaultValue
    var ToolTemplate = Class.extend({
        init: function (options) {
            var that = this;
            that.options = options;
        },

        getHtml: function () {
            var options = this.options;
            return kendo.template(options.template)({
                cssClass: options.cssClass,
                tooltip: options.title,
                initialValue: options.initialValue
            });
        }
    });

    var EditorUtils = {
        select: function (editor) {
            editor.trigger("select", {});
        },

        editorWrapperTemplate:
            '<table cellspacing="4" cellpadding="0" class="k-widget k-editor k-header"><tbody>' +
                '<tr><td class="k-editor-toolbar-wrap"><ul class="k-editor-toolbar"></ul></td></tr>' +
                '<tr><td class="k-editable-area"></td></tr>' +
            '</tbody></table>',

        buttonTemplate:
'<li class="k-editor-button">' +
    '<a href="" class="k-tool-icon #= cssClass #" unselectable="on" title="#= tooltip #">#= tooltip #</a>' +
'</li>',

        colorPickerTemplate:
'<li class="k-editor-colorpicker">' +
'<div class="k-widget k-colorpicker k-header #= cssClass #">' +
    '<span class="k-tool-icon"><span class="k-selected-color"></span></span><span class="k-icon k-i-arrow-s"></span>' +
'</div></li>',

        comboBoxTemplate:
'<li class="k-editor-combobox">' +
'<select title="#= tooltip #" class="#= cssClass #"></select>' +
'</li>',

        dropDownListTemplate:
'<li class="k-editor-selectbox">' +
'<select title="#= tooltip #" class="#= cssClass #"></select>' +
'</li>',

        focusable: ".k-colorpicker,a.k-tool-icon:not(.k-state-disabled),.k-selectbox, .k-combobox .k-input",

        wrapTextarea: function (textarea) {

            var w = textarea.width(),
                h = textarea.height(),
                template = EditorUtils.editorWrapperTemplate,
                editorWrap = $(template).insertBefore(textarea).width(w).height(h),
                editArea = editorWrap.find(".k-editable-area");

            textarea.appendTo(editArea).addClass("k-content k-raw-content").hide();

            return textarea.closest(".k-editor");
        },

        renderTools: function (editor, tools) {
            var editorTools = {},
                currentTool, tool, i,
                nativeTools = editor._nativeTools,
                template,
                options,
                toolsArea = $(editor.element).closest(".k-editor").find(".k-editor-toolbar");

            if (tools) {
                for (i = 0; i < tools.length; i++) {
                    currentTool = tools[i];

                    if ($.isPlainObject(currentTool)) {

                        if (currentTool.name && editor.tools[currentTool.name]) {
                            $.extend(editor.tools[currentTool.name].options, currentTool);

                            editorTools[currentTool.name] = editor.tools[currentTool.name];
                            options = editorTools[currentTool.name].options;
                        } else {
                            options = extend({
                                cssClass: "k-i-custom", type: "button", tooltip: ""
                            }, currentTool);

                            if (options.name) {
                                options.cssClass = "k-" + (options.name == "custom" ? "i-custom" : options.name);
                            }

                            if (!options.template) {
                                if (options.type == "button") {
                                    options.template = EditorUtils.buttonTemplate;
                                }
                            }

                            //if (options.exec && typeof(options.exec) == "string") {
                            //    options.exec = $.parseJSON('{"exec":' + '"' + options.exec + '"}').exec;
                            //}
                        }
                    } else if (editor.tools[currentTool]) {
                        editorTools[currentTool] = editor.tools[currentTool];
                        options = editorTools[currentTool].options;
                    }

                    if (!options) {
                        continue;
                    }

                    template = options.template;

                    if (template) {

                        if (template.getHtml) {
                            template = template.getHtml();
                        } else {
                            if (!$.isFunction(template)) {
                                template = kendo.template(template);
                            }

                            template = template(options);
                        }

                        if (template.indexOf('<li') !== 0) {
                            template = "<li class='k-editor-template'>" + template + "</li>";
                        }

                        tool = $(template).appendTo(toolsArea);

                        if (options.type == "button" && options.exec) {
                            tool.find(".k-tool-icon").click($.proxy(options.exec, editor.element[0]));
                        }
                    }
                }
            }

            for (i = 0; i < nativeTools.length; i++) {
                if (!editorTools[nativeTools[i]]) {
                    editorTools[nativeTools[i]] = editor.tools[nativeTools[i]];
                }
            }

            editor.options.tools = editorTools;
        },

        decorateStyleToolItems: function (textarea) {
            var selectBox = textarea.data.closest(".k-editor").find(".k-style").data("kendoSelectBox");

            if (!selectBox) {
                return;
            }

            var classes = selectBox.dataSource.view();

            selectBox.list.find(".k-item").each(function (idx, element) {
                var item = $(element),
                    text = item.text(),

                    style = kendo.ui.editor.Dom.inlineStyle(textarea.data.data("kendoEditor").document, "span", {
                        className: classes[idx].value
                    });
                item.html('<span unselectable="on" style="display:block;' + style + '">' + text + '</span>');
            });
        },

        createContentElement: function (textarea, stylesheets) {
            var iframe, wnd, doc,
                rtlStyle = textarea.closest(".k-rtl").length ? "direction:rtl;" : "";

            textarea.hide();
            iframe = $("<iframe />", {
                src: 'javascript:"<html></html>"', frameBorder: "0"
            })
                            .css("display", "")
                            .addClass("k-content")
                            .insertBefore(textarea)[0];

            wnd = iframe.contentWindow || iframe;
            if (stylesheets.length > 0) {
                $(iframe).one("load", textarea, EditorUtils.decorateStyleToolItems);
            }
            doc = wnd.document || iframe.contentDocument;

            doc.designMode = "On";
            doc.open();
            doc.write(
                "<!DOCTYPE html><html><head>" +
                "<meta charset='utf-8' />" +
                "<style>" +
                    "html,body{padding:0;margin:0;font-family:Verdana,Geneva,sans-serif;background:#fff;}" +
                    "html{font-size:100%}body{font-size:.75em;line-height:1.5;padding-top:1px;margin-top:-1px;" +
                    "word-wrap: break-word;-webkit-nbsp-mode: space;-webkit-line-break: after-white-space;" +
                    rtlStyle +
                    "}" +
                    "h1{font-size:2em;margin:.67em 0}h2{font-size:1.5em}h3{font-size:1.16em}h4{font-size:1em}h5{font-size:.83em}h6{font-size:.7em}" +
                    "p{margin:0 0 1em;padding:0 .2em}.k-marker{display:none;}.k-paste-container{position:absolute;left:-10000px;width:1px;height:1px;overflow:hidden}" +
                    "ul,ol{padding-left:2.5em}" +
                    "a{color:#00a}" +
                    "code{font-size:1.23em}" +
                "</style>" +
                $.map(stylesheets, function (href) {
                    return "<link rel='stylesheet' href='" + href + "'>";
                }).join("") +
                "</head><body></body></html>"
            );

            doc.close();

            return wnd;
        },

        initializeContentElement: function (editor) {
            var isFirstKeyDown = true;

            editor.window = EditorUtils.createContentElement($(editor.textarea), editor.options.stylesheets);
            editor.document = editor.window.contentDocument || editor.window.document;
            editor.body = editor.document.body;

            $(editor.document)
                .bind({
                    keydown: function (e) {
                        if (e.keyCode === keys.F10) {
                            // Handling with timeout to avoid the default IE menu
                            setTimeout(function () {
                                var TABINDEX = "tabIndex",
                                    element = editor.wrapper,
                                    tabIndex = element.attr(TABINDEX);

                                // Chrome can't focus something which has already been focused
                                element.attr(TABINDEX, tabIndex || 0).focus().find("li:has(" + focusable + ")").first().focus();

                                if (!tabIndex && tabIndex !== 0) {
                                    element.removeAttr(TABINDEX);
                                }

                            }, 100);

                            e.preventDefault();
                            return;
                        }

                        var toolName = editor.keyboard.toolFromShortcut(editor.options.tools, e);

                        if (toolName) {
                            e.preventDefault();
                            if (!/undo|redo/.test(toolName)) {
                                editor.keyboard.endTyping(true);
                            }
                            editor.exec(toolName);
                            return false;
                        }

                        if (editor.keyboard.isTypingKey(e) && editor.pendingFormats.hasPending()) {
                            if (isFirstKeyDown) {
                                isFirstKeyDown = false;
                            } else {
                                var range = editor.getRange();
                                editor.pendingFormats.apply(range);
                                editor.selectRange(range);
                            }
                        }

                        editor.keyboard.clearTimeout();

                        editor.keyboard.keydown(e);
                    },
                    keyup: function (e) {
                        var selectionCodes = [8, 9, 33, 34, 35, 36, 37, 38, 39, 40, 40, 45, 46];

                        if ($.inArray(e.keyCode, selectionCodes) > -1 || (e.keyCode == 65 && e.ctrlKey && !e.altKey && !e.shiftKey)) {
                            editor.pendingFormats.clear();
                            select(editor);
                        }

                        if (editor.keyboard.isTypingKey(e)) {
                            if (editor.pendingFormats.hasPending()) {
                                var range = editor.getRange();
                                editor.pendingFormats.apply(range);
                                editor.selectRange(range);
                            }
                        } else {
                            isFirstKeyDown = true;
                        }

                        editor.keyboard.keyup(e);
                    },
                    mousedown: function (e) {
                        editor.pendingFormats.clear();

                        var target = $(e.target);

                        if (!$.browser.gecko && e.which == 2 && target.is("a[href]")) {
                            window.open(target.attr("href"), "_new");
                        }
                    },
                    mouseup: function () {
                        select(editor);
                    }
                });

            $(editor.window)
                .bind("blur", function () {
                    var old = editor.textarea.value,
                        value = editor.encodedValue();

                    editor.update();

                    if (value != old) {
                        editor.trigger("change");
                    }
                });

            $(editor.body)
                .bind("cut paste", function (e) {
                    editor.clipboard["on" + e.type](e);
                });
        },

        formatByName: function (name, format) {
            for (var i = 0; i < format.length; i++) {
                if ($.inArray(name, format[i].tags) >= 0) {
                    return format[i];
                }
            }
        },

        registerTool: function (toolName, tool) {
            var tools = Editor.fn._tools;
            tools[toolName] = tool;
            if (tools[toolName].options && tools[toolName].options.template) {
                tools[toolName].options.template.options.cssClass = "k-" + toolName;
            }
        },

        registerFormat: function (formatName, format) {
            kendo.ui.Editor.fn.options.formats[formatName] = format;
        }
    };

    var select = EditorUtils.select,
        focusable = EditorUtils.focusable,
        wrapTextarea = EditorUtils.wrapTextarea,
        renderTools = EditorUtils.renderTools,
        initializeContentElement = EditorUtils.initializeContentElement;

    var messages = {
        bold: "Bold",
        italic: "Italic",
        underline: "Underline",
        strikethrough: "Strikethrough",
        superscript: "Superscript",
        subscript: "Subscript",
        justifyCenter: "Center text",
        justifyLeft: "Align text left",
        justifyRight: "Align text right",
        justifyFull: "Justify",
        insertUnorderedList: "Insert unordered list",
        insertOrderedList: "Insert ordered list",
        indent: "Indent",
        outdent: "Outdent",
        createLink: "Insert hyperlink",
        unlink: "Remove hyperlink",
        insertImage: "Insert image",
        insertHtml: "Insert HTML",
        fontName: "Select font family",
        fontNameInherit: "(inherited font)",
        fontSize: "Select font size",
        fontSizeInherit: "(inherited size)",
        formatBlock: "Format",
        style: "Styles",
        emptyFolder: "Empty Folder",
        uploadFile: "Upload",
        orderBy: "Arrange by:",
        orderBySize: "Size",
        orderByName: "Name",
        invalidFileType: "The selected file \"{0}\" is not valid. Supported file types are {1}.",
        deleteFile: 'Are you sure you want to delete "{0}"?',
        overwriteFile: 'A file with name "{0}" already exists in the current directory. Do you want to overwrite it?',
        directoryNotFound: "A directory with this name was not found."
    };

    var supportedBrowser = !os || (os.ios && os.flatVersion >= 500) || (!os.ios && typeof (document.documentElement.contentEditable) != 'undefined');

    var Editor = Widget.extend({
        init: function (element, options) {
            /* suppress initialization in mobile webkit devices (w/o proper contenteditable support) */
            if (!supportedBrowser) {
                return;
            }

            var that = this,
                wrapper,
                value,
                editorNS = kendo.ui.editor;

            Widget.fn.init.call(that, element, options);

            that.tools = deepExtend({}, kendo.ui.Editor.fn._tools);

            that.options = deepExtend({}, that.options, options);

            element = $(element);

            element.closest("form").bind("submit", function () {
                that.update();
            });

            for (var id in that.tools) {
                that.tools[id].name = id.toLowerCase();
            }

            that.textarea = element.attr("autocomplete", "off")[0];

            wrapper = that.wrapper = wrapTextarea(element);

            renderTools(that, that.options.tools);

            initializeContentElement(that);

            that.keyboard = new editorNS.Keyboard([
                new editorNS.TypingHandler(that),
                new editorNS.SystemHandler(that)
            ]);

            that.clipboard = new editorNS.Clipboard(this);

            that.pendingFormats = new editorNS.PendingFormats(this);

            that.undoRedoStack = new editorNS.UndoRedoStack();

            if (options && options.value) {
                value = options.value;
            } else {
                // indented HTML introduces problematic ranges in IE
                value = element.val().replace(/[\r\n\v\f\t ]+/ig, " ");
            }

            that.value(value);

            function toolFromClassName(element) {
                var tool = $.grep(element.className.split(" "), function (x) {
                    return !/^k-(widget|tool-icon|state-hover|header|combobox|dropdown|selectbox|colorpicker)$/i.test(x);
                });
                return tool[0] ? tool[0].substring(tool[0].lastIndexOf("-") + 1) : "custom";
            }

            function appendShortcutSequence(localizedText, tool) {
                if (!tool.key) {
                    return localizedText;
                }

                var res = localizedText + " (";

                if (tool.ctrl) {
                    res += "Ctrl + ";
                }

                if (tool.shift) {
                    res += "Shift + ";
                }

                if (tool.alt) {
                    res += "Alt + ";
                }

                res += tool.key + ")";

                return res;
            }

            var toolbarItems = ".k-editor-toolbar > li > *, .k-editor-toolbar > li select",
                buttons = ".k-editor-button .k-tool-icon",
                enabledButtons = buttons + ":not(.k-state-disabled)",
                disabledButtons = buttons + ".k-state-disabled";

            wrapper.find(".k-combobox .k-input").keydown(function (e) {
                var combobox = $(this).closest(".k-combobox").data("kendoComboBox"),
                    key = e.keyCode;

                if (key == keys.RIGHT || key == keys.LEFT) {
                    combobox.close();
                } else if (key == keys.DOWN) {
                    if (!combobox.dropDown.isOpened()) {
                        e.stopImmediatePropagation();
                        combobox.open();
                    }
                }
            });

            wrapper
                .delegate(enabledButtons, "mouseenter", function () {
                    $(this).addClass("k-state-hover");
                })
                .delegate(enabledButtons, "mouseleave", function () {
                    $(this).removeClass("k-state-hover");
                })
                .delegate(buttons, "mousedown", false)
                .delegate(focusable, "keydown", function (e) {
                    var closestLi = $(this).closest("li"),
                    focusableTool = "li:has(" + focusable + ")",
                    focusElement,
                    keyCode = e.keyCode;

                    if (keyCode == keys.RIGHT) {
                        focusElement = closestLi.nextAll(focusableTool).first().find(focusable);
                    } else if (keyCode == keys.LEFT) {
                        focusElement = closestLi.prevAll(focusableTool).last().find(focusable);
                    } else if (keyCode == keys.ESC) {
                        focusElement = that;
                    } else if (keyCode == keys.TAB && !(e.ctrlKey || e.altKey)) {
                        // skip tabbing to disabled tools, and focus the editing area when running out of tools
                        if (e.shiftKey) {
                            focusElement = closestLi.prevAll(focusableTool).last().find(focusable);

                            if (focusElement.length) {
                                e.preventDefault();
                            } else {
                                return;
                            }
                        } else {
                            e.preventDefault();

                            focusElement = closestLi.nextAll(focusableTool).first().find(focusable);

                            if (!focusElement.length) {
                                focusElement = that;
                            }
                        }
                    }

                    if (focusElement) {
                        focusElement.focus();
                    }
                })
                .delegate(enabledButtons, "click", function (e) {
                    e.preventDefault();
                    e.stopPropagation();
                    that.exec(toolFromClassName(this));
                })
                .delegate(disabledButtons, "click", function (e) {
                    e.preventDefault();
                })
                .find(toolbarItems)
                    .each(function () {
                        var toolName = toolFromClassName(this),
                            options = that.options,
                            tool = options.tools[toolName],
                            description = options.messages[toolName],
                            $this = $(this);

                        if (!tool) {
                            return;
                        }

                        if (toolName == "fontSize" || toolName == "fontName") {
                            var inheritText = options.messages[toolName + "Inherit"] || messages[toolName + "Inherit"];
                            $this.find("input").val(inheritText).end()
                                 .find("span.k-input").text(inheritText).end();
                        }

                        tool.initialize($this, {
                            title: appendShortcutSequence(description, tool),
                            editor: that
                        });

                    });

            that.bind("select", function () {
                var range = that.getRange();

                var nodes = editorNS.RangeUtils.textNodes(range);

                if (!nodes.length) {
                    nodes = [range.startContainer];
                }

                wrapper.find(toolbarItems)
                    .each(function () {
                        var tool = that.options.tools[toolFromClassName(this)];
                        if (tool) {
                            tool.update($(this), nodes, that.pendingFormats);
                        }
                    });
            });

            $(document)
            .bind("DOMNodeInserted", function (e) {
                var wrapper = that.wrapper;

                if ($.contains(e.target, wrapper[0]) || wrapper[0] == e.target) {
                    // preserve updated value before re-initializing
                    // don't use update() to prevent the editor from encoding the content too early
                    that.textarea.value = that.value();
                    wrapper.find("iframe").remove();
                    initializeContentElement(that);
                }
            })
            .bind("mousedown", function (e) {
                try {
                    if (that.keyboard.isTypingInProgress()) {
                        that.keyboard.endTyping(true);
                    }

                    if (!that.selectionRestorePoint) {
                        that.selectionRestorePoint = new editorNS.RestorePoint(that.getRange());
                    }
                } catch (e) {
                }
            });

            kendo.notify(that);
        },

        events: [
"select",
"change",
"execute",
"error",
"paste"
        ],

        options: {
            name: "Editor",
            messages: messages,
            formats: {
            },
            encoded: true,
            stylesheets: [],
            dialogOptions: {
                modal: true, resizable: false, draggable: true,
                animation: false
            },
            fontName: [
        {
            text: "Arial", value: "Arial,Helvetica,sans-serif"
        },
        {
            text: "Courier New", value: "'Courier New',Courier,monospace"
        },
        {
            text: "Georgia", value: "Georgia,serif"
        },
        {
            text: "Impact", value: "Impact,Charcoal,sans-serif"
        },
        {
            text: "Lucida Console", value: "'Lucida Console',Monaco,monospace"
        },
        {
            text: "Tahoma", value: "Tahoma,Geneva,sans-serif"
        },
{
    text: "Times New Roman", value: "'Times New Roman',Times,serif"
},
        {
            text: "Trebuchet MS", value: "'Trebuchet MS',Helvetica,sans-serif"
        },
        {
            text: "Verdana", value: "Verdana,Geneva,sans-serif"
        }
            ],
            fontSize: [
    {
        text: "1 (8pt)", value: "xx-small"
    },
    {
        text: "2 (10pt)", value: "x-small"
    },
    {
        text: "3 (12pt)", value: "small"
    },
{
    text: "4 (14pt)", value: "medium"
},
    {
        text: "5 (18pt)", value: "large"
    },
    {
        text: "6 (24pt)", value: "x-large"
    },
    {
        text: "7 (36pt)", value: "xx-large"
    }
            ],
            formatBlock: [
    {
        text: "Paragraph", value: "p"
    },
    {
        text: "Quotation", value: "blockquote"
    },
    {
        text: "Heading 1", value: "h1"
    },
    {
        text: "Heading 2", value: "h2"
    },
    {
        text: "Heading 3", value: "h3"
    },
    {
        text: "Heading 4", value: "h4"
    },
    {
        text: "Heading 5", value: "h5"
    },
    {
        text: "Heading 6", value: "h6"
    }
            ],
            tools: [
    "bold",
    "italic",
    "underline",
"strikethrough",
"fontName",
"fontSize",
"foreColor",
"backColor",
"justifyLeft",
"justifyCenter",
"justifyRight",
"justifyFull",
"insertUnorderedList",
"insertOrderedList",
"indent",
"outdent",
"formatBlock",
"createLink",
"unlink",
"insertImage"/*,
                "style", // declare explicitly
                "subscript", // declare explicitly
                "superscript" // declare explicitly */
            ]
        },

        _nativeTools: [
"insertLineBreak",
"insertParagraph",
"redo",
"undo",
"insertHtml"
        ],

        _tools: {
            undo: {
                options: {
                    key: "Z", ctrl: true
                }
            },
            redo: {
                options: {
                    key: "Y", ctrl: true
                }
            }
        },

        tools: {
        }, // tools collection is copied from _tools during initialization

        value: function (html) {
            var body = this.body,
                dom = kendo.ui.editor.Dom;

            if (html === undefined) {
                return kendo.ui.editor.Serializer.domToXhtml(body);
            }

            this.pendingFormats.clear();

            // handle null value passed as a parameter
            html = (html || "")
                // Some browsers do not allow setting CDATA sections through innerHTML so we encode them
                .replace(/<!\[CDATA\[(.*)?\]\]>/g, "<!--[CDATA[$1]]-->")
                // Encode script tags to avoid execution and lost content (IE)
                .replace(/<script([^>]*)>(.*)?<\/script>/ig, "<telerik:script $1>$2<\/telerik:script>")
                // <img>\s+\w+ creates invalid nodes after cut in IE
                .replace(/(<\/?img[^>]*>)[\r\n\v\f\t ]+/ig, "$1");

            if (!$.browser.msie) {
                // Add <br/>s to empty paragraphs in mozilla/chrome, to make them focusable
                html = html.replace(/<p([^>]*)>(\s*)?<\/p>/ig, '<p $1><br _moz_dirty="" /><\/p>');
            }

            if ($.browser.msie && parseInt($.browser.version, 10) < 9) {
                // Internet Explorer removes comments from the beginning of the html
                html = "<br/>" + html;

                var originalSrc = "originalsrc",
                    originalHref = "originalhref";

                // IE < 8 makes href and src attributes absolute
                html = html.replace(/href\s*=\s*(?:'|")?([^'">\s]*)(?:'|")?/, originalHref + '="$1"');
                html = html.replace(/src\s*=\s*(?:'|")?([^'">\s]*)(?:'|")?/, originalSrc + '="$1"');

                body.innerHTML = html;
                dom.remove(body.firstChild);

                $(body).find("telerik\\:script,script,link,img,a").each(function () {
                    var node = this;
                    if (node[originalHref]) {
                        node.setAttribute("href", node[originalHref]);
                        node.removeAttribute(originalHref);
                    }
                    if (node[originalSrc]) {
                        node.setAttribute("src", node[originalSrc]);
                        node.removeAttribute(originalSrc);
                    }
                });
            } else {
                body.innerHTML = html;
                if ($.browser.msie) {
                    // having unicode characters creates denormalized DOM tree in IE9
                    dom.normalize(body);
                }
            }

            this.selectionRestorePoint = null;
            this.update();
        },

        focus: function () {
            this.window.focus();
        },

        update: function (value) {
            this.textarea.value = value || this.options.encoded ? this.encodedValue() : this.value();
        },

        encodedValue: function () {
            return kendo.ui.editor.Dom.encode(this.value());
        },

        createRange: function (document) {
            return kendo.ui.editor.RangeUtils.createRange(document || this.document);
        },

        getSelection: function () {
            return kendo.ui.editor.SelectionUtils.selectionFromDocument(this.document);
        },

        selectRange: function (range) {
            this.focus();
            var selection = this.getSelection();
            selection.removeAllRanges();
            selection.addRange(range);
        },

        getRange: function () {
            var selection = this.getSelection(),
                range = selection.rangeCount > 0 ? selection.getRangeAt(0) : this.createRange(),
        doc = this.document;

            if (range.startContainer == doc && range.endContainer == doc && !range.startOffset && !range.endOffset) {
                range.setStart(this.body, 0);
                range.collapse(true);
            }

            return range;
        },

        selectedHtml: function () {
            return kendo.ui.editor.Serializer.domToXhtml(this.getRange().cloneContents());
        },

        paste: function (html) {
            this.clipboard.paste(html);
        },

        exec: function (name, params) {
            var that = this,
                range, body, id,
                tool = "", pendingTool;

            name = name.toLowerCase();

            // restore selection
            if (!that.keyboard.isTypingInProgress()) {
                that.focus();

                range = that.getRange();
                body = that.document.body;
            }

            // exec tool
            for (id in that.options.tools) {
                if (id.toLowerCase() == name) {
                    tool = that.options.tools[id];
                    break;
                }
            }

            if (tool) {
                range = that.getRange();

                if (!/undo|redo/i.test(name) && tool.willDelayExecution(range)) {
                    // clone our tool to apply params only once
                    pendingTool = $.extend({}, tool);
                    $.extend(pendingTool.options, {
                        params: params
                    });
                    that.pendingFormats.toggle(pendingTool);
                    select(that);
                    return;
                }

                var command = tool.command ? tool.command(extend({
                    range: range
                }, params)) : null;

                that.trigger("execute", {
                    name: name, command: command
                });

                if (/undo|redo/i.test(name)) {
                    that.undoRedoStack[name]();
                } else if (command) {
                    if (!command.managesUndoRedo) {
                        that.undoRedoStack.push(command);
                    }

                    command.editor = that;
                    command.exec();

                    if (command.async) {
                        command.change = $.proxy(function () {
                            select(that);
                        }, that);
                        return;
                    }
                }

                select(that);
            }
        }
    });

    kendo.ui.plugin(Editor);

    var Tool = Class.extend({
        init: function (options) {
            this.options = options;
        },

        initialize: function ($ui, options) {
            $ui.attr({
                unselectable: "on", title: options.title
            });
        },

        command: function (commandArguments) {
            return new this.options.command(commandArguments);
        },

        update: function () {
        },

        willDelayExecution: function () {
            return false;
        }

    });

    Tool.exec = function (editor, name, value) {
        editor.exec(name, {
            value: value
        });
    };

    var FormatTool = Tool.extend({
        init: function (options) {
            Tool.fn.init.call(this, options);
        },

        command: function (commandArguments) {
            var that = this;
            return new kendo.ui.editor.FormatCommand(extend(commandArguments, {
                formatter: that.options.formatter
            }));
        },

        update: function ($ui, nodes, pendingFormats) {
            var isPending = pendingFormats.isPending(this.name),
                isFormatted = this.options.finder.isFormatted(nodes),
                isActive = isPending ? !isFormatted : isFormatted;

            $ui.toggleClass("k-state-active", isActive);
        }
    });

    // Exports ================================================================

    extend(kendo.ui, {
        editor: {
            ToolTemplate: ToolTemplate,
            EditorUtils: EditorUtils,
            Tool: Tool,
            FormatTool: FormatTool
        }
    });

})(jQuery);
(function ($) {

    var kendo = window.kendo,
        map = $.map,
        extend = $.extend,
        STYLE = "style",
        FLOAT = "float",
CSSFLOAT = "cssFloat",
        STYLEFLOAT = "styleFloat",
        CLASS = "class",
        KMARKER = "k-marker";

    function makeMap(items) {
        var obj = {
        },
i, len;

        for (i = 0, len = items.length; i < len; i++) {
            obj[items[i]] = true;
        }
        return obj;
    }

    var empty = makeMap("area,base,basefont,br,col,frame,hr,img,input,isindex,link,meta,param,embed".split(",")),
        blockElements = "div,p,h1,h2,h3,h4,h5,h6,address,applet,blockquote,button,center,dd,dir,dl,dt,fieldset,form,frameset,hr,iframe,isindex,li,map,menu,noframes,noscript,object,ol,pre,script,table,tbody,td,tfoot,th,thead,tr,ul".split(","),
        block = makeMap(blockElements),
        inlineElements = "span,em,a,abbr,acronym,applet,b,basefont,bdo,big,br,button,cite,code,del,dfn,font,i,iframe,img,input,ins,kbd,label,map,object,q,s,samp,script,select,small,strike,strong,sub,sup,textarea,tt,u,var".split(","),
        inline = makeMap(inlineElements),
        fillAttrs = makeMap("checked,compact,declare,defer,disabled,ismap,multiple,nohref,noresize,noshade,nowrap,readonly,selected".split(","));

    var normalize = function (node) {
        if (node.nodeType == 1) {
            node.normalize();
        }
    };

    if ($.browser.msie && parseInt($.browser.version, 10) >= 8) {
        normalize = function (parent) {
            if (parent.nodeType == 1 && parent.firstChild) {
                var prev = parent.firstChild,
                    node = prev;

                while (true) {
                    node = node.nextSibling;

                    if (!node) {
                        break;
                    }

                    if (node.nodeType == 3 && prev.nodeType == 3) {
                        node.nodeValue = prev.nodeValue + node.nodeValue;
                        Dom.remove(prev);
                    }

                    prev = node;
                }
            }
        };
    }

    var whitespace = /^\s+$/,
rgb = /rgb\s*\(\s*(\d+)\s*,\s*(\d+)\s*,\s*(\d+)\s*\)/i,
amp = /&/g,
openTag = /</g,
closeTag = />/g,
nbsp = /\u00a0/g,
bom = /\ufeff/g;
    var cssAttributes =
           ("color,padding-left,padding-right,padding-top,padding-bottom," +
            "background-color,background-attachment,background-image,background-position,background-repeat," +
            "border-top-style,border-top-width,border-top-color," +
            "border-bottom-style,border-bottom-width,border-bottom-color," +
            "border-left-style,border-left-width,border-left-color," +
                        "border-right-style,border-right-width,border-right-color," +
            "font-family,font-size,font-style,font-variant,font-weight,line-height"
               ).split(",");

    var Dom = {
        findNodeIndex: function (node) {
            var i = 0;

            while (true) {
                node = node.previousSibling;

                if (!node) {
                    break;
                }

                i++;
            }

            return i;
        },

        isDataNode: function (node) {
            return node && node.nodeValue !== null && node.data !== null;
        },

        isAncestorOf: function (parent, node) {
            try {
                return !Dom.isDataNode(parent) && ($.contains(parent, Dom.isDataNode(node) ? node.parentNode : node) || node.parentNode == parent);
            } catch (e) {
                return false;
            }
        },

        isAncestorOrSelf: function (root, node) {
            return Dom.isAncestorOf(root, node) || root == node;
        },

        findClosestAncestor: function (root, node) {
            if (Dom.isAncestorOf(root, node)) {
                while (node && node.parentNode != root) {
                    node = node.parentNode;
                }
            }

            return node;
        },

        getNodeLength: function (node) {
            return Dom.isDataNode(node) ? node.length : node.childNodes.length;
        },

        splitDataNode: function (node, offset) {
            var newNode = node.cloneNode(false);
            node.deleteData(offset, node.length);
            newNode.deleteData(0, offset);
            Dom.insertAfter(newNode, node);
        },

        attrEquals: function (node, attributes) {
            for (var key in attributes) {
                var value = node[key];

                if (key == FLOAT) {
                    value = node[$.support.cssFloat ? CSSFLOAT : STYLEFLOAT];
                }

                if (typeof value == "object") {
                    if (!Dom.attrEquals(value, attributes[key])) {
                        return false;
                    }
                } else if (value != attributes[key]) {
                    return false;
                }
            }

            return true;
        },

        blockParentOrBody: function (node) {
            return Dom.parentOfType(node, blockElements) || node.ownerDocument.body;
        },

        blockParents: function (nodes) {
            var blocks = [],
i, len;

            for (i = 0, len = nodes.length; i < len; i++) {
                var block = Dom.parentOfType(nodes[i], Dom.blockElements);
                if (block && $.inArray(block, blocks) < 0) {
                    blocks.push(block);
                }
            }

            return blocks;
        },

        windowFromDocument: function (document) {
            return document.defaultView || document.parentWindow;
        },

        normalize: normalize,
        blockElements: blockElements,
        inlineElements: inlineElements,
        empty: empty,
        fillAttrs: fillAttrs,

        toHex: function (color) {
            var matches = rgb.exec(color);

            if (!matches) {
                return color;
            }

            return "#" + map(matches.slice(1), function (x) {
                x = parseInt(x, 10).toString(16);
                return x.length > 1 ? x : "0" + x;
            }).join("");
        },

        encode: function (value) {
            return value.replace(amp, "&amp;")
                    .replace(openTag, "&lt;")
                    .replace(closeTag, "&gt;")
                    .replace(nbsp, "&nbsp;");
        },

        name: function (node) {
            return node.nodeName.toLowerCase();
        },

        significantChildNodes: function (node) {
            return $.grep(node.childNodes, function (child) {
                return child.nodeType != 3 || !Dom.isWhitespace(child);
            });
        },

        lastTextNode: function (node) {
            var result = null;

            if (node.nodeType == 3) {
                return node;
            }

            for (var child = node.lastChild; child; child = child.previousSibling) {
                result = Dom.lastTextNode(child);

                if (result) {
                    return result;
                }
            }

            return result;
        },

        is: function (node, nodeName) {
            return Dom.name(node) == nodeName;
        },

        isMarker: function (node) {
            return node.className == KMARKER;
        },

        isWhitespace: function (node) {
            return whitespace.test(node.nodeValue);
        },

        isBlock: function (node) {
            return block[Dom.name(node)];
        },

        isEmpty: function (node) {
            return empty[Dom.name(node)];
        },

        isInline: function (node) {
            return inline[Dom.name(node)];
        },

        scrollTo: function (node) {
            node.ownerDocument.body.scrollTop = $(Dom.isDataNode(node) ? node.parentNode : node).offset().top;
        },

        insertAt: function (parent, newElement, position) {
            parent.insertBefore(newElement, parent.childNodes[position] || null);
        },

        insertBefore: function (newElement, referenceElement) {
            if (referenceElement.parentNode) {
                return referenceElement.parentNode.insertBefore(newElement, referenceElement);
            } else {
                return referenceElement;
            }
        },

        insertAfter: function (newElement, referenceElement) {
            return referenceElement.parentNode.insertBefore(newElement, referenceElement.nextSibling);
        },

        remove: function (node) {
            node.parentNode.removeChild(node);
        },

        trim: function (parent) {
            for (var i = parent.childNodes.length - 1; i >= 0; i--) {
                var node = parent.childNodes[i];
                if (Dom.isDataNode(node)) {
                    if (!node.nodeValue.replace(bom, "").length) {
                        Dom.remove(node);
                    }

                    if (Dom.isWhitespace(node)) {
                        Dom.insertBefore(node, parent);
                    }
                } else if (node.className != KMARKER) {
                    Dom.trim(node);
                    if (!node.childNodes.length && !Dom.isEmpty(node)) {
                        Dom.remove(node);
                    }
                }
            }

            return parent;
        },

        parentOfType: function (node, tags) {
            do {
                node = node.parentNode;
            } while (node && !(Dom.ofType(node, tags)));

            return node;
        },

        ofType: function (node, tags) {
            return $.inArray(Dom.name(node), tags) >= 0;
        },

        changeTag: function (referenceElement, tagName) {
            var newElement = Dom.create(referenceElement.ownerDocument, tagName),
                attributes = referenceElement.attributes,
                i, len, name, value, attribute;

            for (i = 0, len = attributes.length; i < len; i++) {
                attribute = attributes[i];
                if (attribute.specified) {
                    // IE < 8 cannot set class or style via setAttribute
                    name = attribute.nodeName;
                    value = attribute.nodeValue;
                    if (name == CLASS) {
                        newElement.className = value;
                    } else if (name == STYLE) {
                        newElement.style.cssText = referenceElement.style.cssText;
                    } else {
                        newElement.setAttribute(name, value);
                    }
                }
            }

            while (referenceElement.firstChild) {
                newElement.appendChild(referenceElement.firstChild);
            }

            Dom.insertBefore(newElement, referenceElement);
            Dom.remove(referenceElement);
            return newElement;
        },

        wrap: function (node, wrapper) {
            Dom.insertBefore(wrapper, node);
            wrapper.appendChild(node);
            return wrapper;
        },

        unwrap: function (node) {
            var parent = node.parentNode;
            while (node.firstChild) {
                parent.insertBefore(node.firstChild, node);
            }

            parent.removeChild(node);
        },

        create: function (document, tagName, attributes) {
            return Dom.attr(document.createElement(tagName), attributes);
        },

        attr: function (element, attributes) {
            attributes = extend({
            }, attributes);

            if (attributes && STYLE in attributes) {
                Dom.style(element, attributes.style);
                delete attributes.style;
            }
            return extend(element, attributes);
        },

        style: function (node, value) {
            $(node).css(value || {
            });
        },

        unstyle: function (node, value) {
            for (var key in value) {
                if (key == FLOAT) {
                    key = $.support.cssFloat ? CSSFLOAT : STYLEFLOAT;
                }

                node.style[key] = "";
            }

            if (node.style.cssText === "") {
                node.removeAttribute(STYLE);
            }
        },

        inlineStyle: function (document, name, attributes) {
            var span = $(Dom.create(document, name, attributes)),
                style;

            document.body.appendChild(span[0]);

            style = map(cssAttributes, function (value) {
                if ($.browser.msie && value == "line-height" && span.css(value) == "1px") {
                    return "line-height:1.5";
                } else {
                    return value + ":" + span.css(value);
                }
            }).join(";");

            span.remove();

            return style;
        },

        removeClass: function (node, classNames) {
            var className = " " + node.className + " ",
classes = classNames.split(" "),
i, len;

            for (i = 0, len = classes.length; i < len; i++) {
                className = className.replace(" " + classes[i] + " ", " ");
            }

            className = $.trim(className);

            if (className.length) {
                node.className = className;
            } else {
                node.removeAttribute(CLASS);
            }
        },

        commonAncestor: function () {
            var count = arguments.length,
                paths = [],
                minPathLength = Infinity,
                output = null,
                i, ancestors, node, first, j;

            if (!count) {
                return null;
            }

            if (count == 1) {
                return arguments[0];
            }

            for (i = 0; i < count; i++) {
                ancestors = [];
                node = arguments[i];
                while (node) {
                    ancestors.push(node);
                    node = node.parentNode;
                }
                paths.push(ancestors.reverse());
                minPathLength = Math.min(minPathLength, ancestors.length);
            }

            if (count == 1) {
                return paths[0][0];
            }

            for (i = 0; i < minPathLength; i++) {
                first = paths[0][i];

                for (j = 1; j < count; j++) {
                    if (first != paths[j][i]) {
                        return output;
                    }
                }

                output = first;
            }
            return output;
        }
    };

    kendo.ui.editor.Dom = Dom;

})(jQuery);
(function ($, undefined) {

    // Imports ================================================================
    var kendo = window.kendo,
Editor = kendo.ui.editor,
        dom = Editor.Dom,
        extend = $.extend;

    var fontSizeMappings = 'xx-small,x-small,small,medium,large,x-large,xx-large'.split(','),
        quoteRe = /"/g,
        brRe = /<br[^>]*>/i,
        emptyPRe = /<p><\/p>/i;

    var Serializer = {
        domToXhtml: function (root) {
            var result = [];
            var tagMap = {
                'telerik:script': {
                    start: function (node) {
                        result.push('<script'); attr(node); result.push('>');
                    }, end: function () {
                        result.push('</script>');
                    }
                },
                b: {
                    start: function () {
                        result.push('<strong>');
                    }, end: function () {
                        result.push('</strong>');
                    }
                },
                i: {
                    start: function () {
                        result.push('<em>');
                    }, end: function () {
                        result.push('</em>');
                    }
                },
                u: {
                    start: function () {
                        result.push('<span style="text-decoration:underline;">');
                    }, end: function () {
                        result.push('</span>');
                    }
                },
                iframe: {
                    start: function (node) {
                        result.push('<iframe'); attr(node); result.push('>');
                    }, end: function () {
                        result.push('</iframe>');
                    }
                },
                font: {
                    start: function (node) {
                        result.push('<span style="');

                        var color = node.getAttribute('color');
                        var size = fontSizeMappings[node.getAttribute('size')];
                        var face = node.getAttribute('face');

                        if (color) {
                            result.push('color:');
                            result.push(dom.toHex(color));
                            result.push(';');
                        }

                        if (face) {
                            result.push('font-face:');
                            result.push(face);
                            result.push(';');
                        }

                        if (size) {
                            result.push('font-size:');
                            result.push(size);
                            result.push(';');
                        }

                        result.push('">');
                    },
                    end: function (node) {
                        result.push('</span>');
                    }
                }
            };

            function attr(node) {
                var specifiedAttributes = [],
                    attributes = node.attributes,
                    attribute, i, l,
                    trim = $.trim;

                if (dom.is(node, 'img')) {
                    var width = node.style.width,
                        height = node.style.height,
                        $node = $(node);

                    if (width) {
                        $node.attr('width', parseInt(width, 10));
                        dom.unstyle(node, {
                            width: undefined
                        });
                    }

                    if (height) {
                        $node.attr('height', parseInt(height, 10));
                        dom.unstyle(node, {
                            height: undefined
                        });
                    }
                }

                for (i = 0, l = attributes.length; i < l; i++) {
                    attribute = attributes[i];
                    var name = attribute.nodeName;
                    // In IE < 8 the 'value' attribute is not returned as 'specified'. The same goes for type="text"
                    if (attribute.specified || (name == 'value' && !node.value) || (name == 'type' && attribute.nodeValue == 'text')) {
                        // altHtml is injected by IE8 when an <object> tag is used in the Editor
                        if (name.indexOf('_moz') < 0 && name != 'complete' && name != 'altHtml') {
                            specifiedAttributes.push(attribute);
                        }
                    }
                }

                if (!specifiedAttributes.length) {
                    return;
                }

                specifiedAttributes.sort(function (a, b) {
                    return a.nodeName > b.nodeName ? 1 : a.nodeName < b.nodeName ? -1 : 0;
                });

                for (i = 0, l = specifiedAttributes.length; i < l; i++) {
                    attribute = specifiedAttributes[i];
                    var attributeName = attribute.nodeName;
                    var attributeValue = attribute.nodeValue;

                    result.push(' ');
                    result.push(attributeName);
                    result.push('="');
                    if (attributeName == 'style') {
                        // In IE < 8 the style attribute does not return proper nodeValue
                        var css = trim(attributeValue || node.style.cssText).split(';');

                        for (var cssIndex = 0, len = css.length; cssIndex < len; cssIndex++) {
                            var pair = css[cssIndex];
                            if (pair.length) {
                                var propertyAndValue = pair.split(':');
                                var property = trim(propertyAndValue[0].toLowerCase()),
                                    value = trim(propertyAndValue[1]);

                                if (property == "font-size-adjust" || property == "font-stretch") {
                                    continue;
                                }

                                if (property.indexOf('color') >= 0) {
                                    value = dom.toHex(value);
                                }

                                if (property.indexOf('font') >= 0) {
                                    value = value.replace(quoteRe, "'");
                                }

                                result.push(property);
                                result.push(':');
                                result.push(value);
                                result.push(';');
                            }
                        }
                    } else if (attributeName == 'src' || attributeName == 'href') {
                        result.push(node.getAttribute(attributeName, 2));
                    } else {
                        result.push(dom.fillAttrs[attributeName] ? attributeName : attributeValue);
                    }

                    result.push('"');
                }
            }

            function children(node, skip) {
                for (var childNode = node.firstChild; childNode; childNode = childNode.nextSibling) {
                    child(childNode, skip);
                }
            }

            function child(node, skip) {
                var nodeType = node.nodeType,
                    tagName, mapper,
                                parent, value, previous;

                if (nodeType == 1) {
                    tagName = dom.name(node);

                    if (!tagName || (node.attributes._moz_dirty && dom.is(node, 'br'))) {
                        return;
                    }

                    mapper = tagMap[tagName];

                    if (mapper) {
                        mapper.start(node);
                        children(node);
                        mapper.end(node);
                        return;
                    }

                    result.push('<');
                    result.push(tagName);

                    attr(node);

                    if (dom.empty[tagName]) {
                        result.push(' />');
                    } else {
                        result.push('>');
                        children(node, skip || dom.is(node, 'pre'));
                        result.push('</');
                        result.push(tagName);
                        result.push('>');
                    }
                } else if (nodeType == 3) {
                    value = node.nodeValue;

                    if (!skip && $.support.leadingWhitespace) {
                        parent = node.parentNode;
                        previous = node.previousSibling;

                        if (!previous) {
                            previous = (dom.isInline(parent) ? parent : node).previousSibling;
                        }

                        if (!previous || previous.innerHTML === "" || dom.isBlock(previous)) {
                            value = value.replace(/^[\r\n\v\f\t ]+/, '');
                        }

                        value = value.replace(/ +/, ' ');
                    }

                    result.push(dom.encode(value));

                } else if (nodeType == 4) {
                    result.push('<![CDATA[');
                    result.push(node.data);
                    result.push(']]>');
                } else if (nodeType == 8) {
                    if (node.data.indexOf('[CDATA[') < 0) {
                        result.push('<!--');
                        result.push(node.data);
                        result.push('-->');
                    } else {
                        result.push('<!');
                        result.push(node.data);
                        result.push('>');
                    }
                }
            }

            children(root);

            result = result.join('');

            // if serialized dom contains only whitespace elements, consider it empty (required field validation)
            if (result.replace(brRe, "").replace(emptyPRe, "") === "") {
                return "";
            }

            return result;
        }

    };

    extend(Editor, {
        Serializer: Serializer
    });

})(jQuery);
(function ($) {

    // Imports ================================================================
    var kendo = window.kendo,
        Class = kendo.Class,
        extend = $.extend,
        Editor = kendo.ui.editor,
        dom = Editor.Dom,
        findNodeIndex = dom.findNodeIndex,
        isDataNode = dom.isDataNode,
        findClosestAncestor = dom.findClosestAncestor,
        getNodeLength = dom.getNodeLength,
        normalize = dom.normalize;

    var SelectionUtils = {
        selectionFromWindow: function (window) {
            if ($.browser.msie && $.browser.version < 9) {
                return new W3CSelection(window.document);
            }

            return window.getSelection();
        },

        selectionFromRange: function (range) {
            var rangeDocument = RangeUtils.documentFromRange(range);
            return SelectionUtils.selectionFromDocument(rangeDocument);
        },

        selectionFromDocument: function (document) {
            return SelectionUtils.selectionFromWindow(dom.windowFromDocument(document));
        }
    };

    var W3CRange = Class.extend({
        init: function (doc) {
            $.extend(this, {
                ownerDocument: doc, /* not part of the spec; used when cloning ranges, traversing the dom and creating fragments */
                startContainer: doc,
                endContainer: doc,
                commonAncestorContainer: doc,
                startOffset: 0,
                endOffset: 0,
                collapsed: true
            });
        },

        // Positioning Methods
        setStart: function (node, offset) {
            this.startContainer = node;
            this.startOffset = offset;
            updateRangeProperties(this);
            fixIvalidRange(this, true);
        },

        setEnd: function (node, offset) {
            this.endContainer = node;
            this.endOffset = offset;
            updateRangeProperties(this);
            fixIvalidRange(this, false);
        },

        setStartBefore: function (node) {
            this.setStart(node.parentNode, findNodeIndex(node));
        },

        setStartAfter: function (node) {
            this.setStart(node.parentNode, findNodeIndex(node) + 1);
        },

        setEndBefore: function (node) {
            this.setEnd(node.parentNode, findNodeIndex(node));
        },

        setEndAfter: function (node) {
            this.setEnd(node.parentNode, findNodeIndex(node) + 1);
        },

        selectNode: function (node) {
            this.setStartBefore(node);
            this.setEndAfter(node);
        },

        selectNodeContents: function (node) {
            this.setStart(node, 0);
            this.setEnd(node, node[node.nodeType === 1 ? 'childNodes' : 'nodeValue'].length);
        },

        collapse: function (toStart) {
            var that = this;

            if (toStart) {
                that.setEnd(that.startContainer, that.startOffset);
            } else {
                that.setStart(that.endContainer, that.endOffset);
            }
        },

        // Editing Methods

        deleteContents: function () {
            var that = this,
                range = that.cloneRange();

            if (that.startContainer != that.commonAncestorContainer) {
                that.setStartAfter(findClosestAncestor(that.commonAncestorContainer, that.startContainer));
            }

            that.collapse(true);

            (function deleteSubtree(iterator) {
                while (iterator.next()) {
                    if (iterator.hasPartialSubtree()) {
                        deleteSubtree(iterator.getSubtreeIterator());
                    } else {
                        iterator.remove();
                    }
                }
            })(new RangeIterator(range));
        },

        cloneContents: function () {
            // clone subtree
            var document = RangeUtils.documentFromRange(this);
            return (function cloneSubtree(iterator) {
                var node, frag = document.createDocumentFragment();

                while (node = iterator.next()) {
                    node = node.cloneNode(!iterator.hasPartialSubtree());

                    if (iterator.hasPartialSubtree()) {
                        node.appendChild(cloneSubtree(iterator.getSubtreeIterator()));
                    }

                    frag.appendChild(node);
                }

                return frag;
            })(new RangeIterator(this));
        },

        extractContents: function () {
            var that = this,
                range = that.cloneRange();

            if (that.startContainer != that.commonAncestorContainer) {
                that.setStartAfter(findClosestAncestor(that.commonAncestorContainer, that.startContainer));
            }

            that.collapse(true);

            var document = RangeUtils.documentFromRange(that);

            return (function extractSubtree(iterator) {
                var node, frag = document.createDocumentFragment();

                while (node = iterator.next()) {
                    if (iterator.hasPartialSubtree()) {
                        node = node.cloneNode(false);
                        node.appendChild(extractSubtree(iterator.getSubtreeIterator()));
                    } else {
                        iterator.remove(that.originalRange);
                    }

                    frag.appendChild(node);
                }

                return frag;
            })(new RangeIterator(range));
        },

        insertNode: function (node) {
            var that = this;

            if (isDataNode(that.startContainer)) {
                if (that.startOffset != that.startContainer.nodeValue.length) {
                    dom.splitDataNode(that.startContainer, that.startOffset);
                }

                dom.insertAfter(node, that.startContainer);
            } else {
                dom.insertAt(that.startContainer, node, that.startOffset);
            }

            that.setStart(that.startContainer, that.startOffset);
        },

        cloneRange: function () {
            // fast copy
            return $.extend(new W3CRange(this.ownerDocument), {
                startContainer: this.startContainer,
                endContainer: this.endContainer,
                commonAncestorContainer: this.commonAncestorContainer,
                startOffset: this.startOffset,
                endOffset: this.endOffset,
                collapsed: this.collapsed,

                originalRange: this /* not part of the spec; used to update the original range when calling extractContents() on clones */
            });
        },

        // used for debug purposes
        toString: function () {
            var startNodeName = this.startContainer.nodeName,
                endNodeName = this.endContainer.nodeName;

            return [startNodeName == "#text" ? this.startContainer.nodeValue : startNodeName, '(', this.startOffset, ') : ',
                    endNodeName == "#text" ? this.endContainer.nodeValue : endNodeName, '(', this.endOffset, ')'].join('');
        }
    });

    /* can be used in Range.compareBoundaryPoints if we need it one day */
    function compareBoundaries(start, end, startOffset, endOffset) {
        if (start == end) {
            return endOffset - startOffset;
        }

        // end is child of start
        var container = end;
        while (container && container.parentNode != start) {
            container = container.parentNode;
        }

        if (container) {
            return findNodeIndex(container) - startOffset;
        }

        // start is child of end
        container = start;
        while (container && container.parentNode != end) {
            container = container.parentNode;
        }

        if (container) {
            return endOffset - findNodeIndex(container) - 1;
        }

        // deep traversal
        var root = dom.commonAncestor(start, end);
        var startAncestor = start;

        while (startAncestor && startAncestor.parentNode != root) {
            startAncestor = startAncestor.parentNode;
        }

        if (!startAncestor) {
            startAncestor = root;
        }

        var endAncestor = end;
        while (endAncestor && endAncestor.parentNode != root) {
            endAncestor = endAncestor.parentNode;
        }

        if (!endAncestor) {
            endAncestor = root;
        }

        if (startAncestor == endAncestor) {
            return 0;
        }

        return findNodeIndex(endAncestor) - findNodeIndex(startAncestor);
    }

    function fixIvalidRange(range, toStart) {
        function isInvalidRange(range) {
            try {
                return compareBoundaries(range.startContainer, range.endContainer, range.startOffset, range.endOffset) < 0;
            } catch (ex) {
                // range was initially invalid (e.g. when cloned from invalid range) - it must be fixed
                return true;
            }
        }

        if (isInvalidRange(range)) {
            if (toStart) {
                range.commonAncestorContainer = range.endContainer = range.startContainer;
                range.endOffset = range.startOffset;
            } else {
                range.commonAncestorContainer = range.startContainer = range.endContainer;
                range.startOffset = range.endOffset;
            }

            range.collapsed = true;
        }
    }

    function updateRangeProperties(range) {
        range.collapsed = range.startContainer == range.endContainer && range.startOffset == range.endOffset;

        var node = range.startContainer;
        while (node && node != range.endContainer && !dom.isAncestorOf(node, range.endContainer)) {
            node = node.parentNode;
        }

        range.commonAncestorContainer = node;
    }

    var RangeIterator = Class.extend({
        init: function (range) {
            $.extend(this, {
                range: range,
                _current: null,
                _next: null,
                _end: null
            });

            if (range.collapsed) {
                return;
            }

            var root = range.commonAncestorContainer;

            this._next = range.startContainer == root && !isDataNode(range.startContainer) ?
            range.startContainer.childNodes[range.startOffset] :
                    findClosestAncestor(root, range.startContainer);

            this._end = range.endContainer == root && !isDataNode(range.endContainer) ?
    range.endContainer.childNodes[range.endOffset] :
            findClosestAncestor(root, range.endContainer).nextSibling;
        },

        hasNext: function () {
            return !!this._next;
        },

        next: function () {
            var that = this,
                current = that._current = that._next;
            that._next = that._current && that._current.nextSibling != that._end ?
            that._current.nextSibling : null;

            if (isDataNode(that._current)) {
                if (that.range.endContainer == that._current) {
                    current = current.cloneNode(true);
                    current.deleteData(that.range.endOffset, current.length - that.range.endOffset);
                }

                if (that.range.startContainer == that._current) {
                    current = current.cloneNode(true);
                    current.deleteData(0, that.range.startOffset);
                }
            }

            return current;
        },

        traverse: function (callback) {
            var that = this,
                current;

            function next() {
                that._current = that._next;
                that._next = that._current && that._current.nextSibling != that._end ? that._current.nextSibling : null;
                return that._current;
            }

            while (current = next()) {
                if (that.hasPartialSubtree()) {
                    that.getSubtreeIterator().traverse(callback);
                } else {
                    callback(current);
                }
            }

            return current;
        },

        remove: function (originalRange) {
            var that = this,
        inStartContainer = that.range.startContainer == that._current,
        inEndContainer = that.range.endContainer == that._current,
                            start, end, delta;

            if (isDataNode(that._current) && (inStartContainer || inEndContainer)) {
                start = inStartContainer ? that.range.startOffset : 0;
                end = inEndContainer ? that.range.endOffset : that._current.length;
                delta = end - start;

                if (originalRange && (inStartContainer || inEndContainer)) {
                    if (that._current == originalRange.startContainer && start <= originalRange.startOffset) {
                        originalRange.startOffset -= delta;
                    }

                    if (that._current == originalRange.endContainer && end <= originalRange.endOffset) {
                        originalRange.endOffset -= delta;
                    }
                }

                that._current.deleteData(start, delta);
            } else {
                var parent = that._current.parentNode;

                if (originalRange && (that.range.startContainer == parent || that.range.endContainer == parent)) {
                    var nodeIndex = findNodeIndex(that._current);

                    if (parent == originalRange.startContainer && nodeIndex <= originalRange.startOffset) {
                        originalRange.startOffset -= 1;
                    }

                    if (parent == originalRange.endContainer && nodeIndex < originalRange.endOffset) {
                        originalRange.endOffset -= 1;
                    }
                }

                dom.remove(that._current);
            }
        },

        hasPartialSubtree: function () {
            return !isDataNode(this._current) &&
            (dom.isAncestorOrSelf(this._current, this.range.startContainer) ||
                dom.isAncestorOrSelf(this._current, this.range.endContainer));
        },

        getSubtreeIterator: function () {
            var that = this,
                subRange = that.range.cloneRange();

            subRange.selectNodeContents(that._current);

            if (dom.isAncestorOrSelf(that._current, that.range.startContainer)) {
                subRange.setStart(that.range.startContainer, that.range.startOffset);
            }

            if (dom.isAncestorOrSelf(that._current, that.range.endContainer)) {
                subRange.setEnd(that.range.endContainer, that.range.endOffset);
            }

            return new RangeIterator(subRange);
        }
    });

    var W3CSelection = Class.extend({
        init: function (doc) {
            this.ownerDocument = doc;
            this.rangeCount = 1;
        },

        addRange: function (range) {
            var textRange = this.ownerDocument.body.createTextRange();

            // end container should be adopted first in order to prevent selection with negative length
            adoptContainer(textRange, range, false);
            adoptContainer(textRange, range, true);

            textRange.select();
        },

        removeAllRanges: function () {
            this.ownerDocument.selection.empty();
        },

        getRangeAt: function () {
            var textRange, range = new W3CRange(this.ownerDocument), selection = this.ownerDocument.selection, element;

            try {
                textRange = selection.createRange();
                element = textRange.item ? textRange.item(0) : textRange.parentElement();
                if (element.ownerDocument != this.ownerDocument) {
                    return range;
                }
            } catch (ex) {
                return range;
            }

            if (selection.type == 'Control') {
                range.selectNode(textRange.item(0));
            } else {
                adoptEndPoint(textRange, range, true);
                adoptEndPoint(textRange, range, false);

                if (range.startContainer.nodeType == 9) {
                    range.setStart(range.endContainer, range.startOffset);
                }

                if (range.endContainer.nodeType == 9) {
                    range.setEnd(range.startContainer, range.endOffset);
                }

                if (textRange.compareEndPoints('StartToEnd', textRange) === 0) {
                    range.collapse(false);
                }

                var startContainer = range.startContainer,
                    endContainer = range.endContainer,
                    body = this.ownerDocument.body;

                if (!range.collapsed && range.startOffset === 0 && range.endOffset == getNodeLength(range.endContainer) &&  // check for full body selection
                    !(startContainer == endContainer && isDataNode(startContainer) && startContainer.parentNode == body)) { // but not when single textnode is selected
                    var movedStart = false,
                        movedEnd = false;

                    while (findNodeIndex(startContainer) === 0 && startContainer == startContainer.parentNode.firstChild && startContainer != body) {
                        startContainer = startContainer.parentNode;
                        movedStart = true;
                    }

                    while (findNodeIndex(endContainer) == getNodeLength(endContainer.parentNode) - 1 && endContainer == endContainer.parentNode.lastChild && endContainer != body) {
                        endContainer = endContainer.parentNode;
                        movedEnd = true;
                    }

                    if (startContainer == body && endContainer == body && movedStart && movedEnd) {
                        range.setStart(startContainer, 0);
                        range.setEnd(endContainer, getNodeLength(body));
                    }
                }
            }

            return range;
        }
    });

    function adoptContainer(textRange, range, start) {
        // find anchor node and offset
        var container = range[start ? 'startContainer' : 'endContainer'];
        var offset = range[start ? 'startOffset' : 'endOffset'], textOffset = 0;
        var anchorNode = isDataNode(container) ? container : container.childNodes[offset] || null;
        var anchorParent = isDataNode(container) ? container.parentNode : container;
        // visible data nodes need a text offset
        if (container.nodeType == 3 || container.nodeType == 4) {
            textOffset = offset;
        }

        // create a cursor element node to position range (since we can't select text nodes)
        var cursorNode = anchorParent.insertBefore(dom.create(range.ownerDocument, 'a'), anchorNode);

        var cursor = range.ownerDocument.body.createTextRange();
        cursor.moveToElementText(cursorNode);
        dom.remove(cursorNode);
        cursor[start ? 'moveStart' : 'moveEnd']('character', textOffset);
        cursor.collapse(false);
        textRange.setEndPoint(start ? 'StartToStart' : 'EndToStart', cursor);
    }

    function adoptEndPoint(textRange, range, start) {
        var cursorNode = dom.create(range.ownerDocument, 'a'), cursor = textRange.duplicate();
        cursor.collapse(start);
        var parent = cursor.parentElement();
        do {
            parent.insertBefore(cursorNode, cursorNode.previousSibling);
            cursor.moveToElementText(cursorNode);
        } while (cursor.compareEndPoints(start ? 'StartToStart' : 'StartToEnd', textRange) > 0 && cursorNode.previousSibling);

        cursor.setEndPoint(start ? 'EndToStart' : 'EndToEnd', textRange);

        var target = cursorNode.nextSibling;

        if (!target) {
            // at end of text node
            target = cursorNode.previousSibling;

            if (target && isDataNode(target)) { // in case of collapsed range in empty tag
                range.setEnd(target, target.nodeValue.length);
                dom.remove(cursorNode);
            } else {
                range.selectNodeContents(parent);
                dom.remove(cursorNode);
                range.endOffset -= 1; // cursorNode was in parent
            }

            return;
        }

        dom.remove(cursorNode);

        if (isDataNode(target)) {
            range[start ? 'setStart' : 'setEnd'](target, cursor.text.length);
        } else {
            range[start ? 'setStartBefore' : 'setEndBefore'](target);
        }
    }

    var RangeEnumerator = Class.extend({
        init: function (range) {
            this.enumerate = function () {
                var nodes = [];

                function visit(node) {
                    if (dom.is(node, 'img') || (node.nodeType == 3 && !dom.isWhitespace(node))) {
                        nodes.push(node);
                    } else {
                        node = node.firstChild;
                        while (node) {
                            visit(node);
                            node = node.nextSibling;
                        }
                    }
                }

                new RangeIterator(range).traverse(visit);

                return nodes;
            };
        }
    });

    var RestorePoint = Class.extend({
        init: function (range) {
            var that = this;
            that.range = range;
            that.rootNode = RangeUtils.documentFromRange(range);
            that.body = that.rootNode.body;
            that.html = that.body.innerHTML;

            that.startContainer = that.nodeToPath(range.startContainer);
            that.endContainer = that.nodeToPath(range.endContainer);
            that.startOffset = that.offset(range.startContainer, range.startOffset);
            that.endOffset = that.offset(range.endContainer, range.endOffset);
        },

        index: function (node) {
            var result = 0,
                lastType = node.nodeType;

            while (node = node.previousSibling) {
                var nodeType = node.nodeType;

                if (nodeType != 3 || lastType != nodeType) {
                    result++;
                }

                lastType = nodeType;
            }

            return result;
        },

        offset: function (node, value) {
            if (node.nodeType == 3) {
                while ((node = node.previousSibling) && node.nodeType == 3) {
                    value += node.nodeValue.length;
                }
            }

            return value;
        },

        nodeToPath: function (node) {
            var path = [];

            while (node != this.rootNode) {
                path.push(this.index(node));
                node = node.parentNode;
            }

            return path;
        },

        toRangePoint: function (range, start, path, denormalizedOffset) {
            var node = this.rootNode,
                length = path.length,
                offset = denormalizedOffset;

            while (length--) {
                node = node.childNodes[path[length]];
            }

            while (node.nodeType == 3 && node.nodeValue.length < offset) {
                offset -= node.nodeValue.length;
                node = node.nextSibling;
            }

            range[start ? 'setStart' : 'setEnd'](node, offset);
        },

        toRange: function () {
            var that = this,
    result = that.range.cloneRange();

            that.toRangePoint(result, true, that.startContainer, that.startOffset);
            that.toRangePoint(result, false, that.endContainer, that.endOffset);

            return result;
        }

    });

    var Marker = Class.extend({
        init: function () {
            this.caret = null;
        },

        addCaret: function (range) {
            var that = this;

            that.caret = dom.create(RangeUtils.documentFromRange(range), 'span', {
                className: 'k-marker'
            });
            range.insertNode(that.caret);
            range.selectNode(that.caret);
            return that.caret;
        },

        removeCaret: function (range) {
            var that = this,
                previous = that.caret.previousSibling,
                startOffset = 0;

            if (previous) {
                startOffset = isDataNode(previous) ? previous.nodeValue.length : findNodeIndex(previous);
            }

            var container = that.caret.parentNode;
            var containerIndex = previous ? findNodeIndex(previous) : 0;

            dom.remove(that.caret);
            normalize(container);

            var node = container.childNodes[containerIndex];

            if (isDataNode(node)) {
                range.setStart(node, startOffset);
            }
            else if (node) {
                var textNode = dom.lastTextNode(node);
                if (textNode) {
                    range.setStart(textNode, textNode.nodeValue.length);
                } else {
                    range[previous ? 'setStartAfter' : 'setStartBefore'](node);
                }
            } else {
                if (!$.browser.msie && !container.innerHTML) {
                    container.innerHTML = '<br _moz_dirty="" />';
                }

                range.selectNodeContents(container);
            }
            range.collapse(true);
        },

        add: function (range, expand) {
            var that = this;

            if (expand && range.collapsed) {
                that.addCaret(range);
                range = RangeUtils.expand(range);
            }

            var rangeBoundary = range.cloneRange();

            rangeBoundary.collapse(false);
            that.end = dom.create(RangeUtils.documentFromRange(range), 'span', {
                className: 'k-marker'
            });
            rangeBoundary.insertNode(that.end);

            rangeBoundary = range.cloneRange();
            rangeBoundary.collapse(true);
            that.start = that.end.cloneNode(true);
            rangeBoundary.insertNode(that.start);

            range.setStartBefore(that.start);
            range.setEndAfter(that.end);

            normalize(range.commonAncestorContainer);

            return range;
        },

        remove: function (range) {
            var that = this,
                start = that.start,
end = that.end,
                shouldNormalizeStart,
                shouldNormalizeEnd,
                shouldNormalize;

            normalize(range.commonAncestorContainer);

            while (!start.nextSibling && start.parentNode) {
                start = start.parentNode;
            }

            while (!end.previousSibling && end.parentNode) {
                end = end.parentNode;
            }

            // merely accessing the siblings will solve range issues in IE
            shouldNormalizeStart = (start.previousSibling && start.previousSibling.nodeType == 3) &&
                               (start.nextSibling && start.nextSibling.nodeType == 3);

            shouldNormalizeEnd = (end.previousSibling && end.previousSibling.nodeType == 3) &&
                                 (end.nextSibling && end.nextSibling.nodeType == 3);

            shouldNormalize = shouldNormalizeStart && shouldNormalizeEnd;

            start = start.nextSibling;
            end = end.previousSibling;

            var collapsed = false;
            var collapsedToStart = false;
            // collapsed range
            if (start == that.end) {
                collapsedToStart = !!that.start.previousSibling;
                start = end = that.start.previousSibling || that.end.nextSibling;
                collapsed = true;
            }

            dom.remove(that.start);
            dom.remove(that.end);

            if (!start || !end) {
                range.selectNodeContents(range.commonAncestorContainer);
                range.collapse(true);
                return;
            }

            var startOffset = collapsed ? isDataNode(start) ? start.nodeValue.length : start.childNodes.length : 0;
            var endOffset = isDataNode(end) ? end.nodeValue.length : end.childNodes.length;

            if (start.nodeType == 3) {
                while (start.previousSibling && start.previousSibling.nodeType == 3) {
                    start = start.previousSibling;
                    startOffset += start.nodeValue.length;
                }
            }

            if (end.nodeType == 3) {
                while (end.previousSibling && end.previousSibling.nodeType == 3) {
                    end = end.previousSibling;
                    endOffset += end.nodeValue.length;
                }
            }

            var startIndex = findNodeIndex(start), startParent = start.parentNode;
            var endIndex = findNodeIndex(end), endParent = end.parentNode;

            for (var startPointer = start; startPointer.previousSibling; startPointer = startPointer.previousSibling) {
                if (startPointer.nodeType == 3 && startPointer.previousSibling.nodeType == 3) {
                    startIndex--;
                }
            }

            for (var endPointer = end; endPointer.previousSibling; endPointer = endPointer.previousSibling) {
                if (endPointer.nodeType == 3 && endPointer.previousSibling.nodeType == 3) {
                    endIndex--;
                }
            }

            normalize(startParent);

            if (start.nodeType == 3) {
                start = startParent.childNodes[startIndex];
            }

            normalize(endParent);
            if (end.nodeType == 3) {
                end = endParent.childNodes[endIndex];
            }

            if (collapsed) {
                if (start.nodeType == 3) {
                    range.setStart(start, startOffset);
                } else {
                    range[collapsedToStart ? 'setStartAfter' : 'setStartBefore'](start);
                }

                range.collapse(true);

            } else {
                if (start.nodeType == 3) {
                    range.setStart(start, startOffset);
                } else {
                    range.setStartBefore(start);
                }

                if (end.nodeType == 3) {
                    range.setEnd(end, endOffset);
                } else {
                    range.setEndAfter(end);
                }
            }
            if (that.caret) {
                that.removeCaret(range);
            }
        }

    });

    var boundary = /[\u0009-\u000d]|\u0020|\u00a0|\ufeff|\.|,|;|:|!|\(|\)|\?/;

    var RangeUtils = {
        nodes: function (range) {
            var nodes = RangeUtils.textNodes(range);
            if (!nodes.length) {
                range.selectNodeContents(range.commonAncestorContainer);
                nodes = RangeUtils.textNodes(range);
                if (!nodes.length) {
                    nodes = dom.significantChildNodes(range.commonAncestorContainer);
                }
            }
            return nodes;
        },

        textNodes: function (range) {
            return new RangeEnumerator(range).enumerate();
        },

        documentFromRange: function (range) {
            var startContainer = range.startContainer;
            return startContainer.nodeType == 9 ? startContainer : startContainer.ownerDocument;
        },

        createRange: function (document) {
            if ($.browser.msie && $.browser.version < 9) {
                return new W3CRange(document);
            }

            return document.createRange();
        },

        selectRange: function (range) {
            var image = RangeUtils.image(range);
            if (image) {
                range.setStartAfter(image);
                range.setEndAfter(image);
            }
            var selection = SelectionUtils.selectionFromRange(range);
            selection.removeAllRanges();
            selection.addRange(range);
        },

        split: function (range, node, trim) {
            function partition(start) {
                var partitionRange = range.cloneRange();
                partitionRange.collapse(start);
                partitionRange[start ? 'setStartBefore' : 'setEndAfter'](node);
                var contents = partitionRange.extractContents();
                if (trim) {
                    contents = dom.trim(contents);
                }
                dom[start ? 'insertBefore' : 'insertAfter'](contents, node);
            }
            partition(true);
            partition(false);
        },

        getMarkers: function (range) {
            var markers = [];

            new RangeIterator(range).traverse(function (node) {
                if (node.className == 'k-marker') {
                    markers.push(node);
                }
            });

            return markers;
        },

        image: function (range) {
            var nodes = [];

            new RangeIterator(range).traverse(function (node) {
                if (dom.is(node, 'img')) {
                    nodes.push(node);
                }
            });

            if (nodes.length == 1) {
                return nodes[0];
            }
        },

        expand: function (range) {
            var result = range.cloneRange();

            var startContainer = result.startContainer.childNodes[result.startOffset === 0 ? 0 : result.startOffset - 1];
            var endContainer = result.endContainer.childNodes[result.endOffset];

            if (!isDataNode(startContainer) || !isDataNode(endContainer)) {
                return result;
            }

            var beforeCaret = startContainer.nodeValue;
            var afterCaret = endContainer.nodeValue;

            if (!beforeCaret || !afterCaret) {
                return result;
            }

            var startOffset = beforeCaret.split('').reverse().join('').search(boundary);
            var endOffset = afterCaret.search(boundary);

            if (!startOffset || !endOffset) {
                return result;
            }

            endOffset = endOffset == -1 ? afterCaret.length : endOffset;
            startOffset = startOffset == -1 ? 0 : beforeCaret.length - startOffset;

            result.setStart(startContainer, startOffset);
            result.setEnd(endContainer, endOffset);

            return result;
        },

        isExpandable: function (range) {
            var node = range.startContainer;
            var rangeDocument = RangeUtils.documentFromRange(range);

            if (node == rangeDocument || node == rangeDocument.body) {
                return false;
            }

            var result = range.cloneRange();

            var value = node.nodeValue;
            if (!value) {
                return false;
            }

            var beforeCaret = value.substring(0, result.startOffset);
            var afterCaret = value.substring(result.startOffset);

            var startOffset = 0, endOffset = 0;

            if (beforeCaret) {
                startOffset = beforeCaret.split('').reverse().join('').search(boundary);
            }

            if (afterCaret) {
                endOffset = afterCaret.search(boundary);
            }

            return startOffset && endOffset;
        }
    };

    extend(Editor, {
        SelectionUtils: SelectionUtils,
        W3CRange: W3CRange,
        RangeIterator: RangeIterator,
        W3CSelection: W3CSelection,
        RangeEnumerator: RangeEnumerator,
        RestorePoint: RestorePoint,
        Marker: Marker,
        RangeUtils: RangeUtils
    });

})(jQuery);
(function ($) {

    // Imports ================================================================
    var kendo = window.kendo,
                        Class = kendo.Class,
                    Editor = kendo.ui.editor,
        EditorUtils = Editor.EditorUtils,
        registerTool = EditorUtils.registerTool,
        dom = Editor.Dom,
        RangeUtils = Editor.RangeUtils,
        selectRange = RangeUtils.selectRange,
        Tool = Editor.Tool,
        ToolTemplate = Editor.ToolTemplate,
        RestorePoint = Editor.RestorePoint,
        Marker = Editor.Marker,
        extend = $.extend;

    var Command = Class.extend({
        init: function (options) {
            var that = this;
            that.options = options;
            that.restorePoint = new RestorePoint(options.range);
            that.marker = new Marker();
            that.formatter = options.formatter;
        },

        getRange: function () {
            return this.restorePoint.toRange();
        },

        lockRange: function (expand) {
            return this.marker.add(this.getRange(), expand);
        },

        releaseRange: function (range) {
            this.marker.remove(range);
            selectRange(range);
        },

        undo: function () {
            var point = this.restorePoint;
            point.body.innerHTML = point.html;
            selectRange(point.toRange());
        },

        redo: function () {
            this.exec();
        },

        exec: function () {
            var that = this,
range = that.lockRange(true);
            that.formatter.editor = that.editor;
            that.formatter.toggle(range);
            that.releaseRange(range);
        }
    });

    var GenericCommand = Class.extend({
        init: function (startRestorePoint, endRestorePoint) {
            this.body = startRestorePoint.body;
            this.startRestorePoint = startRestorePoint;
            this.endRestorePoint = endRestorePoint;
        },

        redo: function () {
            this.body.innerHTML = this.endRestorePoint.html;
            selectRange(this.endRestorePoint.toRange());
        },

        undo: function () {
            this.body.innerHTML = this.startRestorePoint.html;
            selectRange(this.startRestorePoint.toRange());
        }
    });

    var InsertHtmlCommand = Command.extend({
        init: function (options) {
            Command.fn.init.call(this, options);

            this.managesUndoRedo = true;
        },

        exec: function () {
            var editor = this.editor;
            var range = editor.getRange();
            var startRestorePoint = new RestorePoint(range);

            editor.clipboard.paste(this.options.value || '');
            editor.undoRedoStack.push(new GenericCommand(startRestorePoint, new RestorePoint(editor.getRange())));

            editor.focus();
        }
    });

    var InsertHtmlTool = Tool.extend({
        initialize: function (ui, initOptions) {
            var editor = initOptions.editor;

            new Editor.SelectBox(ui, {
                dataSource: editor.options.insertHtml || [],
                dataTextField: "text",
                dataValueField: "value",
                change: function (e) {
                    Tool.exec(editor, 'insertHtml', this.value());
                },
                title: editor.options.messages.insertHtml,
                highlightFirst: false
            });
        },

        command: function (commandArguments) {
            return new InsertHtmlCommand(commandArguments);
        },

        update: function (ui, nodes) {
            var selectbox = ui.data("kendoSelectBox") || ui.find("select").data("kendoSelectBox");
            selectbox.close();
            selectbox.value(selectbox.options.title);
        }
    });

    var UndoRedoStack = Class.extend({
        init: function () {
            this.stack = [];
            this.currentCommandIndex = -1;
        },

        push: function (command) {
            var that = this;

            that.stack = that.stack.slice(0, that.currentCommandIndex + 1);
            that.currentCommandIndex = that.stack.push(command) - 1;
        },

        undo: function () {
            if (this.canUndo()) {
                this.stack[this.currentCommandIndex--].undo();
            }
        },

        redo: function () {
            if (this.canRedo()) {
                this.stack[++this.currentCommandIndex].redo();
            }
        },

        canUndo: function () {
            return this.currentCommandIndex >= 0;
        },

        canRedo: function () {
            return this.currentCommandIndex != this.stack.length - 1;
        }
    });

    var TypingHandler = Class.extend({
        init: function (editor) {
            this.editor = editor;
        },

        keydown: function (e) {
            var that = this,
    editor = that.editor,
    keyboard = editor.keyboard,
                isTypingKey = keyboard.isTypingKey(e);

            if (isTypingKey && !keyboard.isTypingInProgress()) {
                var range = editor.getRange();
                that.startRestorePoint = new RestorePoint(range);

                keyboard.startTyping(function () {
                    editor.selectionRestorePoint = that.endRestorePoint = new RestorePoint(editor.getRange());
                    editor.undoRedoStack.push(new GenericCommand(that.startRestorePoint, that.endRestorePoint));
                });

                return true;
            }

            return false;
        },

        keyup: function (e) {
            var keyboard = this.editor.keyboard;

            if (keyboard.isTypingInProgress()) {
                keyboard.endTyping();
                return true;
            }

            return false;
        }
    });

    var SystemHandler = Class.extend({
        init: function (editor) {
            this.editor = editor;
            this.systemCommandIsInProgress = false;
        },

        createUndoCommand: function () {
            var that = this;

            that.endRestorePoint = new RestorePoint(that.editor.getRange());
            that.editor.undoRedoStack.push(new GenericCommand(that.startRestorePoint, that.endRestorePoint));
            that.startRestorePoint = that.endRestorePoint;
        },

        changed: function () {
            if (this.startRestorePoint) {
                return this.startRestorePoint.html != this.editor.body.innerHTML;
            }

            return false;
        },

        keydown: function (e) {
            var that = this,
                editor = that.editor,
    keyboard = editor.keyboard;

            if (keyboard.isModifierKey(e)) {

                if (keyboard.isTypingInProgress()) {
                    keyboard.endTyping(true);
                }

                that.startRestorePoint = new RestorePoint(editor.getRange());
                return true;
            }

            if (keyboard.isSystem(e)) {
                that.systemCommandIsInProgress = true;

                if (that.changed()) {
                    that.systemCommandIsInProgress = false;
                    that.createUndoCommand();
                }

                return true;
            }

            return false;
        },

        keyup: function (e) {
            var that = this;

            if (that.systemCommandIsInProgress && that.changed()) {
                that.systemCommandIsInProgress = false;
                that.createUndoCommand(e);
                return true;
            }

            return false;
        }
    });

    var Keyboard = Class.extend({
        init: function (handlers) {
            this.handlers = handlers;
            this.typingInProgress = false;
        },

        isCharacter: function (keyCode) {
            return (keyCode >= 48 && keyCode <= 90) || (keyCode >= 96 && keyCode <= 111) ||
                   (keyCode >= 186 && keyCode <= 192) || (keyCode >= 219 && keyCode <= 222);
        },

        toolFromShortcut: function (tools, e) {
            var key = String.fromCharCode(e.keyCode),
                toolName,
                toolOptions;

            for (toolName in tools) {
                toolOptions = $.extend({
                    ctrl: false, alt: false, shift: false
                }, tools[toolName].options);

                if ((toolOptions.key == key || toolOptions.key == e.keyCode) &&
                    toolOptions.ctrl == e.ctrlKey &&
                    toolOptions.alt == e.altKey &&
                    toolOptions.shift == e.shiftKey) {
                    return toolName;
                }
            }
        },

        isTypingKey: function (e) {
            var keyCode = e.keyCode;
            return (this.isCharacter(keyCode) && !e.ctrlKey && !e.altKey) ||
                   keyCode == 32 || keyCode == 13 || keyCode == 8 ||
                   (keyCode == 46 && !e.shiftKey && !e.ctrlKey && !e.altKey);
        },

        isModifierKey: function (e) {
            var keyCode = e.keyCode;
            return (keyCode == 17 && !e.shiftKey && !e.altKey) ||
                   (keyCode == 16 && !e.ctrlKey && !e.altKey) ||
               (keyCode == 18 && !e.ctrlKey && !e.shiftKey);
        },

        isSystem: function (e) {
            return e.keyCode == 46 && e.ctrlKey && !e.altKey && !e.shiftKey;
        },

        startTyping: function (callback) {
            this.onEndTyping = callback;
            this.typingInProgress = true;
        },

        stopTyping: function () {
            this.typingInProgress = false;
            if (this.onEndTyping) {
                this.onEndTyping();
            }
        },

        endTyping: function (force) {
            var that = this;
            that.clearTimeout();
            if (force) {
                that.stopTyping();
            } else {
                that.timeout = window.setTimeout($.proxy(that.stopTyping, that), 1000);
            }
        },

        isTypingInProgress: function () {
            return this.typingInProgress;
        },

        clearTimeout: function () {
            window.clearTimeout(this.timeout);
        },

        notify: function (e, what) {
            var i, handlers = this.handlers;

            for (i = 0; i < handlers.length; i++) {
                if (handlers[i][what](e)) {
                    break;
                }
            }
        },

        keydown: function (e) {
            this.notify(e, 'keydown');
        },

        keyup: function (e) {
            this.notify(e, 'keyup');
        }
    });

    var Clipboard = Class.extend({
        init: function (editor) {
            this.editor = editor;
            this.cleaners = [new MSWordFormatCleaner()];
        },

        htmlToFragment: function (html) {
            var editor = this.editor,
                doc = editor.document,
                container = dom.create(doc, 'div'),
                fragment = doc.createDocumentFragment();

            container.innerHTML = html;

            while (container.firstChild) {
                fragment.appendChild(container.firstChild);
            }

            return fragment;
        },

        isBlock: function (html) {
            return (/<(div|p|ul|ol|table|h[1-6])/i).test(html);
        },

        oncut: function (e) {
            var editor = this.editor,
                startRestorePoint = new RestorePoint(editor.getRange());
            setTimeout(function () {
                editor.undoRedoStack.push(new GenericCommand(startRestorePoint, new RestorePoint(editor.getRange())));
            });
        },

        onpaste: function (e) {
            var editor = this.editor,
                range = editor.getRange(),
                bom = "\ufeff",
                startRestorePoint = new RestorePoint(range),
                clipboardNode = dom.create(editor.document, 'div', {
                    className: 'k-paste-container', innerHTML: bom
                });

            editor.body.appendChild(clipboardNode);

            if (editor.body.createTextRange) {
                e.preventDefault();
                var r = editor.createRange();
                r.selectNodeContents(clipboardNode);
                editor.selectRange(r);
                var textRange = editor.body.createTextRange();
                textRange.moveToElementText(clipboardNode);
                $(editor.body).unbind('paste');
                textRange.execCommand('Paste');
                $(editor.body).bind('paste', $.proxy(arguments.callee, this));
            } else {
                var clipboardRange = editor.createRange();
                clipboardRange.selectNodeContents(clipboardNode);
                selectRange(clipboardRange);
            }

            setTimeout(function () {
                var html, args = {
                    html: ""
                };

                selectRange(range);
                dom.remove(clipboardNode);

                if (clipboardNode.lastChild && dom.is(clipboardNode.lastChild, 'br')) {
                    dom.remove(clipboardNode.lastChild);
                }

                html = clipboardNode.innerHTML;

                if (html != bom) {
                    args.html = html;
                }

                editor.trigger("paste", args);
                editor.clipboard.paste(args.html, true);
                editor.undoRedoStack.push(new GenericCommand(startRestorePoint, new RestorePoint(editor.getRange())));
                Editor.EditorUtils.select(editor);
            });
        },

        splittableParent: function (block, node) {
            var parentNode, body;

            if (block) {
                return dom.parentOfType(node, ['p', 'ul', 'ol']) || node.parentNode;
            }

            parentNode = node.parentNode;
            body = node.ownerDocument.body;

            if (dom.isInline(parentNode)) {
                while (parentNode.parentNode != body && !dom.isBlock(parentNode.parentNode)) {
                    parentNode = parentNode.parentNode;
                }
            }

            return parentNode;
        },

        paste: function (html, clean) {
            var editor = this.editor,
                i, l;

            for (i = 0, l = this.cleaners.length; i < l; i++) {
                if (this.cleaners[i].applicable(html)) {
                    html = this.cleaners[i].clean(html);
                }
            }

            if (clean) {
                // remove br elements which immediately precede block elements
                html = html.replace(/(<br>(\s|&nbsp;)*)+(<\/?(div|p|li|col|t))/ig, "$3");
                // remove empty inline elements
                html = html.replace(/<(a|span)[^>]*><\/\1>/ig, "");
            }

            // It is possible in IE to copy just <li> tags
            html = html.replace(/^<li/i, '<ul><li').replace(/li>$/g, 'li></ul>');

            var block = this.isBlock(html);

            var range = editor.getRange();
            range.deleteContents();

            if (range.startContainer == editor.document) {
                range.selectNodeContents(editor.body);
            }

            var marker = new Marker();
            var caret = marker.addCaret(range);

            var parent = this.splittableParent(block, caret);
            var unwrap = false;

            if (!/body|td/.test(dom.name(parent)) && (block || dom.isInline(parent))) {
                range.selectNode(caret);
                RangeUtils.split(range, parent, true);
                unwrap = true;
            }

            var fragment = this.htmlToFragment(html);

            if (fragment.firstChild && fragment.firstChild.className === "k-paste-container") {
                var fragmentsHtml = [];
                for (i = 0, l = fragment.childNodes.length; i < l; i++) {
                    fragmentsHtml.push(fragment.childNodes[i].innerHTML);
                }

                fragment = this.htmlToFragment(fragmentsHtml.join('<br />'));
            }

            range.insertNode(fragment);

            parent = this.splittableParent(block, caret);
            if (unwrap) {
                while (caret.parentNode != parent) {
                    dom.unwrap(caret.parentNode);
                }

                dom.unwrap(caret.parentNode);
            }

            dom.normalize(range.commonAncestorContainer);
            caret.style.display = 'inline';
            dom.scrollTo(caret);
            marker.removeCaret(range);
            selectRange(range);
        }
    });

    var MSWordFormatCleaner = Class.extend({
        init: function () {
            this.replacements = [
                /<\?xml[^>]*>/gi, '',
                /<!--(.|\n)*?-->/g, '', /* comments */
                /&quot;/g, "'", /* encoded quotes (in attributes) */
                /(?:<br>&nbsp;[\s\r\n]+|<br>)*(<\/?(h[1-6]|hr|p|div|table|tbody|thead|tfoot|th|tr|td|li|ol|ul|caption|address|pre|form|blockquote|dl|dt|dd|dir|fieldset)[^>]*>)(?:<br>&nbsp;[\s\r\n]+|<br>)*/g, '$1',
                /<br><br>/g, '<BR><BR>',
                /<br>/g, ' ',
                /<table([^>]*)>(\s|&nbsp;)+<t/gi, '<table$1><t',
                /<tr[^>]*>(\s|&nbsp;)*<\/tr>/gi, '',
                /<tbody[^>]*>(\s|&nbsp;)*<\/tbody>/gi, '',
                /<table[^>]*>(\s|&nbsp;)*<\/table>/gi, '',
                /<BR><BR>/g, '<br>',
                /^\s*(&nbsp;)+/gi, '',
                /(&nbsp;|<br[^>]*>)+\s*$/gi, '',
                /mso-[^;"]*;?/ig, '', /* office-related CSS attributes */
                /<(\/?)b(\s[^>]*)?>/ig, '<$1strong$2>',
                /<(\/?)i(\s[^>]*)?>/ig, '<$1em$2>',
                /<\/?(meta|link|style|o:|v:|x:)[^>]*>((?:.|\n)*?<\/(meta|link|style|o:|v:|x:)[^>]*>)?/ig, '', /* external references and namespaced tags */
                /style=(["|'])\s*\1/g, '' /* empty style attributes */
            ];
        },

        applicable: function (html) {
            return (/class="?Mso|style="[^"]*mso-/i).test(html);
        },

        listType: function (html) {
            if (/^[\u2022\u00b7\u00a7\u00d8o]\u00a0+/.test(html)) {
                return 'ul';
            }

            if (/^\s*\w+[\.\)]\u00a0{2,}/.test(html)) {
                return 'ol';
            }
        },

        lists: function (html) {
            var placeholder = dom.create(document, 'div', {
                innerHTML: html
            });
            var blockChildren = $(dom.blockElements.join(','), placeholder);

            var lastMargin = -1, lastType, levels = {
                'ul': {}, 'ol': {
                }
            }, li = placeholder;

            for (var i = 0; i < blockChildren.length; i++) {
                var p = blockChildren[i];
                html = p.innerHTML.replace(/<\/?\w+[^>]*>/g, '').replace(/&nbsp;/g, '\u00a0');
                var type = this.listType(html);

                if (!type || dom.name(p) != 'p') {
                    if (!p.innerHTML) {
                        dom.remove(p);
                    } else {
                        levels = {
                            'ul': {
                            }, 'ol': {
                            }
                        };
                        li = placeholder;
                        lastMargin = -1;
                    }
                    continue;
                }

                var margin = parseFloat(p.style.marginLeft || 0);
                var list = levels[type][margin];

                if (margin > lastMargin || !list) {
                    list = dom.create(document, type);

                    if (li == placeholder) {
                        dom.insertBefore(list, p);
                    } else {
                        li.appendChild(list);
                    }

                    levels[type][margin] = list;
                }

                if (lastType != type) {
                    for (var key in levels) {
                        for (var child in levels[key]) {
                            if ($.contains(list, levels[key][child])) {
                                delete levels[key][child];
                            }
                        }
                    }
                }

                dom.remove(p.firstChild);
                li = dom.create(document, 'li', {
                    innerHTML: p.innerHTML
                });
                list.appendChild(li);
                dom.remove(p);
                lastMargin = margin;
                lastType = type;
            }
            return placeholder.innerHTML;
        },

        stripEmptyAnchors: function (html) {
            return html.replace(/<a([^>]*)>\s*<\/a>/ig, function (a, attributes) {
                if (!attributes || attributes.indexOf("href") < 0) {
                    return "";
                }

                return a;
            });
        },

        clean: function (html) {
            var that = this,
                replacements = that.replacements,
                i, l;

            for (i = 0, l = replacements.length; i < l; i += 2) {
                html = html.replace(replacements[i], replacements[i + 1]);
            }

            html = that.stripEmptyAnchors(html);
            html = that.lists(html);
            html = html.replace(/\s+class="?[^"\s>]*"?/ig, '');

            return html;
        }
    });

    extend(Editor, {
        Command: Command,
        GenericCommand: GenericCommand,
        InsertHtmlCommand: InsertHtmlCommand,
        InsertHtmlTool: InsertHtmlTool,
        UndoRedoStack: UndoRedoStack,
        TypingHandler: TypingHandler,
        SystemHandler: SystemHandler,
        Keyboard: Keyboard,
        Clipboard: Clipboard,
        MSWordFormatCleaner: MSWordFormatCleaner
    });

    registerTool("insertHtml", new InsertHtmlTool({
        template: new ToolTemplate({
            template: EditorUtils.dropDownListTemplate, title: "Insert HTML", initialValue: "Insert HTML"
        })
    }));

})(jQuery);
(function ($) {

    var kendo = window.kendo,
        Class = kendo.Class,
        Editor = kendo.ui.editor,
formats = kendo.ui.Editor.fn.options.formats,
EditorUtils = Editor.EditorUtils,
Tool = Editor.Tool,
ToolTemplate = Editor.ToolTemplate,
        FormatTool = Editor.FormatTool,
        dom = Editor.Dom,
        RangeUtils = Editor.RangeUtils,
extend = $.extend,
        registerTool = Editor.EditorUtils.registerTool,
        registerFormat = Editor.EditorUtils.registerFormat,
        KMARKER = "k-marker";

    var InlineFormatFinder = Class.extend({
        init: function (format) {
            this.format = format;
        },

        numberOfSiblings: function (referenceNode) {
            var textNodesCount = 0,
                elementNodesCount = 0,
                markerCount = 0,
                parentNode = referenceNode.parentNode,
                node;

            for (node = parentNode.firstChild; node; node = node.nextSibling) {
                if (node != referenceNode) {
                    if (node.className == KMARKER) {
                        markerCount++;
                    } else if (node.nodeType == 3) {
                        textNodesCount++;
                    } else {
                        elementNodesCount++;
                    }
                }
            }

            if (markerCount > 1 && parentNode.firstChild.className == KMARKER && parentNode.lastChild.className == KMARKER) {
                // full node selection
                return 0;
            } else {
                return elementNodesCount + textNodesCount;
            }
        },

        findSuitable: function (sourceNode, skip) {
            if (!skip && this.numberOfSiblings(sourceNode) > 0) {
                return null;
            }

            return dom.parentOfType(sourceNode, this.format[0].tags);
        },

        findFormat: function (sourceNode) {
            var format = this.format,
                attrEquals = dom.attrEquals,
                i, len, node, tags, attributes;

            for (i = 0, len = format.length; i < len; i++) {
                node = sourceNode;
                tags = format[i].tags;
                attributes = format[i].attr;

                if (node && dom.ofType(node, tags) && attrEquals(node, attributes)) {
                    return node;
                }

                while (node) {
                    node = dom.parentOfType(node, tags);
                    if (node && attrEquals(node, attributes)) {
                        return node;
                    }
                }
            }

            return null;
        },

        isFormatted: function (nodes) {
            var i, len;

            for (i = 0, len = nodes.length; i < len; i++) {
                if (this.findFormat(nodes[i])) {
                    return true;
                }
            }
            return false;
        }
    });

    var InlineFormatter = Class.extend({
        init: function (format, values) {
            var that = this;
            that.finder = new InlineFormatFinder(format);
            that.attributes = extend({}, format[0].attr, values);
            that.tag = format[0].tags[0];
        },

        wrap: function (node) {
            return dom.wrap(node, dom.create(node.ownerDocument, this.tag, this.attributes));
        },

        activate: function (range, nodes) {
            var that = this;
            if (that.finder.isFormatted(nodes)) {
                that.split(range);
                that.remove(nodes);
            } else {
                that.apply(nodes);
            }
        },

        toggle: function (range) {
            var nodes = RangeUtils.textNodes(range);

            if (nodes.length > 0) {
                this.activate(range, nodes);
            }
        },

        apply: function (nodes) {
            var that = this,
            formatNodes = [],
            i, l, node, formatNode;

            for (i = 0, l = nodes.length; i < l; i++) {
                node = nodes[i];
                formatNode = that.finder.findSuitable(node);
                if (formatNode) {
                    dom.attr(formatNode, that.attributes);
                } else {
                    formatNode = that.wrap(node);
                }

                formatNodes.push(formatNode);
            }

            that.consolidate(formatNodes);
        },

        remove: function (nodes) {
            var that = this,
            i, l, formatNode;

            for (i = 0, l = nodes.length; i < l; i++) {
                formatNode = that.finder.findFormat(nodes[i]);
                if (formatNode) {
                    if (that.attributes && that.attributes.style) {
                        dom.unstyle(formatNode, that.attributes.style);
                        if (!formatNode.style.cssText) {
                            dom.unwrap(formatNode);
                        }
                    } else {
                        dom.unwrap(formatNode);
                    }
                }
            }
        },

        split: function (range) {
            var nodes = RangeUtils.textNodes(range),
            l = nodes.length,
            i, formatNode;

            if (l > 0) {
                for (i = 0; i < l; i++) {
                    formatNode = this.finder.findFormat(nodes[i]);
                    if (formatNode) {
                        RangeUtils.split(range, formatNode, true);
                    }
                }
            }
        },

        consolidate: function (nodes) {
            var node, last;

            while (nodes.length > 1) {
                node = nodes.pop();
                last = nodes[nodes.length - 1];

                if (node.previousSibling && node.previousSibling.className == KMARKER) {
                    last.appendChild(node.previousSibling);
                }

                if (node.tagName == last.tagName && node.previousSibling == last && node.style.cssText == last.style.cssText) {
                    while (node.firstChild) {
                        last.appendChild(node.firstChild);
                    }
                    dom.remove(node);
                }
            }
        }
    });

    var GreedyInlineFormatFinder = InlineFormatFinder.extend({
        init: function (format, greedyProperty) {
            var that = this;
            that.format = format;
            that.greedyProperty = greedyProperty;
            InlineFormatFinder.fn.init.call(that, format);
        },

        getInlineCssValue: function (node) {
            var attributes = node.attributes,
        trim = $.trim,
        i, l, attribute, name, attributeValue, css, pair, cssIndex, len, propertyAndValue, property, value;

            if (!attributes) {
                return;
            }

            for (i = 0, l = attributes.length; i < l; i++) {
                attribute = attributes[i];
                name = attribute.nodeName;
                attributeValue = attribute.nodeValue;

                if (attribute.specified && name == "style") {

                    css = trim(attributeValue || node.style.cssText).split(";");

                    for (cssIndex = 0, len = css.length; cssIndex < len; cssIndex++) {
                        pair = css[cssIndex];
                        if (pair.length) {
                            propertyAndValue = pair.split(":");
                            property = trim(propertyAndValue[0].toLowerCase());
                            value = trim(propertyAndValue[1]);

                            if (property != this.greedyProperty) {
                                continue;
                            }

                            return property.indexOf("color") >= 0 ? dom.toHex(value) : value;
                        }
                    }
                }
            }

            return;
        },

        getFormatInner: function (node) {
            var $node = $(dom.isDataNode(node) ? node.parentNode : node),
                parents = $node.parents().andSelf(),
                i, len, value;

            for (i = 0, len = parents.length; i < len; i++) {
                value = this.greedyProperty == "className" ? parents[i].className : this.getInlineCssValue(parents[i]);
                if (value) {
                    return value;
                }
            }

            return "inherit";
        },

        getFormat: function (nodes) {
            var result = this.getFormatInner(nodes[0]),
            i, len;

            for (i = 1, len = nodes.length; i < len; i++) {
                if (result != this.getFormatInner(nodes[i])) {
                    return "";
                }
            }

            return result;
        },

        isFormatted: function (nodes) {
            return this.getFormat(nodes) !== "";
        }
    });

    var GreedyInlineFormatter = InlineFormatter.extend({
        init: function (format, values, greedyProperty) {
            var that = this;

            InlineFormatter.fn.init.call(that, format, values);

            that.greedyProperty = greedyProperty;
            that.values = values;
            that.finder = new GreedyInlineFormatFinder(format, greedyProperty);
        },

        activate: function (range, nodes) {
            var that = this,
                camelCase,
                greedyProperty = that.greedyProperty,
                action = "apply";

            that.split(range);

            if (greedyProperty) {
                camelCase = greedyProperty.replace(/-([a-z])/, function (all, letter) {
                    return letter.toUpperCase();
                });

                if (that.values.style[camelCase] == "inherit") {
                    action = "remove";
                }
            }

            that[action](nodes);
        }
    });

    function inlineFormatWillDelayExecution(range) {
        return range.collapsed && !RangeUtils.isExpandable(range);
    }

    var InlineFormatTool = FormatTool.extend({
        init: function (options) {
            FormatTool.fn.init.call(this, extend(options, {
                finder: new InlineFormatFinder(options.format),
                formatter: function () {
                    return new InlineFormatter(options.format);
                }
            }));

            this.willDelayExecution = inlineFormatWillDelayExecution;
        }
    });

    var FontTool = Tool.extend({
        init: function (options) {
            var that = this;
            Tool.fn.init.call(that, options);

            // IE has single selection hence we are using select box instead of combobox
            that.type = ($.browser.msie || kendo.support.touch) ? "kendoDropDownList" : "kendoComboBox";
            that.format = [{
                tags: ["span"]
            }],
            that.finder = new GreedyInlineFormatFinder(that.format, options.cssAttr);
        },

        command: function (commandArguments) {
            var options = this.options,
                format = this.format,
                style = {
                };

            return new Editor.FormatCommand(extend(commandArguments, {
                formatter: function () {
                    style[options.domAttr] = commandArguments.value;

                    return new GreedyInlineFormatter(format, {
                        style: style
                    }, options.cssAttr);
                }
            }));
        },

        willDelayExecution: inlineFormatWillDelayExecution,

        update: function (ui, nodes, pendingFormats) {
            var that = this,
        list = ui.data(that.type),
        pendingFormat = pendingFormats.getPending(that.name),
        format = (pendingFormat && pendingFormat.params) ? pendingFormat.params.value : that.finder.getFormat(nodes);

            list.close();
            list.value(format);
        },

        initialize: function (ui, initOptions) {
            var editor = initOptions.editor,
                options = this.options,
                toolName = options.name,
                dataSource,
                defaultValue = [];

            if (options.defaultValue) {
                defaultValue = [{
                    text: editor.options.messages[options.defaultValue[0].text],
                    value: options.defaultValue[0].value
                }];
            }

            dataSource = defaultValue.concat(options.items ? options.items : editor.options[toolName]);

            ui[this.type]({
                dataTextField: "text",
                dataValueField: "value",
                dataSource: dataSource,
                change: function (e) {
                    Tool.exec(editor, toolName, this.value());
                },
                highlightFirst: false
            });

            ui.closest(".k-widget").removeClass("k-" + toolName).find("*").andSelf().attr("unselectable", "on");

            ui.data(this.type).value("inherit");
        }

    });

    var ColorTool = Tool.extend({
        init: function (options) {
            Tool.fn.init.call(this, options);

            this.options = options;
            this.format = [{ tags: ["span"] }];
        },

        update: function (ui) {
            ui.data("kendoColorPicker").close();
        },

        command: function (commandArguments) {
            var options = this.options,
                format = this.format,
                style = {
                };

            return new Editor.FormatCommand(extend(commandArguments, {
                formatter: function () {
                    style[options.domAttr] = commandArguments.value;

                    return new GreedyInlineFormatter(format, {
                        style: style
                    }, options.cssAttr);
                }
            }));
        },

        willDelayExecution: inlineFormatWillDelayExecution,

        initialize: function (ui, initOptions) {
            var editor = initOptions.editor,
            toolName = this.name;

            new Editor.ColorPicker(ui, {
                value: "#000000",
                change: function (e) {
                    Tool.exec(editor, toolName, e.value);
                }
            });
        }
    });

    var StyleTool = Tool.extend({
        init: function (options) {
            var that = this;
            Tool.fn.init.call(that, options);

            that.format = [{
                tags: ["span"]
            }];
            that.finder = new GreedyInlineFormatFinder(that.format, "className");
        },

        command: function (commandArguments) {
            var format = this.format;
            return new Editor.FormatCommand(extend(commandArguments, {
                formatter: function () {
                    return new GreedyInlineFormatter(format, {
                        className: commandArguments.value
                    });
                }
            }));
        },

        update: function (ui, nodes) {
            var list = ui.data("kendoSelectBox");
            list.close();
            list.value(this.finder.getFormat(nodes));
        },

        initialize: function (ui, initOptions) {
            var editor = initOptions.editor;

            new Editor.SelectBox(ui, {
                dataTextField: "text",
                dataValueField: "value",
                dataSource: editor.options.style,
                title: editor.options.messages.style,
                change: function (e) {
                    Tool.exec(editor, "style", this.value());
                },
                highlightFirst: false
            });

            ui.closest(".k-widget").removeClass("k-" + this.name).find("*").andSelf().attr("unselectable", "on");
        }

    });

    extend(Editor, {
        InlineFormatFinder: InlineFormatFinder,
        InlineFormatter: InlineFormatter,
        GreedyInlineFormatFinder: GreedyInlineFormatFinder,
        GreedyInlineFormatter: GreedyInlineFormatter,
        InlineFormatTool: InlineFormatTool,
        FontTool: FontTool,
        ColorTool: ColorTool,
        StyleTool: StyleTool
    });

    registerTool("style", new Editor.StyleTool({
        template: new ToolTemplate({
            template: EditorUtils.dropDownListTemplate, title: "Styles"
        })
    }));

    registerFormat("bold", [{
        tags: ["strong"]
    }, {
        tags: ["span"], attr: {
            style: {
                fontWeight: "bold"
            }
        }
    }]);
    registerTool("bold", new InlineFormatTool({
        key: "B", ctrl: true, format: formats.bold, template: new ToolTemplate({
            template: EditorUtils.buttonTemplate, title: "Bold"
        })
    }));

    registerFormat("italic", [{
        tags: ["em"]
    }, {
        tags: ["span"], attr: {
            style: {
                fontStyle: "italic"
            }
        }
    }]);
    registerTool("italic", new InlineFormatTool({
        key: "I", ctrl: true, format: formats.italic, template: new ToolTemplate({
            template: EditorUtils.buttonTemplate, title: "Italic"
        })
    }));

    registerFormat("underline", [{
        tags: ["span"], attr: {
            style: {
                textDecoration: "underline"
            }
        }
    }]);
    registerTool("underline", new InlineFormatTool({
        key: "U", ctrl: true, format: formats.underline, template: new ToolTemplate({
            template: EditorUtils.buttonTemplate, title: "Underline"
        })
    }));

    registerFormat("strikethrough", [{
        tags: ["del"]
    }, {
        tags: ["span"], attr: {
            style: {
                textDecoration: "line-through"
            }
        }
    }]);
    registerTool("strikethrough", new InlineFormatTool({
        format: formats.strikethrough, template: new ToolTemplate({
            template: EditorUtils.buttonTemplate, title: "Strikethrough"
        })
    }));

    registerFormat("superscript", [{
        tags: ["sup"]
    }]);
    registerTool("superscript", new InlineFormatTool({
        format: formats.superscript, template: new ToolTemplate({
            template: EditorUtils.buttonTemplate, title: "Superscript"
        })
    }));

    registerFormat("subscript", [{
        tags: ["sub"]
    }]);
    registerTool("subscript", new InlineFormatTool({
        format: formats.subscript, template: new ToolTemplate({
            template: EditorUtils.buttonTemplate, title: "Subscript"
        })
    }));

    registerTool("foreColor", new ColorTool({
        cssAttr: "color", domAttr: "color", name: "foreColor", template: new ToolTemplate({
            template: EditorUtils.colorPickerTemplate, title: "Color"
        })
    }));

    registerTool("backColor", new ColorTool({
        cssAttr: "background-color", domAttr: "backgroundColor", name: "backColor", template: new ToolTemplate({
            template: EditorUtils.colorPickerTemplate, title: "Background Color"
        })
    }));

    registerTool("fontName", new FontTool({
        cssAttr: "font-family", domAttr: "fontFamily", name: "fontName", defaultValue: [{
            text: "fontNameInherit", value: "inherit"
        }], template: new ToolTemplate({
            template: EditorUtils.comboBoxTemplate, title: "Font Name"
        })
    }));

    registerTool("fontSize", new FontTool({
        cssAttr: "font-size", domAttr: "fontSize", name: "fontSize", defaultValue: [{
            text: "fontSizeInherit", value: "inherit"
        }], template: new ToolTemplate({
            template: EditorUtils.comboBoxTemplate, title: "Font Size"
        })
    }));

})(jQuery);
(function ($) {

    var kendo = window.kendo,
        Class = kendo.Class,
        extend = $.extend,
        Editor = kendo.ui.editor,
        formats = kendo.ui.Editor.fn.options.formats,
        dom = Editor.Dom,
        Command = Editor.Command,
        Tool = Editor.Tool,
        ToolTemplate = Editor.ToolTemplate,
        FormatTool = Editor.FormatTool,
        EditorUtils = Editor.EditorUtils,
        registerTool = EditorUtils.registerTool,
        registerFormat = EditorUtils.registerFormat,
        RangeUtils = Editor.RangeUtils;

    var BlockFormatFinder = Class.extend({
        init: function (format) {
            this.format = format;
        },

        contains: function (node, children) {
            var i, len, child;

            for (i = 0, len = children.length; i < len; i++) {
                child = children[i];
                if (!child || !dom.isAncestorOrSelf(node, child)) {
                    return false;
                }
            }

            return true;
        },

        findSuitable: function (nodes) {
            var format = this.format,
                suitable = [],
                i, len, candidate;

            for (i = 0, len = nodes.length; i < len; i++) {
                candidate = dom.ofType(nodes[i], format[0].tags) ? nodes[i] : dom.parentOfType(nodes[i], format[0].tags);
                if (!candidate) {
                    return [];
                }

                if ($.inArray(candidate, suitable) < 0) {
                    suitable.push(candidate);
                }
            }

            for (i = 0, len = suitable.length; i < len; i++) {
                if (this.contains(suitable[i], suitable)) {
                    return [suitable[i]];
                }
            }

            return suitable;
        },

        findFormat: function (sourceNode) {
            var format = this.format,
                i, len, node, tags, attributes;

            for (i = 0, len = format.length; i < len; i++) {
                node = sourceNode;
                tags = format[i].tags;
                attributes = format[i].attr;

                while (node) {
                    if (dom.ofType(node, tags) && dom.attrEquals(node, attributes)) {
                        return node;
                    }

                    node = node.parentNode;
                }
            }
            return null;
        },

        getFormat: function (nodes) {
            var that = this,
                    findFormat = function (node) {
                        return that.findFormat(dom.isDataNode(node) ? node.parentNode : node);
                    },
                result = findFormat(nodes[0]),
                i, len;

            if (!result) {
                return "";
            }

            for (i = 1, len = nodes.length; i < len; i++) {
                if (result != findFormat(nodes[i])) {
                    return "";
                }
            }

            return result.nodeName.toLowerCase();
        },

        isFormatted: function (nodes) {
            for (var i = 0, len = nodes.length; i < len; i++) {
                if (!this.findFormat(nodes[i])) {
                    return false;
                }
            }

            return true;
        }
    });

    var BlockFormatter = Class.extend({
        init: function (format, values) {
            this.format = format;
            this.values = values;
            this.finder = new BlockFormatFinder(format);
        },

        wrap: function (tag, attributes, nodes) {
            var commonAncestor = nodes.length == 1 ? dom.blockParentOrBody(nodes[0]) : dom.commonAncestor.apply(null, nodes);

            if (dom.isInline(commonAncestor)) {
                commonAncestor = dom.blockParentOrBody(commonAncestor);
            }

            var ancestors = dom.significantChildNodes(commonAncestor),
                position = dom.findNodeIndex(ancestors[0]),
                wrapper = dom.create(commonAncestor.ownerDocument, tag, attributes),
                i, ancestor;

            for (i = 0; i < ancestors.length; i++) {
                ancestor = ancestors[i];
                if (dom.isBlock(ancestor)) {
                    dom.attr(ancestor, attributes);

                    if (wrapper.childNodes.length) {
                        dom.insertBefore(wrapper, ancestor);
                        wrapper = wrapper.cloneNode(false);
                    }

                    position = dom.findNodeIndex(ancestor) + 1;

                    continue;
                }

                wrapper.appendChild(ancestor);
            }

            if (wrapper.firstChild) {
                dom.insertAt(commonAncestor, wrapper, position);
            }
        },

        apply: function (nodes) {
            var that = this,
                formatNodes = dom.is(nodes[0], "img") ? [nodes[0]] : that.finder.findSuitable(nodes),
                formatToApply = formatNodes.length ? EditorUtils.formatByName(dom.name(formatNodes[0]), that.format) : that.format[0],
                tag = formatToApply.tags[0],
        attributes = extend({}, formatToApply.attr, that.values),
        i, len;

            if (formatNodes.length) {
                for (i = 0, len = formatNodes.length; i < len; i++) {
                    dom.attr(formatNodes[i], attributes);
                }
            } else {
                that.wrap(tag, attributes, nodes);
            }
        },

        remove: function (nodes) {
            var i, l, formatNode, namedFormat;

            for (i = 0, l = nodes.length; i < l; i++) {
                formatNode = this.finder.findFormat(nodes[i]);
                if (formatNode) {
                    if (dom.ofType(formatNode, ["p", "img", "li"])) {
                        namedFormat = EditorUtils.formatByName(dom.name(formatNode), this.format);
                        if (namedFormat.attr.style) {
                            dom.unstyle(formatNode, namedFormat.attr.style);
                        }
                        if (namedFormat.attr.className) {
                            dom.removeClass(formatNode, namedFormat.attr.className);
                        }
                    } else {
                        dom.unwrap(formatNode);
                    }
                }
            }
        },

        toggle: function (range) {
            var that = this,
                nodes = RangeUtils.nodes(range);

            if (that.finder.isFormatted(nodes)) {
                that.remove(nodes);
            } else {
                that.apply(nodes);
            }
        }
    });

    var GreedyBlockFormatter = Class.extend({
        init: function (format, values) {
            var that = this;
            that.format = format;
            that.values = values;
            that.finder = new BlockFormatFinder(format);
        },

        apply: function (nodes) {
            var format = this.format,
        blocks = dom.blockParents(nodes),
        formatTag = format[0].tags[0],
        i, len, list, formatter, range;

            if (blocks.length) {
                for (i = 0, len = blocks.length; i < len; i++) {
                    if (dom.is(blocks[i], "li")) {
                        list = blocks[i].parentNode;
                        formatter = new Editor.ListFormatter(list.nodeName.toLowerCase(), formatTag);
                        range = this.editor.createRange();
                        range.selectNode(blocks[i]);
                        formatter.toggle(range);
                    } else {
                        dom.changeTag(blocks[i], formatTag);
                    }
                }
            } else {
                new BlockFormatter(format, this.values).apply(nodes);
            }
        },

        toggle: function (range) {
            var nodes = RangeUtils.textNodes(range);
            if (!nodes.length) {
                range.selectNodeContents(range.commonAncestorContainer);
                nodes = RangeUtils.textNodes(range);
                if (!nodes.length) {
                    nodes = dom.significantChildNodes(range.commonAncestorContainer);
                }
            }

            this.apply(nodes);
        }
    });

    var FormatCommand = Command.extend({
        init: function (options) {
            options.formatter = options.formatter();
            Command.fn.init.call(this, options);
        }
    });

    var BlockFormatTool = FormatTool.extend({
        init: function (options) {
            FormatTool.fn.init.call(this, extend(options, {
                finder: new BlockFormatFinder(options.format),
                formatter: function () {
                    return new BlockFormatter(options.format);
                }
            }));
        }
    });

    var FormatBlockTool = Tool.extend({
        init: function (options) {
            Tool.fn.init.call(this, options);
            this.finder = new BlockFormatFinder([{
                tags: dom.blockElements
            }]);
        },

        command: function (commandArguments) {
            return new FormatCommand(extend(commandArguments, {
                formatter: function () {
                    return new GreedyBlockFormatter([{
                        tags: [commandArguments.value]
                    }], {});
                }
            }));
        },

        update: function (ui, nodes) {
            var list;
            if (ui.is("select")) {
                list = ui.data("kendoSelectBox");
            } else {
                list = ui.find("select").data("kendoSelectBox");
            }
            list.close();
            list.value(this.finder.getFormat(nodes));
        },

        initialize: function (ui, initOptions) {
            var editor = initOptions.editor,
                toolName = "formatBlock";

            new Editor.SelectBox(ui, {
                dataTextField: "text",
                dataValueField: "value",
                dataSource: this.options.items ? this.options.items : editor.options.formatBlock,
                title: editor.options.messages.formatBlock,
                change: function (e) {
                    Tool.exec(editor, toolName, this.value());
                },
                highlightFirst: false
            });

            ui.closest(".k-widget").removeClass("k-" + toolName).find("*").andSelf().attr("unselectable", "on");
        }
    });

    extend(Editor, {
        BlockFormatFinder: BlockFormatFinder,
        BlockFormatter: BlockFormatter,
        GreedyBlockFormatter: GreedyBlockFormatter,
        FormatCommand: FormatCommand,
        BlockFormatTool: BlockFormatTool,
        FormatBlockTool: FormatBlockTool
    });

    registerTool("formatBlock", new FormatBlockTool({ template: new ToolTemplate({ template: EditorUtils.dropDownListTemplate }) }));

    registerFormat("justifyLeft", [{
        tags: dom.blockElements, attr: {
            style: {
                textAlign: "left"
            }
        }
    }, {
        tags: ["img"], attr: {
            style: {
                "float": "left"
            }
        }
    }]);
    registerTool("justifyLeft", new BlockFormatTool({
        format: formats.justifyLeft, template: new ToolTemplate({
            template: EditorUtils.buttonTemplate, title: "Justify Left"
        })
    }));

    registerFormat("justifyCenter", [{
        tags: dom.blockElements, attr: {
            style: {
                textAlign: "center"
            }
        }
    }, {
        tags: ["img"], attr: {
            style: {
                display: "block", marginLeft: "auto", marginRight: "auto"
            }
        }
    }]);
    registerTool("justifyCenter", new BlockFormatTool({
        format: formats.justifyCenter, template: new ToolTemplate({
            template: EditorUtils.buttonTemplate, title: "Justify Center"
        })
    }));

    registerFormat("justifyRight", [{
        tags: dom.blockElements, attr: {
            style: {
                textAlign: "right"
            }
        }
    }, {
        tags: ["img"], attr: {
            style: {
                "float": "right"
            }
        }
    }]);
    registerTool("justifyRight", new BlockFormatTool({
        format: formats.justifyRight, template: new ToolTemplate({
            template: EditorUtils.buttonTemplate, title: "Justify Right"
        })
    }));

    registerFormat("justifyFull", [{
        tags: dom.blockElements, attr: {
            style: {
                textAlign: "justify"
            }
        }
    }]);
    registerTool("justifyFull", new BlockFormatTool({
        format: formats.justifyFull, template: new ToolTemplate({
            template: EditorUtils.buttonTemplate, title: "Justify Full"
        })
    }));

})(jQuery);
(function ($) {

    // Imports ================================================================
    var kendo = window.kendo,
extend = $.extend,
Editor = kendo.ui.editor,
dom = Editor.Dom,
Command = Editor.Command,
Tool = Editor.Tool,
BlockFormatter = Editor.BlockFormatter,
normalize = dom.normalize,
RangeUtils = Editor.RangeUtils,
registerTool = Editor.EditorUtils.registerTool;

    var ParagraphCommand = Command.extend({
        init: function (options) {
            this.options = options;
            Command.fn.init.call(this, options);
        },

        exec: function () {
            var range = this.getRange(),
                doc = RangeUtils.documentFromRange(range),
                parent, previous, next,
                container,
                emptyParagraphContent = $.browser.msie ? '' : '<br _moz_dirty="" />',
                paragraph, marker, li, heading, rng,
                // necessary while the emptyParagraphContent is empty under IE
                blocks = 'p,h1,h2,h3,h4,h5,h6'.split(','),
                startInBlock = dom.parentOfType(range.startContainer, blocks),
                endInBlock = dom.parentOfType(range.endContainer, blocks),
            shouldTrim = (startInBlock && !endInBlock) || (!startInBlock && endInBlock);

            function clean(node) {
                if (node.firstChild && dom.is(node.firstChild, 'br')) {
                    dom.remove(node.firstChild);
                }

                if (dom.isDataNode(node) && !node.nodeValue) {
                    node = node.parentNode;
                }

                if (node && !dom.is(node, 'img')) {
                    while (node.firstChild && node.firstChild.nodeType == 1) {
                        node = node.firstChild;
                    }

                    if (!node.innerHTML) {
                        node.innerHTML = emptyParagraphContent;
                    }
                }
            }

            range.deleteContents();

            marker = dom.create(doc, 'a');
            range.insertNode(marker);

            if (!marker.parentNode) {
                // inserting paragraph in Firefox full body range
                container = range.commonAncestorContainer;
                container.innerHTML = "";
                container.appendChild(marker);
            }

            normalize(marker.parentNode);

            li = dom.parentOfType(marker, ['li']);
            heading = dom.parentOfType(marker, 'h1,h2,h3,h4,h5,h6'.split(','));

            if (li) {
                rng = range.cloneRange();
                rng.selectNode(li);

                // hitting 'enter' in empty li
                if (!RangeUtils.textNodes(rng).length) {
                    paragraph = dom.create(doc, 'p');

                    if (li.nextSibling) {
                        RangeUtils.split(rng, li.parentNode);
                    }

                    dom.insertAfter(paragraph, li.parentNode);
                    dom.remove(li.parentNode.childNodes.length == 1 ? li.parentNode : li);
                    paragraph.innerHTML = emptyParagraphContent;
                    next = paragraph;
                }
            } else if (heading && !marker.nextSibling) {
                paragraph = dom.create(doc, 'p');

                dom.insertAfter(paragraph, heading);
                paragraph.innerHTML = emptyParagraphContent;
                dom.remove(marker);
                next = paragraph;
            }

            if (!next) {
                if (!(li || heading)) {
                    new BlockFormatter([{ tags: ['p'] }]).apply([marker]);
                }

                range.selectNode(marker);

                parent = dom.parentOfType(marker, [li ? 'li' : heading ? dom.name(heading) : 'p']);

                RangeUtils.split(range, parent, shouldTrim);

                previous = parent.previousSibling;

                if (dom.is(previous, 'li') && previous.firstChild && !dom.is(previous.firstChild, 'br')) {
                    previous = previous.firstChild;
                }

                next = parent.nextSibling;

                if (dom.is(next, 'li') && next.firstChild && !dom.is(next.firstChild, 'br')) {
                    next = next.firstChild;
                }

                dom.remove(parent);

                clean(previous);
                clean(next);

                // normalize updates the caret display in Gecko
                normalize(previous);
            }

            normalize(next);

            if (dom.is(next, 'img')) {
                range.setStartBefore(next);
            } else {
                range.selectNodeContents(next);

                var textNode = RangeUtils.textNodes(range)[0];

                if (textNode) {
                    range.selectNodeContents(textNode);
                }
            }

            range.collapse(true);

            dom.scrollTo(next);

            RangeUtils.selectRange(range);
        }

    });

    var NewLineCommand = Command.extend({
        init: function (options) {
            this.options = options;
            Command.fn.init.call(this, options);
        },

        exec: function () {
            var range = this.getRange();
            range.deleteContents();
            var br = dom.create(RangeUtils.documentFromRange(range), 'br');
            range.insertNode(br);
            normalize(br.parentNode);

            if (!$.browser.msie && (!br.nextSibling || dom.isWhitespace(br.nextSibling))) {
                //Gecko and WebKit cannot put the caret after only one br.
                var filler = br.cloneNode(true);
                filler.setAttribute('_moz_dirty', '');
                dom.insertAfter(filler, br);
            }
            range.setStartAfter(br);
            range.collapse(true);
            RangeUtils.selectRange(range);
        }
    });

    extend(Editor, {
        ParagraphCommand: ParagraphCommand,
        NewLineCommand: NewLineCommand
    });

    registerTool("insertLineBreak", new Tool({
        key: 13, shift: true, command: NewLineCommand
    }));
    registerTool("insertParagraph", new Tool({
        key: 13, command: ParagraphCommand
    }));

})(jQuery);
(function ($) {

    // Imports ================================================================
    var kendo = window.kendo,
Class = kendo.Class,
        extend = $.extend,
        Editor = kendo.ui.editor,
dom = Editor.Dom,
RangeUtils = Editor.RangeUtils,
EditorUtils = Editor.EditorUtils,
Command = Editor.Command,
        ToolTemplate = Editor.ToolTemplate,
        FormatTool = Editor.FormatTool,
        BlockFormatFinder = Editor.BlockFormatFinder,
        textNodes = RangeUtils.textNodes,
        registerTool = Editor.EditorUtils.registerTool;

    var ListFormatFinder = BlockFormatFinder.extend({
        init: function (tag) {
            this.tag = tag;
            var tags = this.tags = [tag == 'ul' ? 'ol' : 'ul', tag];

            BlockFormatFinder.fn.init.call(this, [{
                tags: tags
            }]);
        },

        isFormatted: function (nodes) {
            var formatNodes = [], formatNode;

            for (var i = 0; i < nodes.length; i++) {
                if ((formatNode = this.findFormat(nodes[i])) && dom.name(formatNode) == this.tag) {
                    formatNodes.push(formatNode);
                }
            }

            if (formatNodes.length < 1) {
                return false;
            }

            if (formatNodes.length != nodes.length) {
                return false;
            }

            // check if sequential lists are selected
            for (i = 0; i < formatNodes.length; i++) {
                if (formatNodes[i].parentNode != formatNode.parentNode) {
                    break;
                }

                if (formatNodes[i] != formatNode) {
                    return false;
                }
            }

            return true;
        },

        findSuitable: function (nodes) {
            var candidate = dom.parentOfType(nodes[0], this.tags);

            if (candidate && dom.name(candidate) == this.tag) {
                return candidate;
            }

            return null;
        }

    });

    var ListFormatter = Class.extend({
        init: function (tag, unwrapTag) {
            var that = this;
            that.finder = new ListFormatFinder(tag);
            that.tag = tag;
            that.unwrapTag = unwrapTag;
        },

        wrap: function (list, nodes) {
            var li = dom.create(list.ownerDocument, "li"),
            i, node;

            for (i = 0; i < nodes.length; i++) {
                node = nodes[i];

                if (dom.is(node, 'li')) {
                    list.appendChild(node);
                    continue;
                }

                if (dom.is(node, 'ul') || dom.is(node, 'ol')) {
                    while (node.firstChild) {
                        list.appendChild(node.firstChild);
                    }
                    continue;
                }

                if (dom.is(node, "td")) {
                    while (node.firstChild) {
                        li.appendChild(node.firstChild);
                    }
                    list.appendChild(li);
                    node.appendChild(list);
                    list = list.cloneNode(false);
                    li = li.cloneNode(false);
                    continue;
                }

                li.appendChild(node);

                if (dom.isBlock(node)) {
                    list.appendChild(li);
                    dom.unwrap(node);
                    li = li.cloneNode(false);
                }
            }

            if (li.firstChild) {
                list.appendChild(li);
            }
        },

        containsAny: function (parent, nodes) {
            for (var i = 0; i < nodes.length; i++) {
                if (dom.isAncestorOrSelf(parent, nodes[i])) {
                    return true;
                }
            }

            return false;
        },

        suitable: function (candidate, nodes) {
            if (candidate.className == "k-marker") {
                var sibling = candidate.nextSibling;

                if (sibling && dom.isBlock(sibling)) {
                    return false;
                }

                sibling = candidate.previousSibling;

                if (sibling && dom.isBlock(sibling)) {
                    return false;
                }
            }

            return this.containsAny(candidate, nodes) || dom.isInline(candidate) || candidate.nodeType == 3;
        },

        split: function (range) {
            var nodes = textNodes(range),
        start, end;

            if (nodes.length) {
                start = dom.parentOfType(nodes[0], ['li']);
                end = dom.parentOfType(nodes[nodes.length - 1], ['li']);
                range.setStartBefore(start);
                range.setEndAfter(end);

                for (var i = 0, l = nodes.length; i < l; i++) {
                    var formatNode = this.finder.findFormat(nodes[i]);
                    if (formatNode) {
                        var parents = $(formatNode).parents("ul,ol");
                        if (parents[0]) {
                            RangeUtils.split(range, parents.last()[0], true);
                        } else {
                            RangeUtils.split(range, formatNode, true);
                        }
                    }
                }
            }
        },

        merge: function (tag, formatNode) {
            var prev = formatNode.previousSibling, next;

            while (prev && (prev.className == "k-marker" || (prev.nodeType == 3 && dom.isWhitespace(prev)))) {
                prev = prev.previousSibling;
            }

            // merge with previous list
            if (prev && dom.name(prev) == tag) {
                while (formatNode.firstChild) {
                    prev.appendChild(formatNode.firstChild);
                }
                dom.remove(formatNode);
                formatNode = prev;
            }

            next = formatNode.nextSibling;
            while (next && (next.className == "k-marker" || (next.nodeType == 3 && dom.isWhitespace(next)))) {
                next = next.nextSibling;
            }

            // merge with next list
            if (next && dom.name(next) == tag) {
                while (formatNode.lastChild) {
                    next.insertBefore(formatNode.lastChild, next.firstChild);
                }
                dom.remove(formatNode);
            }
        },

        applyOnSection: function (section, nodes) {
            var tag = this.tag,
                commonAncestor;

            if (nodes.length == 1) {
                commonAncestor = dom.parentOfType(nodes[0], ["ul", "ol"]);
            } else {
                commonAncestor = dom.commonAncestor.apply(null, nodes);
            }

            if (!commonAncestor) {
                commonAncestor = dom.parentOfType(nodes[0], ["td"]) || nodes[0].ownerDocument.body;
            }

            if (dom.isInline(commonAncestor)) {
                commonAncestor = dom.blockParentOrBody(commonAncestor);
            }

            var ancestors = [];

            var formatNode = this.finder.findSuitable(nodes);

            if (!formatNode) {
                formatNode = new ListFormatFinder(tag == "ul" ? "ol" : "ul").findSuitable(nodes);
            }

            var childNodes = dom.significantChildNodes(commonAncestor);

            if (!childNodes.length) {
                childNodes = nodes;
            }

            if (/table|tbody/.test(dom.name(commonAncestor))) {
                childNodes = $.map(nodes, function (node) {
                    return dom.parentOfType(node, ["td"]);
                });
            }

            function pushAncestor() {
                ancestors.push(this);
            }

            for (var i = 0; i < childNodes.length; i++) {
                var child = childNodes[i];
                var nodeName = dom.name(child);
                if (this.suitable(child, nodes) && (!formatNode || !dom.isAncestorOrSelf(formatNode, child))) {

                    if (formatNode && (nodeName == "ul" || nodeName == "ol")) {
                        // merging lists
                        //Array.prototype.push.apply(ancestors, $.toArray(child.childNodes));
                        $.each(child.childNodes, pushAncestor);
                        dom.remove(child);
                    } else {
                        ancestors.push(child);
                    }
                }
            }

            if (ancestors.length == childNodes.length && commonAncestor != nodes[0].ownerDocument.body && !/table|tbody|tr|td/.test(dom.name(commonAncestor))) {
                ancestors = [commonAncestor];
            }

            if (!formatNode) {
                formatNode = dom.create(commonAncestor.ownerDocument, tag);
                dom.insertBefore(formatNode, ancestors[0]);
            }

            this.wrap(formatNode, ancestors);

            if (!dom.is(formatNode, tag)) {
                dom.changeTag(formatNode, tag);
            }

            this.merge(tag, formatNode);
        },

        apply: function (nodes) {
            var i = 0,
            sections = [],
            lastSection,
            lastNodes,
            section;

            // split nodes into sections that need to be different lists
            do {
                section = dom.parentOfType(nodes[i], ["td", "body"]);

                if (!lastSection || section != lastSection) {
                    if (lastSection) {
                        sections.push({
                            section: lastSection,
                            nodes: lastNodes
                        });
                    }

                    lastNodes = [nodes[i]];
                    lastSection = section;
                } else {
                    lastNodes.push(nodes[i]);
                }

                i++;
            } while (i < nodes.length);

            sections.push({
                section: lastSection,
                nodes: lastNodes
            });

            for (i = 0; i < sections.length; i++) {
                this.applyOnSection(sections[i].section, sections[i].nodes);
            }
        },

        unwrap: function (ul) {
            var fragment = ul.ownerDocument.createDocumentFragment(),
                unwrapTag = this.unwrapTag,
                parents,
                li,
                p,
                child;

            for (li = ul.firstChild; li; li = li.nextSibling) {
                p = dom.create(ul.ownerDocument, unwrapTag || 'p');

                while (li.firstChild) {
                    child = li.firstChild;

                    if (dom.isBlock(child)) {

                        if (p.firstChild) {
                            fragment.appendChild(p);
                            p = dom.create(ul.ownerDocument, unwrapTag || 'p');
                        }

                        fragment.appendChild(child);
                    } else {
                        p.appendChild(child);
                    }
                }

                if (p.firstChild) {
                    fragment.appendChild(p);
                }
            }

            parents = $(ul).parents('ul,ol');

            if (parents[0]) {
                dom.insertAfter(fragment, parents.last()[0]);
                parents.last().remove();
            } else {
                dom.insertAfter(fragment, ul);
            }

            dom.remove(ul);
        },

        remove: function (nodes) {
            var formatNode;
            for (var i = 0, l = nodes.length; i < l; i++) {
                formatNode = this.finder.findFormat(nodes[i]);

                if (formatNode) {
                    this.unwrap(formatNode);
                }
            }
        },

        toggle: function (range) {
            var that = this,
                nodes = textNodes(range),
                ancestor = range.commonAncestorContainer;

            if (!nodes.length) {
                range.selectNodeContents(ancestor);
                nodes = textNodes(range);
                if (!nodes.length) {
                    var text = ancestor.ownerDocument.createTextNode("");
                    range.startContainer.appendChild(text);
                    nodes = [text];
                    range.selectNode(text.parentNode);
                }
            }

            if (that.finder.isFormatted(nodes)) {
                that.split(range);
                that.remove(nodes);
            } else {
                that.apply(nodes);
            }
        }

    });

    var ListCommand = Command.extend({
        init: function (options) {
            options.formatter = new ListFormatter(options.tag);
            Command.fn.init.call(this, options);
        }
    });

    var ListTool = FormatTool.extend({
        init: function (options) {
            this.options = options;
            FormatTool.fn.init.call(this, extend(options, {
                finder: new ListFormatFinder(options.tag)
            }));
        },

        command: function (commandArguments) {
            return new ListCommand(extend(commandArguments, {
                tag: this.options.tag
            }));
        }
    });

    extend(Editor, {
        ListFormatFinder: ListFormatFinder,
        ListFormatter: ListFormatter,
        ListCommand: ListCommand,
        ListTool: ListTool
    });

    registerTool("insertUnorderedList", new ListTool({
        tag: 'ul', template: new ToolTemplate({
            template: EditorUtils.buttonTemplate, title: "Remove Link"
        })
    }));
    registerTool("insertOrderedList", new ListTool({
        tag: 'ol', template: new ToolTemplate({
            template: EditorUtils.buttonTemplate, title: "Remove Link"
        })
    }));

})(jQuery);
(function ($, undefined) {

    var kendo = window.kendo,
        Class = kendo.Class,
        extend = $.extend,
        Editor = kendo.ui.editor,
        dom = Editor.Dom,
        RangeUtils = Editor.RangeUtils,
        EditorUtils = Editor.EditorUtils,
        Command = Editor.Command,
        Tool = Editor.Tool,
        ToolTemplate = Editor.ToolTemplate,
        InlineFormatter = Editor.InlineFormatter,
        InlineFormatFinder = Editor.InlineFormatFinder,
        textNodes = RangeUtils.textNodes,
        registerTool = Editor.EditorUtils.registerTool;

    var LinkFormatFinder = Class.extend({
        findSuitable: function (sourceNode) {
            return dom.parentOfType(sourceNode, ['a']);
        }
    });

    var LinkFormatter = Class.extend({
        init: function () {
            this.finder = new LinkFormatFinder();
        },

        apply: function (range, attributes) {
            var nodes = textNodes(range);
            if (attributes.innerHTML) {
                var markers = RangeUtils.getMarkers(range);
                var document = RangeUtils.documentFromRange(range);
                range.deleteContents();
                var a = dom.create(document, 'a', attributes);
                range.insertNode(a);

                if (markers.length > 1) {
                    dom.insertAfter(markers[markers.length - 1], a);
                    dom.insertAfter(markers[1], a);
                    dom[nodes.length > 0 ? 'insertBefore' : 'insertAfter'](markers[0], a);
                }
            } else {
                var formatter = new InlineFormatter([{
                    tags: ['a']
                }], attributes);
                formatter.finder = this.finder;
                formatter.apply(nodes);
            }
        }
    });

    var UnlinkCommand = Command.extend({
        init: function (options) {
            options.formatter = /** @ignore */ {
                toggle: function (range) {
                    new InlineFormatter([{
                        tags: ['a']
                    }]).remove(textNodes(range));
                }
            };
            this.options = options;
            Command.fn.init.call(this, options);
        }
    });

    var LinkCommand = Command.extend({
        init: function (options) {
            var cmd = this;
            cmd.options = options;
            Command.fn.init.call(cmd, options);
            cmd.attributes = null;
            cmd.async = true;
            cmd.formatter = new LinkFormatter();
        },

        exec: function () {
            var range = this.getRange();

            var collapsed = range.collapsed;

            range = this.lockRange(true);

            var nodes = textNodes(range);

            var initialText = null;

            var that = this;

            function apply(e) {
                var href = $('#k-editor-link-url', dialog.element).val();

                if (href && href != 'http://') {
                    that.attributes = {
                        href: href
                    };

                    var title = $('#k-editor-link-title', dialog.element).val();
                    if (title) {
                        that.attributes.title = title;
                    }

                    var text = $('#k-editor-link-text', dialog.element).val();
                    if (text !== initialText) {
                        that.attributes.innerHTML = text || href;
                    }

                    var target = $('#k-editor-link-target', dialog.element).is(':checked');
                    if (target) {
                        that.attributes.target = '_blank';
                    }

                    that.formatter.apply(range, that.attributes);
                }

                close(e);

                if (that.change) {
                    that.change();
                }
            }

            function close(e) {
                e.preventDefault();
                dialog.destroy();

                dom.windowFromDocument(RangeUtils.documentFromRange(range)).focus();

                that.releaseRange(range);
            }

            var a = nodes.length ? that.formatter.finder.findSuitable(nodes[0]) : null;

            var shouldShowText = nodes.length <= 1 || (nodes.length == 2 && collapsed);

            var windowContent =
                '<div class="k-editor-dialog">' +
                    '<ol>' +
                        '<li class="k-form-text-row"><label for="k-editor-link-url">Web address</label><input type="text" class="k-input" id="k-editor-link-url"/></li>' +
                        (shouldShowText ? '<li class="k-form-text-row"><label for="k-editor-link-text">Text</label><input type="text" class="k-input" id="k-editor-link-text"/></li>' : '') +
                        '<li class="k-form-text-row"><label for="k-editor-link-title">Tooltip</label><input type="text" class="k-input" id="k-editor-link-title"/></li>' +
                        '<li class="k-form-checkbox-row"><input type="checkbox" id="k-editor-link-target"/><label for="k-editor-link-target">Open link in new window</label></li>' +
                    '</ol>' +
                    '<div class="k-button-wrapper">' +
                        '<button class="k-dialog-insert k-button">Insert</button>' +
                        '&nbsp;or&nbsp;' +
                        '<a href="#" class="k-dialog-close k-link">Close</a>' +
                    '</div>' +
                '</div>';

            var dialog = $(windowContent).appendTo(document.body).kendoWindow($.extend({
            }, this.editor.options.dialogOptions, {
                title: "Insert link",
                close: close
            }))
                .hide()
                .find('.k-dialog-insert').click(apply).end()
                .find('.k-dialog-close').click(close).end()
                .find('.k-form-text-row input').keydown(function (e) {
                    if (e.keyCode == 13) {
                        apply(e);
                    } else if (e.keyCode == 27) {
                        close(e);
                    }
                }).end()
                    // IE < 8 returns absolute url if getAttribute is not used
                    .find('#k-editor-link-url').val(a ? a.getAttribute('href', 2) : 'http://').end()
                    .find('#k-editor-link-text').val(nodes.length > 0 ? (nodes.length == 1 ? nodes[0].nodeValue : nodes[0].nodeValue + nodes[1].nodeValue) : '').end()
                .find('#k-editor-link-title').val(a ? a.title : '').end()
                .find('#k-editor-link-target').attr('checked', a ? a.target == '_blank' : false).end()
                .show()
                .data('kendoWindow')
                .center();

            if (shouldShowText && nodes.length > 0) {
                initialText = $('#k-editor-link-text', dialog.element).val();
            }

            $('#k-editor-link-url', dialog.element).focus().select();
        },

        redo: function () {
            var that = this,
        range = that.lockRange(true);

            that.formatter.apply(range, that.attributes);
            that.releaseRange(range);
        }

    });

    var UnlinkTool = Tool.extend({
        init: function (options) {
            this.options = options;
            this.finder = new InlineFormatFinder([{
                tags: ['a']
            }]);

            Tool.fn.init.call(this, $.extend(options, {
                command: UnlinkCommand
            }));
        },

        initialize: function ($ui) {
            $ui.attr('unselectable', 'on')
               .addClass('k-state-disabled');
        },

        update: function ($ui, nodes) {
            $ui.toggleClass('k-state-disabled', !this.finder.isFormatted(nodes))
                .removeClass('k-state-hover');
        }
    });

    extend(kendo.ui.editor, {
        LinkFormatFinder: LinkFormatFinder,
        LinkFormatter: LinkFormatter,
        UnlinkCommand: UnlinkCommand,
        LinkCommand: LinkCommand,
        UnlinkTool: UnlinkTool
    });

    registerTool("createLink", new Tool({
        key: 'K', ctrl: true, command: LinkCommand, template: new ToolTemplate({
            template: EditorUtils.buttonTemplate, title: "Create Link"
        })
    }));
    registerTool("unlink", new UnlinkTool({
        key: 'K', ctrl: true, shift: true, template: new ToolTemplate({
            template: EditorUtils.buttonTemplate, title: "Remove Link"
        })
    }));

})(jQuery);
(function ($, undefined) {

    var kendo = window.kendo,
        extend = $.extend,
Editor = kendo.ui.editor,
        EditorUtils = Editor.EditorUtils,
        dom = Editor.Dom,
    registerTool = EditorUtils.registerTool,
    ToolTemplate = Editor.ToolTemplate,
RangeUtils = Editor.RangeUtils,
Command = Editor.Command,
keys = kendo.keys,
INSERTIMAGE = "Insert Image",
KEDITORIMAGEURL = "#k-editor-image-url",
KEDITORIMAGETITLE = "#k-editor-image-title";

    var ImageCommand = Command.extend({
        init: function (options) {
            var that = this;
            Command.fn.init.call(that, options);

            that.async = true;
            that.attributes = {};
        },

        insertImage: function (img, range) {
            var attributes = this.attributes;
            if (attributes.src && attributes.src != "http://") {
                if (!img) {
                    img = dom.create(RangeUtils.documentFromRange(range), "img", attributes);
                    img.onload = img.onerror = function () {
                        img.removeAttribute("complete");
                        img.removeAttribute("width");
                        img.removeAttribute("height");
                    };

                    range.deleteContents();
                    range.insertNode(img);
                    range.setStartAfter(img);
                    range.setEndAfter(img);
                    RangeUtils.selectRange(range);
                    return true;
                } else {
                    dom.attr(img, attributes);
                }
            }

            return false;
        },

        redo: function () {
            var that = this,
                range = that.lockRange();

            if (!that.insertImage(RangeUtils.image(range), range)) {
                that.releaseRange(range);
            }
        },

        exec: function () {
            var that = this,
                range = that.lockRange(),
                applied = false,
        img = RangeUtils.image(range),
        windowContent, dialog;

            function apply(e) {
                that.attributes = {
                    src: $(KEDITORIMAGEURL, dialog.element).val(),
                    alt: $(KEDITORIMAGETITLE, dialog.element).val()
                };

                applied = that.insertImage(img, range);

                close(e);

                if (that.change) {
                    that.change();
                }
            }

            function close(e) {
                e.preventDefault();
                dialog.destroy();

                dom.windowFromDocument(RangeUtils.documentFromRange(range)).focus();
                if (!applied) {
                    that.releaseRange(range);
                }
            }

            function keyDown(e) {
                if (e.keyCode == keys.ENTER) {
                    apply(e);
                } else if (e.keyCode == keys.ESC) {
                    close(e);
                }
            }

            //var fileBrowser = that.editor.fileBrowser;
            //var showBrowser = fileBrowser && fileBrowser.selectUrl !== undefined;

            windowContent =
                '<div class="k-editor-dialog">' +
                    '<ol>' +
                        '<li class="k-form-text-row"><label for="k-editor-image-url">Web address</label><input type="text" class="k-input" id="k-editor-image-url"/></li>' +
                        '<li class="k-form-text-row"><label for="k-editor-image-title">Tooltip</label><input type="text" class="k-input" id="k-editor-image-title"/></li>' +
                    '</ol>' +
                    '<div class="k-button-wrapper">' +
                        '<button class="k-dialog-insert k-button">Insert</button>' +
                        '&nbsp;or&nbsp;' +
                        '<a href="#" class="k-dialog-close k-link">Close</a>' +
                    '</div>' +
                '</div>';

            dialog = $(windowContent)
                    .appendTo(document.body)
                    .kendoWindow(extend({}, that.editor.options.dialogOptions, {
                        title: INSERTIMAGE,
                        close: close,
                        activate: function () {
                            //if (showBrowser) {
                            //new $t.imageBrowser(
                            //$(this).find(".k-image-browser"),
                            //extend(fileBrowser, {
                            //apply: apply,
                            //element: that.editor.element,
                            //messages: that.editor.options.messages
                            //}));
                            //}
                        }
                    }))
                    .hide()
                    .find(".k-dialog-insert").click(apply).end()
                    .find(".k-dialog-close").click(close).end()
                    .find(".k-form-text-row input").keydown(keyDown).end()
                        //.toggleClass("k-imagebrowser", showBrowser)
                            // IE < 8 returns absolute url if getAttribute is not used
                    .find(KEDITORIMAGEURL).val(img ? img.getAttribute("src", 2) : "http://").end()
                    .find(KEDITORIMAGETITLE).val(img ? img.alt : "").end()
                    .show()
                    .data("kendoWindow")
                    .center();

            $(KEDITORIMAGEURL, dialog.element).focus().select();
        }

    });

    kendo.ui.editor.ImageCommand = ImageCommand;

    registerTool("insertImage", new Editor.Tool({
        command: ImageCommand, template: new ToolTemplate({
            template: EditorUtils.buttonTemplate, title: INSERTIMAGE
        })
    }));

})(jQuery);
(function ($, undefined) {

    var kendo = window.kendo,
        Widget = kendo.ui.Widget,
        DropDownList = kendo.ui.DropDownList,
        Editor = kendo.ui.editor,
        dom = Editor.Dom,
        CHANGE = "change",
KSTATESELECTED = "k-state-selected",
SELECTEDCLASS = "." + KSTATESELECTED,
SELECTEDCOLORCLASS = ".k-selected-color",
UNSELECTABLE = "unselectable",
            BACKGROUNDCOLOR = "background-color",
keys = kendo.keys,
template = kendo.template(
'<div class="k-colorpicker-popup">' +
'<ul class="k-reset">' +
'# for(var i = 0; i < colors.length; i++) { #' +
'<li class="k-item #= colors[i] == value ? "k-state-selected" : "" #">' +
    '<div style="background-color:\\##= colors[i] #"></div>' +
'</li>' +
'# } #' +
'</ul>' +
'</div>');

    var ColorPicker = Widget.extend({
        init: function (element, options) {
            var that = this;

            Widget.fn.init.call(that, element, options);

            element = that.element;
            options = that.options;

            that._value = options.value;

            that.popup = $(template({
                colors: options.colors,
                value: options.value.substring(1)
            }))
                     .kendoPopup({
                         anchor: element,
                         toggleTarget: element.find(".k-icon")
                     })
                     .delegate(".k-item", "click", function (e) {
                         that.select($(e.currentTarget).find("div").css(BACKGROUNDCOLOR));
                     })
                     .find("*")
                     .attr(UNSELECTABLE, "on")
                     .end()
                     .data("kendoPopup");

            element.attr("tabIndex", 0) // add the color picker to the tab order
                   .keydown(function (e) {
                       that.keydown(e);
                   })
                   .focus(function () {
                       element.css("outline", "1px dotted #000");
                   })
                   .blur(function () {
                       element.css("outline", "");
                   })
                   .delegate(".k-tool-icon", "click", function () {
                       that.select();
                   })
                                 .find("*")
                                 .attr(UNSELECTABLE, "on");

            if (that._value) {
                element.find(SELECTEDCOLORCLASS).css(BACKGROUNDCOLOR, that._value);
            }
        },

        options: {
            name: "ColorPicker",
            colors: "000000,7f7f7f,880015,ed1c24,ff7f27,fff200,22b14c,00a2e8,3f48cc,a349a4,ffffff,c3c3c3,b97a57,ffaec9,ffc90e,efe4b0,b5e61d,99d9ea,7092be,c8bfe7".split(","),
            value: null
        },

        events: [
CHANGE
        ],

        select: function (color) {
            var that = this;

            if (color) {
                color = dom.toHex(color);
                if (!that.trigger(CHANGE, {
                    value: color
                })) {
                    that.value(color);
                    that.close();
                }
            } else {
                that.trigger(CHANGE, {
                    value: that._value
                });
            }
        },

        open: function () {
            this.popup.open();
        },

        close: function () {
            this.popup.close();
        },

        toggle: function () {
            this.popup.toggle();
        },

        keydown: function (e) {
            var that = this,
                popup = that.popup.element,
                visible = that.popup.visible(),
                selected,
                next,
                prev,
                preventDefault = false,
                keyCode = e.keyCode;

            if (keyCode == keys.DOWN) {
                if (!visible) {
                    that.open();
                } else {
                    selected = popup.find(SELECTEDCLASS);

                    if (selected[0]) {
                        next = selected.next();
                    } else {
                        next = popup.find("li:first");
                    }

                    if (next[0]) {
                        selected.removeClass(KSTATESELECTED);
                        next.addClass(KSTATESELECTED);
                    }
                }

                preventDefault = true;
            } else if (keyCode == keys.UP) {
                if (visible) {
                    selected = popup.find(SELECTEDCLASS);
                    prev = selected.prev();

                    if (prev[0]) {
                        selected.removeClass(KSTATESELECTED);
                        prev.addClass(KSTATESELECTED);
                    }
                }
                preventDefault = true;
            } else if (keyCode == keys.TAB || keyCode == keys.RIGHT || keyCode == keys.LEFT) {
                that.close();
            } else if (keyCode == keys.ENTER) {
                popup.find(SELECTEDCLASS).click();
                preventDefault = true;
            }

            if (preventDefault) {
                e.preventDefault();
            }
        },

        value: function (value) {
            var that = this;

            if (value === undefined) {
                return that._value;
            } else {
                value = dom.toHex(value);

                that._value = value;

                that.element.find(SELECTEDCOLORCLASS)
                            .css(BACKGROUNDCOLOR, value);
            }
        }
    });

    var SelectBox = DropDownList.extend({
        init: function (element, options) {
            var that = this;

            DropDownList.fn.init.call(that, element, options);

            that.value(that.options.title);
        },
        options: {
            name: "SelectBox"
        },
        value: function (value) {
            var that = this,
        result = DropDownList.fn.value.call(that, value);

            if (value === undefined) {
                return result;
            }

            if (value !== DropDownList.fn.value.call(that)) {
                that.text(that.options.title);
                that._current.removeClass("k-state-selected");
                that.current(null);
                that._oldIndex = that.selectedIndex = -1;
            }
        }
    });

    kendo.ui.editor.ColorPicker = ColorPicker;
    kendo.ui.editor.SelectBox = SelectBox;

})(jQuery);
(function ($, undefined) {

    // Imports ================================================================
    var kendo = window.kendo,
        Class = kendo.Class,
extend = $.extend,
Editor = kendo.ui.editor,
dom = Editor.Dom,
EditorUtils = Editor.EditorUtils,
registerTool = EditorUtils.registerTool,
Command = Editor.Command,
Tool = Editor.Tool,
    ToolTemplate = Editor.ToolTemplate,
    RangeUtils = Editor.RangeUtils,
    blockElements = dom.blockElements,
        BlockFormatFinder = Editor.BlockFormatFinder,
        BlockFormatter = Editor.BlockFormatter;

    function indent(node, value) {
        var property = dom.name(node) != "td" ? "marginLeft" : "paddingLeft";
        if (value === undefined) {
            return node.style[property] || 0;
        } else {
            if (value > 0) {
                node.style[property] = value + "px";
            } else {
                node.style[property] = "";

                if (!node.style.cssText) {
                    node.removeAttribute("style");
                }
            }
        }
    }

    var IndentFormatter = Class.extend({
        init: function () {
            this.finder = new BlockFormatFinder([{
                tags: dom.blockElements
            }]);
        },

        apply: function (nodes) {
            var formatNodes = this.finder.findSuitable(nodes),
                targets = [],
                i, len, formatNode, parentList, sibling;

            if (formatNodes.length) {
                for (i = 0, len = formatNodes.length; i < len; i++) {
                    if (dom.is(formatNodes[i], "li")) {
                        if (!$(formatNodes[i]).index()) {
                            targets.push(formatNodes[i].parentNode);
                        } else if ($.inArray(formatNodes[i].parentNode, targets) < 0) {
                            targets.push(formatNodes[i]);
                        }
                    } else {
                        targets.push(formatNodes[i]);
                    }
                }

                while (targets.length) {
                    formatNode = targets.shift();
                    if (dom.is(formatNode, "li")) {
                        parentList = formatNode.parentNode;
                        sibling = $(formatNode).prev("li");
                        var siblingList = sibling.find("ul,ol").last();

                        var nestedList = $(formatNode).children("ul,ol")[0];

                        if (nestedList && sibling[0]) {
                            if (siblingList[0]) {
                                siblingList.append(formatNode);
                                siblingList.append($(nestedList).children());
                                dom.remove(nestedList);
                            } else {
                                sibling.append(nestedList);
                                nestedList.insertBefore(formatNode, nestedList.firstChild);
                            }
                        } else {
                            nestedList = sibling.children("ul,ol")[0];
                            if (!nestedList) {
                                nestedList = dom.create(formatNode.ownerDocument, dom.name(parentList));
                                sibling.append(nestedList);
                            }

                            while (formatNode && formatNode.parentNode == parentList) {
                                nestedList.appendChild(formatNode);
                                formatNode = targets.shift();
                            }
                        }
                    } else {
                        var marginLeft = parseInt(indent(formatNode), 10) + 30;
                        indent(formatNode, marginLeft);

                        for (var targetIndex = 0; targetIndex < targets.length; targetIndex++) {
                            if ($.contains(formatNode, targets[targetIndex])) {
                                targets.splice(targetIndex, 1);
                            }
                        }
                    }
                }
            } else {
                var formatter = new BlockFormatter([{
                    tags: "p"
                }], {
                    style: {
                        marginLeft: 30
                    }
                });

                formatter.apply(nodes);
            }
        },

        remove: function (nodes) {
            var formatNodes = this.finder.findSuitable(nodes),
                targetNode, i, len, list, listParent, siblings,
                formatNode, marginLeft;

            for (i = 0, len = formatNodes.length; i < len; i++) {
                formatNode = $(formatNodes[i]);

                if (formatNode.is("li")) {
                    list = formatNode.parent();
                    listParent = list.parent();
                    // listParent will be ul or ol in case of invalid dom - <ul><li></li><ul><li></li></ul></ul>
                    if (listParent.is("li,ul,ol") && !indent(list[0])) {
                        // skip already processed nodes
                        if (targetNode && $.contains(targetNode, listParent[0])) {
                            continue;
                        }

                        siblings = formatNode.nextAll("li");
                        if (siblings.length) {
                            $(list[0].cloneNode(false)).appendTo(formatNode).append(siblings);
                        }

                        if (listParent.is("li")) {
                            formatNode.insertAfter(listParent);
                        } else {
                            formatNode.appendTo(listParent);
                        }

                        if (!list.children("li").length) {
                            list.remove();
                        }

                        continue;
                    } else {
                        if (targetNode == list[0]) {
                            // removing format on sibling LI elements
                            continue;
                        }
                        targetNode = list[0];
                    }
                } else {
                    targetNode = formatNodes[i];
                }

                marginLeft = parseInt(indent(targetNode), 10) - 30;
                indent(targetNode, marginLeft);
            }
        }

    });

    var IndentCommand = Command.extend({
        init: function (options) {
            options.formatter = /** @ignore */ {
                toggle: function (range) {
                    new IndentFormatter().apply(RangeUtils.nodes(range));
                }
            };
            Command.fn.init.call(this, options);
        }
    });

    var OutdentCommand = Command.extend({
        init: function (options) {
            options.formatter = {
                toggle: function (range) {
                    new IndentFormatter().remove(RangeUtils.nodes(range));
                }
            };
            Command.fn.init.call(this, options);
        }
    });

    var OutdentTool = Tool.extend({
        init: function (options) {
            Tool.fn.init.call(this, extend(options, {
                command: OutdentCommand
            }));

            this.finder = new BlockFormatFinder([{
                tags: blockElements
            }]);
        },

        initialize: function (ui) {
            ui.attr("unselectable", "on")
               .addClass("k-state-disabled");
        },

        update: function (ui, nodes) {
            var suitable = this.finder.findSuitable(nodes),
                isOutdentable, listParentsCount, i, len;

            for (i = 0, len = suitable.length; i < len; i++) {
                isOutdentable = indent(suitable[i]);

                if (!isOutdentable) {
                    listParentsCount = $(suitable[i]).parents("ul,ol").length;
                    isOutdentable = (dom.is(suitable[i], "li") && (listParentsCount > 1 || indent(suitable[i].parentNode))) ||
                                    (dom.ofType(suitable[i], ["ul", "ol"]) && listParentsCount > 0);
                }

                if (isOutdentable) {
                    ui.removeClass("k-state-disabled");
                    return;
                }
            }

            ui.addClass("k-state-disabled").removeClass("k-state-hover");
        }
    });

    extend(Editor, {
        IndentFormatter: IndentFormatter,
        IndentCommand: IndentCommand,
        OutdentCommand: OutdentCommand,
        OutdentTool: OutdentTool
    });

    registerTool("indent", new Tool({
        command: IndentCommand, template: new ToolTemplate({
            template: EditorUtils.buttonTemplate, title: "Indent"
        })
    }));
    registerTool("outdent", new OutdentTool({
        template: new ToolTemplate({
            template: EditorUtils.buttonTemplate, title: "Outdent"
        })
    }));

})(jQuery);
(function ($, undefined) {

    var kendo = window.kendo,
        extend = $.extend,
        Editor = kendo.ui.editor,
        dom = Editor.Dom,
        RangeUtils = Editor.RangeUtils,
        EditorUtils = Editor.EditorUtils,
        Command = Editor.Command,
        Tool = Editor.Tool,
        ToolTemplate = Editor.ToolTemplate;

    var ViewHtmlCommand = Command.extend({
        init: function (options) {
            var cmd = this;
            cmd.options = options;
            Command.fn.init.call(cmd, options);
            cmd.attributes = null;
            cmd.async = true;
        },

        exec: function () {
            var that = this,
                editor = that.editor,
                range = editor.getRange(),
                dialog = $(ViewHtmlCommand.template).appendTo(document.body),
                content = ViewHtmlCommand.indent(editor.value()),
                textarea = ".k-editor-textarea";

            function apply(e) {
                editor.value(dialog.find(textarea).val());

                close(e);

                if (that.change) {
                    that.change();
                }
            }

            function close(e) {
                e.preventDefault();

                dialog.data("kendoWindow").destroy();

                dom.windowFromDocument(RangeUtils.documentFromRange(range)).focus();
            }

            dialog.kendoWindow(extend({
            }, editor.options.dialogOptions, {
                title: "View HTML",
                close: close
            }))
                .hide()
                .find(textarea).val(content).end()
                .find(".k-dialog-update").click(apply).end()
                        .find(".k-dialog-close").click(close).end()
                        .show()
                .data("kendoWindow")
                .center();

            dialog.find(textarea).focus();
        }
    });

    extend(ViewHtmlCommand, {
        template: "<div class='k-editor-dialog'>" +
                "<textarea class='k-editor-textarea k-input'></textarea>" +
                "<div class='k-button-wrapper'>" +
                    "<button class='k-dialog-update k-button'>Update</button>" +
                    "&nbsp;or&nbsp;" +
                    "<a href='#' class='k-dialog-close k-link'>Close</a>" +
                "</div>" +
            "</div>",
        indent: function (content) {
            return content.replace(/<\/(p|li|ul|ol|h[1-6]|table|tr|td|th)>/ig, "</$1>\n")
                          .replace(/<(ul|ol)([^>]*)><li/ig, "<$1$2>\n<li")
                          .replace(/<br \/>/ig, "<br />\n")
                          .replace(/\n$/, "");
        }
    });

    kendo.ui.editor.ViewHtmlCommand = ViewHtmlCommand;

    Editor.EditorUtils.registerTool("viewHtml", new Tool({
        command: ViewHtmlCommand, template: new ToolTemplate({
            template: EditorUtils.buttonTemplate, title: "View HTML"
        })
    }));

})(jQuery);
(function ($) {

    // Imports ================================================================
    var kendo = window.kendo,
        Class = kendo.Class,
        extend = $.extend,
        Editor = kendo.ui.editor,
        RangeUtils = Editor.RangeUtils,
        Marker = Editor.Marker;

    var PendingFormats = Class.extend({
        init: function (editor) {
            this.editor = editor;
            this.formats = [];
        },

        apply: function (range) {
            if (!this.hasPending()) {
                return;
            }

            var marker = new Marker();

            marker.addCaret(range);

            var caret = range.startContainer.childNodes[range.startOffset];

            var target = caret.previousSibling;

            /* under IE, target is a zero-length text node. go figure. */
            if (!target.nodeValue) {
                target = target.previousSibling;
            }

            range.setStart(target, target.nodeValue.length - 1);

            marker.add(range);

            if (!RangeUtils.textNodes(range).length) {
                marker.remove(range);
                range.collapse(true);
                this.editor.selectRange(range);
                return;
            }

            var textNode = marker.end.previousSibling.previousSibling;

            var pendingFormat,
                formats = this.formats;

            for (var i = 0; i < formats.length; i++) {
                pendingFormat = formats[i];

                var command = pendingFormat.command(extend({
                    range: range
                }, pendingFormat.options.params));
                command.editor = this.editor;
                command.exec();

                range.selectNode(textNode);
            }

            marker.remove(range);

            if (textNode.parentNode) {
                range.setStart(textNode, 1);
                range.collapse(true);
            }

            this.clear();

            this.editor.selectRange(range);
        },

        hasPending: function () {
            return this.formats.length > 0;
        },

        isPending: function (format) {
            return !!this.getPending(format);
        },

        getPending: function (format) {
            var formats = this.formats;
            for (var i = 0; i < formats.length; i++) {
                if (formats[i].name == format) {
                    return formats[i];
                }
            }

            return;
        },

        toggle: function (format) {
            var formats = this.formats;

            for (var i = 0; i < formats.length; i++) {
                if (formats[i].name == format.name) {
                    if (formats[i].params && formats[i].params.value != format.params.value) {
                        formats[i].params.value = format.params.value;
                    } else {
                        formats.splice(i, 1);
                    }

                    return;
                }
            }

            formats.push(format);
        },

        clear: function () {
            this.formats = [];
        }

    });

    extend(Editor, {
        PendingFormats: PendingFormats
    });

})(jQuery);


(function ($, undefined) {
    var kendo = window.kendo,
        keys = kendo.keys,
        ui = kendo.ui,
        Widget = ui.Widget,
    parse = kendo.parseFloat,
    placeholderSupported = kendo.support.placeholder,
        touch = kendo.support.touch,
        getCulture = kendo.getCulture,
    CHANGE = "change",
    DISABLED = "disabled",
    INPUT = "k-input",
    SPIN = "spin",
    TOUCHEND = "touchend",
    MOUSEDOWN = touch ? "touchstart" : "mousedown",
    MOUSEUP = touch ? "touchmove " + TOUCHEND : "mouseup mouseleave",
    DEFAULT = "k-state-default",
    FOCUSED = "k-state-focused",
    HOVER = "k-state-hover",
    HOVEREVENTS = "mouseenter mouseleave",
        POINT = ".",
        SELECTED = "k-state-selected",
        STATEDISABLED = "k-state-disabled",
        TYPE = touch ? "number" : "text",
        NULL = null,
        proxy = $.proxy,
        decimals = {
            190: ".",
            188: ","
        };

    var NumericTextBox = Widget.extend(/** @lends kendo.ui.NumericTextBox.prototype */ {

        init: function (element, options) {
            var that = this,
            isStep = options && options[step] !== undefined,
                min = options && options[step] !== undefined,
                max = options && options[step] !== undefined,
                step = options && options[step] !== undefined,
                    value = options && options[step] !== undefined,
                format = options && options[step] !== undefined;
            width = options && options[step] !== undefined;
            Widget.fn.init.call(that, element, options);

            options = that.options;
            if (options.wrap) {
                element = that.element.addClass(INPUT).css("width", options.width)
                                      .bind({
                                          keydown: proxy(that._keydown, that),
                                          paste: proxy(that._paste, that),
                                          blur: proxy(that._focusout, that)
                                      });

                element.closest("form")
                       .bind("reset", function () {
                           setTimeout(function () {
                               that.value(element[0].value);
                           });
                       });

                options.placeholder = options.placeholder || element.attr("placeholder");

                that._wrapper();
                //that._arrows();
                that._input();

                that._text.focus(proxy(that._click, that));

                // Default min value 1 Updated By Amit 
                min = element.attr("min") || "0";
                max = element.attr("max");
                step = that._parse(element.attr("step"), options.defaultCulture);
                value = that._parse(element.attr("value"), options.defaultCulture);

                if (options.min === NULL && min !== NULL) {
                    options.min = min;
                }

                if (options.max === NULL && max !== NULL) {
                    options.max = max;
                }

                if (options.value === NULL && value !== NULL) {
                    options.value = value;
                }

                if (!isStep && step !== NULL) {
                    options.step = step;
                }
            }
            format = options.format;
            if (format.slice(0, 3) === "{0:") {
                options.format = format.slice(3, format.length - 1);
            }

            //             value = options.value;
            //             that.value(value !== NULL ? value : element.val());
            if (options.wrap) {
                that.enable(!element.is('[disabled]'));

                that._toggleText(true);
                that._change(value);
            }
            else {
                var spanValue = that.element.text();
                if (spanValue != undefined && spanValue != "") {
                    that.element.text(kendo.toString(parseFloat(that._parse(spanValue, options.defaultCulture)), options.format, options.culture))
                }
                else {
                    that.element.text(kendo.toString(parseFloat(that._parse("0", options.defaultCulture)), options.format, options.culture));
                }
            }
            kendo.notify(that);
        },

        options: {
            name: "NumericTextBox",
            decimals: NULL,
            min: 0,
            max: NULL,
            value: NULL,
            step: 1,
            culture: "",
            format: "n0",
            spinners: false,
            placeholder: "",
            upArrowText: "Increase value",
            downArrowText: "Decrease value",
            wrap: true,
            defaultCulture: "in-IN"
        },
        events: [
CHANGE,
SPIN
        ],
        enable: function (enable) {
            var that = this,
                text = that._text.add(that.element),
                wrapper = that._inputWrapper.unbind(HOVEREVENTS);//,
            //upArrow = that._upArrow.unbind(MOUSEDOWN),
            //downArrow = that._downArrow.unbind(MOUSEDOWN);

            that._toggleText(true);

            if (enable === false) {
                wrapper
                .removeClass(DEFAULT)
                .addClass(STATEDISABLED);

                text.attr(DISABLED, DISABLED);
            } else {
                wrapper
                .addClass(DEFAULT)
                .removeClass(STATEDISABLED)
                    .bind(HOVEREVENTS, that._toggleHover);

                text.removeAttr(DISABLED);

                //                upArrow.bind(MOUSEDOWN, function(e) {
                //                    e.preventDefault();
                //                    that._spin(1);
                //                    that._upArrow.addClass(SELECTED);
                //                });

                //                downArrow.bind(MOUSEDOWN, function(e) {
                //                    e.preventDefault();
                //                    that._spin(-1);
                //                    that._downArrow.addClass(SELECTED);
                //                });
            }
        },

        min: function (value) {
            return this._option("min", value);
        },
        max: function (value) {
            return this._option("max", value);
        },
        step: function (value) {
            return this._option("step", value);
        },

        value: function (value) {
            var that = this, adjusted;
            //Amit
            // that._text.css('color', 'black');

            if (value === undefined) {
                return that._value;
            }

            value = that._parse(value);
            adjusted = that._adjust(value);

            if (value !== adjusted) {
                that._text.val(that.options.placeholder);
                that._text.css('color', 'gray');
                return;
            }

            that._update(value);
            that._old = that._value;
        },

        text: function () {
            alert("test");
        },

        _adjust: function (value) {
            var that = this,
    options = that.options,
    min = options.min,
    max = options.max;

            if (value === NULL) {
                return value;
            }

            if (min !== NULL && value < min) {
                //add kendow pop up here
                value = min;
            } else if (max !== NULL && value > max) {
                //add kendow pop up here
                value = max;
            }

            return value;
        },

        _blur: function () {
            var that = this;

            that._toggleText(true);
            //            that._change(Math.ceil(parse(that.element.val(), "in-IN", this.options.format)));
            that._change(that.element.val());
        },

        _click: function (e) {
            var that = this;

            clearTimeout(that._focusing);
            that._focusing = setTimeout(function () {
                var input = e.target,
                    idx = caret(input),
                    value = input.value.substring(0, idx),
                    format = that._format(that.options.format),
                    group = format[","],
                    groupRegExp = "",// new RegExp("\\" + group, "g"),
                    extractRegExp = new RegExp("([\\d]+)(\\" + format[POINT] + ")?(\\d+)?"),// new RegExp("([\\d\\" + group + "]+)(\\" + format[POINT] + ")?(\\d+)?"),
                    result = extractRegExp.exec(value),
                    caretPosition = 0;

                if (result) {
                    caretPosition = result[0].replace(groupRegExp, "").length;

                    if (value.indexOf("(") != -1 && that._value < 0) {
                        caretPosition++;
                    }
                }

                that._focusin();

                caret(that.element[0], caretPosition);
            });
        },

        _change: function (value) {
            var that = this;

            that._update(value);
            value = that._value;

            if (that._old != value) {
                that._old = value;
                that.trigger(CHANGE);

                // trigger the DOM change event so any subscriber gets notified
                that.element.trigger(CHANGE);
            }
        },

        _culture: function (culture) {
            return culture || getCulture(this.options.culture);
        },

        _focusin: function () {
            var that = this;
            that._toggleText(false);
            // that._text.focus();
            //Removed By Amit
            //that._inputWrapper.addClass(FOCUSED);
        },

        _focusout: function () {
            var that = this;

            clearTimeout(that._focusing);
            that._inputWrapper.removeClass(FOCUSED);
            that._blur();
        },

        _format: function (format, culture) {
            var numberFormat = this._culture(culture).numberFormat;

            format = format.toLowerCase();

            if (format.indexOf("c") > -1) {
                numberFormat = numberFormat.currency;
            } else if (format.indexOf("p") > -1) {
                numberFormat = numberFormat.percent;
            }

            return numberFormat;
        },

        _input: function () {
            var that = this,
                CLASSNAME = "k-formatted-value",
                element = that.element.show()[0],
                wrapper = that.wrapper,
                text;


            if (wrapper.find("div:eq(0)").hasClass("k-filter-help-text")) {
                text = wrapper.find(POINT + CLASSNAME + "dummy");
            }
            else {
                text = wrapper.find(POINT + CLASSNAME);
            }
            if (!text[0]) {
                var dataValid = $(element).attr("data-valid")
                var dataValidMsg = $(element).attr("data-valid-msg")
                var tabIndex = $(element).attr("tabIndex")
                var recname = $(element).attr("recname")
                text = $("<input id='_temp" + element.name + "' name='_temp" + element.name + "' tabIndex='" + tabIndex + "'" + (recname == undefined ? "" : (" recname='" + recname + "'")) + "  autocomplete='off'/>").insertBefore(element).addClass(CLASSNAME);
                //                text = $("<input id='_temp"+element.name+ (dataValid!=undefined && dataValid!="" ? ("' data-valid='"+dataValid+"' data-valid-msg='"+dataValidMsg+"'") : "'") + "/>").insertBefore(element).addClass(CLASSNAME);
                //                $(element).removeAttr("data-valid");
                //                $(element).removeAttr("data-valid-msg");
                //                $(element).removeAttr("tabIndex");
            }

            element.type = TYPE;
            text[0].type = "text";
            text[0].style.cssText = element.style.cssText;
            text.attr("placeholder", that.options.placeholder);

            that._text = text.attr("readonly", true)
                             .addClass(element.className);
        },

        _keydown: function (e) {
            var that = this,
                key = e.keyCode;

            //if (key == keys.DOWN) {
            //    that._step(-1);
            //} else if (key == keys.UP) {
            //    that._step(1);
            //} else

            if (key == keys.ENTER) {
                that._change(that.element.val());
            }
            //Updated by Amit Yadav
            //if (e.shiftKey) {
            //    e.preventDefault();
            //}
            //else
            if (that._prevent(key) && !e.ctrlKey) {
                e.preventDefault();
            }
            else if (e.shiftKey && key != 9) {
                e.preventDefault();
            }
        },

        _paste: function (e) {
            var that = this,
                element = e.target,
                value = element.value;

            setTimeout(function () {
                if (that._parse(element.value) === NULL) {
                    that._update(value);
                }
            });
        },

        _prevent: function (key) {
            var that = this,
                element = that.element[0],
                value = element.value,
                options = that.options,
                min = options.min,
                numberFormat = that._format(options.format),
                separator = numberFormat[POINT],
                precision = options.decimals,
                idx = caret(element),
                prevent = true,
                end;

            if (precision === NULL) {
                precision = numberFormat.decimals;
            }

            if ((key > 16 && key < 21) ||
                (key > 32 && key < 37) ||
                (key > 47 && key < 58) ||
                (key > 95 && key < 106) ||
                 key == keys.INSERT ||
                 key == keys.DELETE ||
                 key == keys.LEFT ||
                 key == keys.RIGHT ||
                 key == keys.TAB ||
                 key == keys.BACKSPACE ||
                 key == keys.ENTER) {
                prevent = false;
            } else if (decimals[key] === separator && precision > 0 && value.indexOf(separator) == -1) {
                prevent = false;
            } else if ((min === NULL || min < 0) && value.indexOf("-") == -1 && (key == 189 || key == 109) && idx === 0) { //sign
                prevent = false;
            } else if (key == 110 && precision > 0 && value.indexOf(separator) == -1) {
                end = value.substring(idx);

                element.value = value.substring(0, idx) + separator + end;
            }

            return prevent;
        },

        _option: function (option, value) {
            var that = this,
                options = that.options;

            if (value === undefined) {
                return options[option];
            }

            value = that._parse(value);

            if (!value && option === "step") {
                return;
            }

            options[option] = that._parse(value);
        },

        _spin: function (step, timeout) {
            var that = this;

            timeout = timeout || 500;

            clearTimeout(that._spinning);
            that._spinning = setTimeout(function () {
                that._spin(step, 50);
            }, timeout);

            that._step(step);
        },

        _step: function (step) {
            var that = this,
                element = that.element,
                value = that._parse(element.val()) || 0;

            if (document.activeElement != element[0]) {
                that._focusin();
            }

            value += that.options.step * step;

            that._update(that._adjust(value));

            that.trigger(SPIN);
        },

        _toggleHover: function (e) {
            //if (!touch) {
            //    $(e.currentTarget).toggleClass(HOVER, e.type === "mouseenter");
            //}
        },

        _toggleText: function (toggle) {
            var that = this;

            toggle = !!toggle;
            that._text.toggle(toggle);
            that.element.toggle(!toggle);
        },

        _parse: function (value, culture) {
            return parse(value, this._culture(culture), this.options.format);
        },

        _update: function (value) {
            var that = this,
        options = that.options,
        format = options.format,
        decimals = options.decimals,
        culture = that._culture(),
        numberFormat = that._format(format, culture),
        isNotNull;

            if (decimals === NULL) {
                decimals = numberFormat.decimals;
            }

            value = that._parse(value, culture);

            isNotNull = value !== NULL;

            if (isNotNull) {
                //value =parseFloat(Math.ceil(value.toFixed(decimals)));
                value = parseFloat(value.toFixed(decimals));
            }

            that._value = value = that._adjust(value);
            that._placeholder(kendo.toString(value, format, culture));
            that.element.val(isNotNull ? value.toString().replace(POINT, numberFormat[POINT]) : "");
        },

        _placeholder: function (value) {
            this._text.val(value);
            if (!placeholderSupported && !value) {
                this._text.val(this.options.placeholder);
            }
        },

        _wrapper: function () {
            var that = this,
                element = that.element,
                wrapper;

            wrapper = element.parents(".k-numerictextbox");

            if (!wrapper.is("span.k-numerictextbox")) {
                //wrapper = element.hide().wrap('<span class="k-numeric-wrap k-state-default" />').parent();
                wrapper = element.parent();
            }

            //            wrapper[0].style.cssText = "color:black";
            //            element[0].style.width = "";
            that.wrapper = wrapper.show();
            that._inputWrapper = $(wrapper[0].firstChild);
        }
    });

    function buttonHtml(className, text) {
        return '<span unselectable="on" class="k-link"><span unselectable="on" class="k-icon k-i-arrow-' + className + '" title="' + text + '">' + text + '</span></span>';
    }

    function caret(element, position) {
        var range,
            isPosition = position !== undefined;

        if (document.selection) {
            if ($(element).is(":visible")) {
                element.focus();
            }
            range = document.selection.createRange();
            if (isPosition) {
                range.move("character", position);
                range.select();
            } else {
                var rangeElement = element.createTextRange(),
                    rangeDuplicated = rangeElement.duplicate();
                rangeElement.moveToBookmark(range.getBookmark());
                rangeDuplicated.setEndPoint('EndToStart', rangeElement);

                position = rangeDuplicated.text.length;

            }
        } else if (element.selectionStart !== undefined) {
            if (isPosition) {
                element.focus();
                element.setSelectionRange(position, position);
            } else {
                position = element.selectionStart;
            }
        }

        return position;
    }

    ui.plugin(NumericTextBox);
})(jQuery);

(function ($, undefined) {
    var kendo = window.kendo,
        ui = kendo.ui,
        touch = kendo.support.touch,
        extend = $.extend,
        proxy = $.proxy,
        each = $.each,
        template = kendo.template,
        Widget = ui.Widget,
        excludedNodesRegExp = /^(ul|a|div)$/i,
        IMG = "img",
        OPEN = "open",
        MENU = "k-menu",
        LINK = "k-link",
        LAST = "k-last",
        CLOSE = "close",
        CLICK = touch ? "touchend" : "click",
        TIMER = "timer",
        FIRST = "k-first",
        IMAGE = "k-image",
        SELECT = "select",
        ZINDEX = "zIndex",
        MOUSEENTER = "mouseenter",
        MOUSELEAVE = "mouseleave",
        KENDOPOPUP = "kendoPopup",
        DEFAULTSTATE = "k-state-default",
        DISABLEDSTATE = "k-state-disabled",
        groupSelector = ".k-group",
        allItemsSelector = ":not(.k-list) > .k-item",
        disabledSelector = ".k-item.k-state-disabled",
        itemSelector = ".k-item:not(.k-state-disabled)",
        linkSelector = ".k-item:not(.k-state-disabled) > .k-link",
        templateSelector = "div:not(.k-animation-container,.k-list-container)",

        templates = {
            content: template(
                "<div class='k-content k-group'>#= content(item) #</div>"
            ),
            group: template(
            "<ul class='#= groupCssClass(group) #'#= groupAttributes(group) #>" +
                "#= renderItems(data) #" +
            "</ul>"
        ),
            itemWrapper: template(
                "<#= tag(item) # class='#= textClass(item) #'#= textAttributes(item) #>" +
                    "#= image(item) ##= sprite(item) ##= text(item) #" +
                    "#= arrow(data) #" +
                "</#= tag(item) #>"
            ),
            item: template(
                "<li class='#= wrapperCssClass(group, item) #'>" +
                    "#= itemWrapper(data) #" +
                    "# if (item.items) { #" +
                    "#= subGroup({ items: item.items, menu: menu, group: { expanded: item.expanded } }) #" +
                    "# } #" +
                "</li>"
            ),
            image: template("<img class='k-image' alt='' src='#= imageUrl #' />"),
            arrow: template("<span class='#= arrowClass(item, group) #'></span>"),
            sprite: template("<span class='k-sprite #= spriteCssClass #'></span>"),
            empty: template("")
        },

        rendering = {
            /** @ignore */
            wrapperCssClass: function (group, item) {
                var result = "k-item",
                    index = item.index;

                if (item.enabled === false) {
                    result += " k-state-disabled";
                } else {
                    result += " k-state-default";
                }

                if (group.firstLevel && index === 0) {
                    result += " k-first";
                }

                if (index == group.length - 1) {
                    result += " k-last";
                }

                return result;
            },
            /** @ignore */
            textClass: function (item) {
                return LINK;
            },
            /** @ignore */
            textAttributes: function (item) {
                return item.url ? " href='" + item.url + "'" : "";
            },
            /** @ignore */
            arrowClass: function (item, group) {
                var result = "k-icon";

                if (group.horizontal) {
                    result += " k-i-arrow-s";
                } else {
                    result += " k-i-arrow-e";
                }

                return result;
            },
            /** @ignore */
            text: function (item) {
                return item.encoded === false ? item.text : kendo.htmlEncode(item.text);
            },
            /** @ignore */
            tag: function (item) {
                return item.url ? "a" : "span";
            },
            /** @ignore */
            groupAttributes: function (group) {
                return group.expanded !== true ? " style='display:none'" : "";
            },
            /** @ignore */
            groupCssClass: function (group) {
                return "k-group";
            },
            /** @ignore */
            content: function (item) {
                return item.content ? item.content : "&nbsp;";
            }
        };

    function getEffectDirection(direction, root) {
        direction = direction.split(" ")[!root + 0] || direction;
        return direction.replace("top", "up").replace("bottom", "down");
    }

    function parseDirection(direction, root) {
        direction = direction.split(" ")[!root + 0] || direction;
        var output = {
            origin: ["bottom", "left"], position: ["top", "left"]
        },
        horizontal = /left|right/.test(direction);

        if (horizontal) {
            output.origin = ["top", direction];
            output.position[1] = kendo.directions[direction].reverse;
        } else {
            output.origin[0] = direction;
            output.position[0] = kendo.directions[direction].reverse;
        }

        output.origin = output.origin.join(" ");
        output.position = output.position.join(" ");

        return output;
    }

    function contains(parent, child) {
        try {
            return $.contains(parent, child);
        } catch (e) {
            return false;
        }
    }

    function updateItemClasses(item) {
        item = $(item);

        item.addClass("k-item")
            .children(IMG)
            .addClass(IMAGE);
        item
            .children("a")
                .addClass(LINK)
            .children(IMG)
            .addClass(IMAGE);
        item
            .filter(":not([disabled])")
            .addClass(DEFAULTSTATE);
        item
            .filter(".k-separator:empty")
            .append("&nbsp;");
        item
            .filter("li[disabled]")
            .addClass(DISABLEDSTATE)
            .removeAttr("disabled");
        item
            .children("a")
            .filter(":focus")
            .parent()
            .addClass("k-state-active");

        if (!item.children("." + LINK).length) {
            item
                .contents()      // exclude groups, real links, templates and empty text nodes
                .filter(function () {
                    return (!this.nodeName.match(excludedNodesRegExp) && !(this.nodeType == 3 && !$.trim(this.nodeValue)));
                })
                .wrapAll("<span class='" + LINK + "'/>");
        }

        updateArrow(item);
        updateFirstLast(item);
    }

    function updateArrow(item) {
        item = $(item);

        item.find(".k-icon").remove();

        item.filter(":has(.k-group)")
            .children(".k-link:not(:has([class*=k-i-arrow]))")
            .each(function () {
                var item = $(this),
                    parent = item.parent().parent();

                item.append("<span class='k-icon " + (parent.hasClass(MENU + "-horizontal") ? "k-i-arrow-s" : "k-i-arrow-e") + "'/>");
            });
    }

    function updateFirstLast(item) {
        item = $(item);

        item.filter(".k-first:not(:first-child)").removeClass(FIRST);
        item.filter(".k-last:not(:last-child)").removeClass(LAST);
        item.filter(":first-child").addClass(FIRST);
        item.filter(":last-child").addClass(LAST);
    }

    var Menu = Widget.extend({
        init: function (element, options) {
            var that = this;

            Widget.fn.init.call(that, element, options);

            element = that.wrapper = that.element;
            options = that.options;

            if (options.dataSource) {
                that.element.empty();
                that.append(options.dataSource, element);
            }

            that._updateClasses();

            if (options.animation === false) {
                options.animation = {
                    open: {
                        show: true, effects: {
                        }
                    }, close: {
                        hide: true, effects: {
                        }
                    }
                };
            }

            that.nextItemZIndex = 100;

            element.delegate(disabledSelector, CLICK, false)
                   .delegate(itemSelector, CLICK, proxy(that._click, that));

            if (!touch) {
                element.delegate(itemSelector, MOUSEENTER, proxy(that._mouseenter, that))
                       .delegate(itemSelector, MOUSELEAVE, proxy(that._mouseleave, that))
                       .delegate(linkSelector, MOUSEENTER + " " + MOUSELEAVE, that._toggleHover);
            } else {
                options.openOnClick = true;
                element.delegate(linkSelector, "touchstart touchend", that._toggleHover);
            }

            if (options.openOnClick) {
                that.clicked = false;
                $(document).click(proxy(that._documentClick, that));
            }

            kendo.notify(that);
        },

        events: [

    OPEN,

    CLOSE,

    SELECT
        ],

        options: {
            name: "Menu",
            animation: {
                open: {
                    duration: 200,
                    show: true
                },
                close: { // if close animation effects are defined, they will be used instead of open.reverse
                    duration: 100
                }
            },
            orientation: "horizontal",
            direction: "default",
            openOnClick: false,
            closeOnClick: true,
            hoverDelay: 100
        },


        enable: function (element, enable) {
            this._toggleDisabled(element, enable !== false);

            return this;
        },

        disable: function (element) {
            this._toggleDisabled(element, false);

            return this;
        },


        append: function (item, referenceItem) {
            referenceItem = this.element.find(referenceItem);

            var inserted = this._insert(item, referenceItem, referenceItem.length ? referenceItem.find("> .k-group, .k-animation-container > .k-group") : null);

            each(inserted.items, function (idx) {
                inserted.group.append(this);

                var contents = inserted.contents[idx];
                if (contents) {
                    $(this).append(contents);
                }

                updateArrow(this);
            });

            updateArrow(referenceItem);
            updateFirstLast(inserted.group.find(".k-first, .k-last").add(inserted.items));

            return this;
        },

        insertBefore: function (item, referenceItem) {
            referenceItem = this.element.find(referenceItem);

            var inserted = this._insert(item, referenceItem, referenceItem.parent());

            each(inserted.items, function (idx) {
                referenceItem.before(this);

                var contents = inserted.contents[idx];
                if (contents) {
                    $(this).append(contents);
                }

                updateArrow(this);
                updateFirstLast(this);
            });

            updateFirstLast(referenceItem);

            return this;
        },


        insertAfter: function (item, referenceItem) {
            referenceItem = this.element.find(referenceItem);

            var inserted = this._insert(item, referenceItem, referenceItem.parent());

            each(inserted.items, function (idx) {
                referenceItem.after(this);

                var contents = inserted.contents[idx];
                if (contents) {
                    $(this).append(contents);
                }

                updateArrow(this);
                updateFirstLast(this);
            });

            updateFirstLast(referenceItem);

            return this;
        },

        _insert: function (item, referenceItem, parent) {
            var that = this,
        items, groups, contents = [];

            if (!referenceItem || !referenceItem.length) {
                parent = that.element;
            }

            var plain = $.isPlainObject(item),
                groupData = {
                    firstLevel: parent.hasClass(MENU),
                    horizontal: parent.hasClass(MENU + "-horizontal"),
                    expanded: true,
                    length: parent.children().length
                };

            if (referenceItem && !parent.length) {
                parent = $(Menu.renderGroup({
                    group: groupData
                })).appendTo(referenceItem);
            }

            if (plain || $.isArray(item)) { // is JSON
                items = $.map(plain ? [item] : item, function (value, idx) {
                    if (typeof value === "string") {
                        return $(value);
                    } else {
                        return $(Menu.renderItem({
                            group: groupData,
                            item: extend(value, {
                                index: idx
                            })
                        }));
                    }
                });
                contents = $.map(plain ? [item] : item, function (value, idx) {
                    if (value.content || value.contentUrl) {
                        return $(Menu.renderContent({
                            item: extend(value, {
                                index: idx
                            })
                        }));
                    } else {
                        return false;
                    }
                });
            } else {
                items = $(item);
                groups = items.find("> ul")
                            .addClass("k-group");
                items = items.filter("li");

                items.add(groups.find("> li")).each(function () {
                    updateItemClasses(this);
                });
            }

            return {
                items: items, group: parent, contents: contents
            };
        },

        remove: function (element) {
            element = this.element.find(element);

            var that = this,
            parent = element.parentsUntil(that.element, allItemsSelector),
            group = element.parent("ul");

            element.remove();

            if (group && !group.children(allItemsSelector).length) {
                var container = group.parent(".k-animation-container");
                if (container.length) {
                    container.remove();
                } else {
                    group.remove();
                }
            }

            if (parent.length) {
                parent = parent.eq(0);

                updateArrow(parent);
                updateFirstLast(parent);
            }

            return that;
        },

        open: function (element) {
            var that = this,
                options = that.options,
                horizontal = options.orientation == "horizontal",
    direction = options.direction;
            element = that.element.find(element);

            if (/^(top|bottom|default)$/.test(direction)) {
                direction = horizontal ? (direction + " right").replace("default", "bottom") : "right";
            }

            element.siblings()
                   .find(">.k-popup:visible,>.k-animation-container>.k-popup:visible")
                   .each(function () {
                       var popup = $(this).data("kendoPopup");

                       if (popup) {
                           popup.close();
                       }
                   });

            element.each(function () {
                var li = $(this);

                clearTimeout(li.data(TIMER));

                li.data(TIMER, setTimeout(function () {
                    var ul = li.find(".k-group:first:hidden"), popup;

                    if (ul[0] && that.trigger(OPEN, { item: li[0] }) === false) {
                        li.data(ZINDEX, li.css(ZINDEX));
                        li.css(ZINDEX, that.nextItemZIndex++);

                        popup = ul.data(KENDOPOPUP);
                        var root = li.parent().hasClass(MENU),
                            parentHorizontal = root && horizontal,
                            directions = parseDirection(direction, root),
                            effects = options.animation.open.effects,
                            openEffects = effects !== undefined ? effects : "slideIn:" + getEffectDirection(direction, root);

                        if (!popup) {
                            popup = ul.kendoPopup({
                                origin: directions.origin,
                                position: directions.position,
                                collision: options.popupCollision !== undefined ? options.popupCollision : (parentHorizontal ? "fit" : "fit flip"),
                                anchor: li,
                                appendTo: li,
                                animation: {
                                    open: extend(true, {
                                        effects: openEffects
                                    }, options.animation.open),
                                    close: options.animation.close
                                },
                                close: function (e) {
                                    var li = e.sender.wrapper.parent();

                                    if (that.trigger(CLOSE, { item: li[0] }) === false) {
                                        li.css(ZINDEX, li.data(ZINDEX));
                                        li.removeData(ZINDEX);
                                    } else {
                                        e.preventDefault();
                                    }
                                }
                            }).data(KENDOPOPUP);
                        } else {
                            popup = ul.data(KENDOPOPUP);
                            popup.options.origin = directions.origin;
                            popup.options.position = directions.position;
                            popup.options.animation.open.effects = openEffects;
                        }

                        popup.open();
                    }

                }, that.options.hoverDelay));
            });

            return that;
        },

        close: function (element) {
            var that = this;
            element = that.element.find(element);

            if (!element[0]) {
                element = that.element.find(">.k-item");
            }

            element.each(function () {
                var li = $(this);

                clearTimeout(li.data(TIMER));

                li.data(TIMER, setTimeout(function () {
                    var ul = li.find(".k-group:first:visible"), popup;
                    if (ul[0]) {
                        popup = ul.data(KENDOPOPUP);
                        popup.close();
                    }
                }, that.options.hoverDelay));
            });

            return that;
        },

        _toggleDisabled: function (element, enable) {
            element = this.element.find(element);
            element.each(function () {
                $(this)
.toggleClass(DEFAULTSTATE, enable)
.toggleClass(DISABLEDSTATE, !enable);
            });
        },

        _toggleHover: function (e) {
            var target = $(kendo.eventTarget(e)).closest(allItemsSelector);

            if (!target.parents("li." + DISABLEDSTATE).length) {
                target.toggleClass("k-state-hover", e.type == MOUSEENTER || e.type == "touchstart");
            }
        },

        _updateClasses: function () {
            var that = this;

            that.element.addClass("k-widget k-reset k-header " + MENU).addClass(MENU + "-" + that.options.orientation);

            var items = that.element
                            .find("li > ul")
            .addClass("k-group")
            .end()
        .find("> li,.k-group > li");

            items.each(function () {
                updateItemClasses(this);
            });
        },

        _mouseenter: function (e) {
            var that = this,
                element = $(e.currentTarget),
                hasChildren = (element.children(".k-animation-container").length || element.children(groupSelector).length);

            if (e.delegateTarget != element.parents(".k-menu")[0]) {
                return;
            }

            if (!that.options.openOnClick || that.clicked) {
                if (!contains(e.currentTarget, e.relatedTarget) && hasChildren) {
                    that.open(element);
                }
            }

            if (that.options.openOnClick && that.clicked) {
                element.siblings().each(proxy(function (_, sibling) {
                    that.close(sibling);
                }, that));
            }
        },

        _mouseleave: function (e) {
            var that = this,
                element = $(e.currentTarget),
                hasChildren = (element.children(".k-animation-container").length || element.children(groupSelector).length);

            if (element.parentsUntil(".k-animation-container", ".k-list-container,.k-calendar-container")[0]) {
                e.stopImmediatePropagation();
                return;
            }

            if (!that.options.openOnClick && !contains(e.currentTarget, e.relatedTarget) && hasChildren) {
                that.close(element);
            }
        },

        _click: function (e) {
            var that = this, openHandle,
target = $(kendo.eventTarget(e)),
link = target.closest("." + LINK),
href = link.attr("href"),
element = target.closest(allItemsSelector),
isLink = (!!href && href.charAt(href.length - 1) != "#");

            if (element.children(templateSelector)[0]) {
                return;
            }

            if (element.hasClass(DISABLEDSTATE)) {
                e.preventDefault();
                return;
            }

            if (touch) {
                element.siblings().each(proxy(function (_, sibling) {
                    that.close(sibling);
                }, that));
            }

            if (!e.handled && that.trigger(SELECT, {
                item: element[0]
            })) { // We shouldn't stop propagation.
                e.preventDefault();
            }

            e.handled = true;

            if (that.options.closeOnClick && !(href && href.length > 0) && !element.children(groupSelector + ",.k-animation-container").length) {
                that.close(link.parentsUntil(that.element, allItemsSelector));
            }

            if ((!element.parent().hasClass(MENU) || !that.options.openOnClick) && !touch) {
                return;
            }

            if (!isLink) {
                e.preventDefault();
            }

            that.clicked = true;
            openHandle = element.children(".k-animation-container, .k-group").is(":visible") ? CLOSE : OPEN;
            that[openHandle](element);
        },

        _documentClick: function (e) {
            var that = this;

            if (contains(that.element[0], e.target)) {
                return;
            }

            that.clicked = false;
        }
    });

    // client-side rendering
    extend(Menu, {
        renderItem: function (options) {
            options = extend({
                menu: {
                }, group: {
                }
            }, options);

            var empty = templates.empty,
                item = options.item;

            return templates.item(extend(options, {
                image: item.imageUrl ? templates.image : empty,
                sprite: item.spriteCssClass ? templates.sprite : empty,
                itemWrapper: templates.itemWrapper,
                arrow: item.items || item.content ? templates.arrow : empty,
                subGroup: Menu.renderGroup
            }, rendering));
        },

        renderGroup: function (options) {
            return templates.group(extend({
                renderItems: function (options) {
                    var html = "",
                        i = 0,
                                        items = options.items,
                                        len = items ? items.length : 0,
                                        group = extend({
                                            length: len
                                        }, options.group);

                    for (; i < len; i++) {
                        html += Menu.renderItem(extend(options, {
                            group: group,
                            item: extend({ index: i }, items[i])
                        }));
                    }

                    return html;
                }
            }, options, rendering));
        },

        renderContent: function (options) {
            return templates.content(extend(options, rendering));
        }
    });

    kendo.ui.plugin(Menu);

})(jQuery);
(function ($, undefined) {
    var kendo = window.kendo,
        ui = kendo.ui,
        Widget = ui.Widget,
        extend = $.extend,
        isFunction = $.isFunction,
        isPlainObject = $.isPlainObject,
        inArray = $.inArray,
        ERRORTEMPLATE = '<div class="k-widget k-tooltip k-tooltip-validation" style="margin:0.5em"><span class="k-icon k-warning"> </span>' +
                    '${message}<div class="k-callout k-callout-n"></div></div>',
            CHANGE = "change";

    var specialRules = ["url", "email", "number", "date", "boolean"];

    function fieldType(field) {
        field = field != null ? field : "";
        return field.type || $.type(field) || "string";
    }

    function convertToValueBinding(container) {
        container.find(":input:not(:button, [" + kendo.attr("role") + "=upload], [" + kendo.attr("skip") + "]), select").each(function () {
            var bindAttr = kendo.attr("bind"),
                binding = this.getAttribute(bindAttr) || "",
                bindingName = this.type === "checkbox" ? "checked:" : "value:",
                fieldName = this.name;

            if (binding.indexOf(bindingName) === -1 && fieldName) {
                binding += (binding.length ? "," : "") + bindingName + fieldName;

                $(this).attr(bindAttr, binding);
            }
        });
    }

    function createAttributes(options) {
        var field = (options.model.fields || options.model)[options.field],
            type = fieldType(field),
            validation = field ? field.validation : {},
            ruleName,
                DATATYPE = kendo.attr("type"),
            BINDING = kendo.attr("bind"),
            rule,
            attr = {
                name: options.field
            };

        for (ruleName in validation) {
            rule = validation[ruleName];

            if (inArray(ruleName, specialRules) >= 0) {
                attr[DATATYPE] = ruleName;
            } else if (!isFunction(rule)) {
                attr[ruleName] = isPlainObject(rule) ? rule.value || ruleName : rule;
            }

            attr[kendo.attr(ruleName + "-msg")] = rule.message;
        }

        if (inArray(type, specialRules) >= 0) {
            attr[DATATYPE] = type;
        }

        attr[BINDING] = (type === "boolean" ? "checked:" : "value:") + options.field;

        return attr;
    }

    function convertItems(items) {
        var idx,
            length,
            item,
            value,
            text,
            result;

        if (items && items.length) {
            result = [];
            for (idx = 0, length = items.length; idx < length; idx++) {
                item = items[idx];
                text = item.text || item.value || item;
                value = item.value == null ? (item.text || item) : item.value;

                result[idx] = {
                    text: text, value: value
                };
            }
        }
        return result;
    }

    var editors = {
        "number": function (container, options) {
            var attr = createAttributes(options);
            $('<input type="text"/>').attr(attr).appendTo(container).kendoNumericTextBox({
                format: options.format
            });
            $('<span ' + kendo.attr("for") + '="' + options.field + '" class="k-invalid-msg"/>').hide().appendTo(container);
        },
        "date": function (container, options) {
            var attr = createAttributes(options);
            attr[kendo.attr("format")] = options.format;

            $('<input type="text"/>').attr(attr).appendTo(container).kendoDatePicker({
                format: options.format
            });
            $('<span ' + kendo.attr("for") + '="' + options.field + '" class="k-invalid-msg"/>').hide().appendTo(container);
        },
        "string": function (container, options) {
            var attr = createAttributes(options);

            $('<input type="text" class="k-input k-textbox"/>').attr(attr).appendTo(container);
        },
        "boolean": function (container, options) {
            var attr = createAttributes(options);
            $('<input type="checkbox" />').attr(attr).appendTo(container);
        },
        "values": function (container, options) {
            var attr = createAttributes(options);
            $('<select ' + kendo.attr("text-field") + '="text"' + kendo.attr("value-field") + '="value"' +
                kendo.attr("source") + "=\'" + kendo.stringify(convertItems(options.values)) +
                "\'" + kendo.attr("role") + '="dropdownlist"/>').attr(attr).appendTo(container);
            $('<span ' + kendo.attr("for") + '="' + options.field + '" class="k-invalid-msg"/>').hide().appendTo(container);
        }
    };

    var Editable = Widget.extend({
        init: function (element, options) {
            var that = this;

            Widget.fn.init.call(that, element, options);
            that._validateProxy = $.proxy(that._validate, that);
            that.refresh();
        },

        events: [CHANGE],

        options: {
            name: "Editable",
            editors: editors,
            clearContainer: true,
            errorTemplate: ERRORTEMPLATE
        },

        editor: function (field, modelField) {
            var that = this,
                editors = that.options.editors,
                isObject = isPlainObject(field),
    fieldName = isObject ? field.field : field,
    model = that.options.model || {
    },
    isValuesEditor = isObject && field.values,
    type = isValuesEditor ? "values" : fieldType(modelField),
    isCustomEditor = isObject && field.editor,
    editor = isCustomEditor ? field.editor : editors[type],
    container = that.element.find("[data-container-for=" + fieldName + "]");

            editor = editor ? editor : editors["string"];

            if (isCustomEditor && typeof field.editor === "string") {
                editor = function (container) {
                    container.append(field.editor);
                };
            }

            container = container.length ? container : that.element;
            editor(container, extend(true, {}, isObject ? field : {
                field: fieldName
            }, {
                model: model
            }));
        },

        _validate: function (e) {
            var that = this,
                isBoolean = typeof e.value === "boolean",
                input,
                preventChangeTrigger = that._validationEventInProgress,
                values = {
                };

            values[e.field] = e.value;

            input = $(':input[' + kendo.attr("bind") + '="' + (isBoolean ? 'checked:' : 'value:') + e.field + '"]', that.element);

            try {
                that._validationEventInProgress = true;

                if (!that.validatable.validateInput(input) || (!preventChangeTrigger && that.trigger(CHANGE, {
                    values: values
                }))) {
                    e.preventDefault();
                }

            } finally {
                that._validationEventInProgress = false;
            }
        },

        end: function () {
            return this.validatable.validate();
        },

        destroy: function () {
            this.options.model.unbind("set", this._validateProxy);
            kendo.unbind(this.element);

            this.element.removeData("kendoValidator")
                .removeData("kendoEditable");
        },

        refresh: function () {
            var that = this,
                idx,
                length,
                fields = that.options.fields || [],
                container = that.options.clearContainer ? that.element.empty() : that.element,
                model = that.options.model || {
                },
                rules = {
                };

            if (!$.isArray(fields)) {
                fields = [fields];
            }

            for (idx = 0, length = fields.length; idx < length; idx++) {
                var field = fields[idx],
                    isObject = isPlainObject(field),
                    fieldName = isObject ? field.field : field,
                    modelField = (model.fields || model)[fieldName],
                    validation = modelField ? (modelField.validation || {}) : {};

                for (var rule in validation) {
                    if (isFunction(validation[rule])) {
                        rules[rule] = validation[rule];
                    }
                }

                that.editor(field, modelField);
            }

            convertToValueBinding(container);

            kendo.bind(container, that.options.model);

            that.options.model.bind("set", that._validateProxy);

            that.validatable = container.kendoValidator({
                validateOnBlur: false,
                errorTemplate: that.options.errorTemplate || undefined,
                rules: rules
            }).data("kendoValidator");

            container.find(":input:visible:first").focus();
        }
    });

    ui.plugin(Editable);
})(jQuery);
(function ($, undefined) {
    var kendo = window.kendo,
        ui = kendo.ui,
        NUMERICTEXTBOX = "kendoNumericTextBox",
        DATEPICKER = "kendoDatePicker",
        proxy = $.proxy,
        POPUP = "kendoPopup",
        EQ = "Is equal to",
        NEQ = "Is not equal to",
        Widget = ui.Widget;

    var booleanTemplate =
            '<div>' +
                '<div class="k-filter-help-text">#=messages.info#</div>' +
                '<label>' +
                    '<input type="radio" data-#=ns#bind="checked: filters[0].value" value="true" name="filters[0].value"/>' +
                    '#=messages.isTrue#' +
                '</label>' +
                '<label>' +
                    '<input type="radio" data-#=ns#bind="checked: filters[0].value" value="false" name="filters[0].value"/>' +
                    '#=messages.isFalse#' +
                '</label>' +
                '<button type="submit" class="k-button">#=messages.filter#</button>' +
                '<button type="reset" class="k-button">#=messages.clear#</button>' +
            '</div>';

    var defaultTemplate =
            '<div>' +
                '<div class="k-filter-help-text">#=messages.info#</div>' +
                '<select data-#=ns#bind="value: filters[0].operator" data-#=ns#role="dropdownlist">' +
                    '#for(var op in operators){#' +
                        '<option value="#=op#">#=operators[op]#</option>' +
                    '#}#' +
                '</select>' +
                '#if(values){#' +
                    '<select data-#=ns#bind="value:filters[0].value" data-#=ns#text-field="text" data-#=ns#value-field="value" data-#=ns#source=\'#=kendo.stringify(values)#\' data-#=ns#role="dropdownlist" data-#=ns#option-label="#=messages.selectValue#">' +
                    '</select>' +
                '#}else{#' +
                    '<input data-#=ns#bind="value:filters[0].value" class="k-textbox" type="text" data-#=ns#type="#=type#"/>' +
                '#}#' +
                '#if(extra){#' +
                    '<select class="k-filter-and" data-#=ns#bind="value: logic" data-#=ns#role="dropdownlist">' +
                        '<option value="and">#=messages.and#</option>' +
                        '<option value="or">#=messages.or#</option>' +
                    '</select>' +
                    '<select data-#=ns#bind="value: filters[1].operator" data-#=ns#role="dropdownlist">' +
                        '#for(var op in operators){#' +
                            '<option value="#=op#">#=operators[op]#</option>' +
                        '#}#' +
                    '</select>' +
                    '#if(values){#' +
                        '<select data-#=ns#bind="value:filters[1].value" data-#=ns#text-field="text" data-#=ns#value-field="value" data-#=ns#source=\'#=kendo.stringify(values)#\' data-#=ns#role="dropdownlist" data-#=ns#option-label="#=messages.selectValue#">' +
                        '</select>' +
                    '#}else{#' +
                        '<input data-#=ns#bind="value: filters[1].value" class="k-textbox" type="text" data-#=ns#type="#=type#"/>' +
                    '#}#' +
                '#}#' +
                '<button type="submit" class="k-button">#=messages.filter#</button>' +
                '<button type="reset" class="k-button">#=messages.clear#</button>' +
            '</div>';

    function removeFiltersForField(expression, field) {
        if (expression.filters) {
            expression.filters = $.grep(expression.filters, function (filter) {
                removeFiltersForField(filter, field);
                if (filter.filters) {
                    return filter.filters.length;
                } else {
                    return filter.field != field;
                }
            });
        }
    }

    function convertItems(items) {
        var idx,
            length,
            item,
            value,
            text,
            result;

        if (items && items.length) {
            result = [];
            for (idx = 0, length = items.length; idx < length; idx++) {
                item = items[idx];
                text = item.text || item.value || item;
                value = item.value == null ? (item.text || item) : item.value;

                result[idx] = {
                    text: text, value: value
                };
            }
        }
        return result;
    }

    var FilterMenu = Widget.extend({
        init: function (element, options) {
            var that = this,
                type = "string",
                link,
                field,
                operators;

            Widget.fn.init.call(that, element, options);

            operators = options.operators || {};
            element = that.element;
            options = that.options;

            if (!options.appendToElement) {
                link = element.addClass("k-filterable").find(".k-grid-filter");

                if (!link[0]) {
                    //Adde by Amit Yadav
                    link = element.prepend('<a class="k-grid-filter"  href="#"><span  class="k-icon k-filter"/></a>').find(".k-grid-filter");
                }

                that._clickHandler = proxy(that._click, that);
                link.click(that._clickHandler);
            } else {
                that.link = $();
            }

            that.dataSource = options.dataSource.bind("change", proxy(that.refresh, that));

            that.field = options.field || element.attr(kendo.attr("field"));

            that.model = that.dataSource.reader.model;

            that._parse = function (value) {
                return value + "";
            };

            if (that.model && that.model.fields) {
                field = that.model.fields[that.field];

                if (field) {
                    type = field.type || "string";
                    that._parse = proxy(field.parse, field);
                }
            }

            if (options.values) {
                type = "enums";
            }

            operators = operators[type] || options.operators[type];

            that.form = $('<form class="k-filter-menu"/>');

            that.form.html(kendo.template(type === "boolean" ? booleanTemplate : defaultTemplate)({
                field: that.field,
                ns: kendo.ns,
                messages: options.messages,
                extra: options.extra,
                operators: operators,
                type: type,
                values: convertItems(options.values)
            }));

            if (!options.appendToElement) {
                that.popup = that.form[POPUP]({
                    anchor: link,
                    open: proxy(that._open, that)
                }).data(POPUP);

                that.link = link;
            } else {
                element.append(that.form);
                that.popup = that.element.closest(".k-popup").data(POPUP);
            }

            that.form
                .bind({
                    submit: proxy(that._submit, that),
                    reset: proxy(that._reset, that)
                })
                    .find("[" + kendo.attr("type") + "=number]")
                            .removeClass("k-textbox")
                            [NUMERICTEXTBOX]()
                    .end()
                .find("[" + kendo.attr("type") + "=date]")
                .removeClass("k-textbox")
                [DATEPICKER]();


            that.refresh();
        },

        refresh: function () {
            var that = this,
                expression = that.dataSource.filter() || {
                    filters: [], logic: "and"
                };

            //Updated by Amit Yadav From eq to Contains
            that.filterModel = kendo.observable({
                logic: "and",
                filters: [{
                    field: that.field, operator: "contains", value: ""
                }, {
                    field: that.field, operator: "contains", value: ""
                }]
            });

            kendo.bind(that.form, that.filterModel);

            if (that._bind(expression)) {
                that.link.addClass("k-state-active");
            } else {
                that.link.removeClass("k-state-active");
            }
        },

        destroy: function () {
            kendo.unbind(this.form);

            this.form.remove();

            this.form.removeData(POPUP);
            this.link.unbind("click", this._clickHandler);
            this.element.removeData("kendoFilterMenu");
        },

        _bind: function (expression) {
            var that = this,
        filters = expression.filters,
        idx,
        length,
        found = false,
        current = 0,
        filterModel = that.filterModel,
        currentFilter,
        filter;

            for (idx = 0, length = filters.length; idx < length; idx++) {
                filter = filters[idx];
                if (filter.field == that.field) {
                    filterModel.set("logic", expression.logic);

                    currentFilter = filterModel.filters[current];
                    currentFilter.set("value", filter.value);
                    currentFilter.set("operator", filter.operator);

                    current++;
                    found = true;
                } else if (filter.filters) {
                    found = found || that._bind(filter);
                }
            }

            return found;
        },

        _merge: function (expression) {
            var that = this,
        logic = expression.logic || "and",
        filters = expression.filters,
        filter,
        result = that.dataSource.filter() || {
            filters: [], logic: "and"
        },
        idx,
        length;

            removeFiltersForField(result, that.field);

            filters = $.grep(filters, function (filter) {
                return filter.value !== "";
            });

            for (idx = 0, length = filters.length; idx < length; idx++) {
                filter = filters[idx];
                filter.value = filter.value;
            }

            if (filters.length) {
                if (result.filters.length) {
                    expression.filters = filters;

                    if (result.logic !== "and") {
                        result.filters = [{ logic: result.logic, filters: result.filters }];
                        result.logic = "and";
                    }

                    if (filters.length > 1) {
                        result.filters.push(expression);
                    } else {
                        result.filters.push(filters[0]);
                    }
                } else {
                    result.filters = filters;
                    result.logic = logic;
                }
            }

            return result;
        },

        filter: function (expression) {
            expression = this._merge(expression);
            if (expression.filters.length) {
                //Added by Amit Yadav
                $(this.element).closest("div[data-role='grid']").find("a[rel='clearfilter']").show();
                this.dataSource.filter(expression);
            }
        },

        clear: function () {
            var that = this,
                expression = that.dataSource.filter() || {
                    filters: []
                };

            expression.filters = $.grep(expression.filters, function (filter) {
                if (filter.filters) {
                    filter.filters = $.grep(filter.filters, function (expr) {
                        return expr.field != that.field;
                    });

                    return filter.filters.length;
                }

                return filter.field != that.field;
            });

            if (!expression.filters.length) {
                expression = null;
            }
            //Added by Amit Yadav
            $(this.element).closest("div[data-role='grid']").find("a[rel='clearfilter']").hide();
            that.dataSource.filter(expression);
        },

        _submit: function (e) {
            var that = this;

            e.preventDefault();

            that.filterModel.filters = $.map(that.filterModel.filters, function (model) {
                if (model.value instanceof Date)
                    model.value = kendo.toString(model.value, "dd-MMM-yyyy");
                return model;

            });


            that.filter(that.filterModel.toJSON());

            that.popup.close();
        },

        _reset: function (e) {
            this.clear();
            this.popup.close();
        },

        _click: function (e) {
            e.preventDefault();
            e.stopPropagation();
            this.popup.toggle();
            //Added By Amit Yadav
            if (this.popup.visible()) {
                $(this.popup.element).find("input[type='text']:eq(0)").focus();
            }

        },

        _open: function () {
            var popup;

            $(".k-filter-menu").not(this.form).each(function () {
                popup = $(this).data(POPUP);
                if (popup) {
                    popup.close();
                }
            });
        },

        options: {
            name: "FilterMenu",
            extra: true,
            appendToElement: false,
            type: "string",
            operators: {
                string: {
                    contains: "Contains",
                    eq: EQ,
                    neq: NEQ,
                    startswith: "Starts with",
                    doesnotcontain: "Does not contain",
                    endswith: "Ends with"
                },
                number: {
                    contains: "Contains",
                    eq: EQ,
                    neq: NEQ,
                    gte: "Is greater than or equal to",
                    gt: "Is greater than",
                    lte: "Is less than or equal to",
                    lt: "Is less than"
                },
                date: {

                    eq: EQ,
                    neq: NEQ,
                    gte: "Is after or equal to",
                    gt: "Is after",
                    lte: "Is before or equal to",
                    lt: "Is before"
                },
                enums: {
                    eq: EQ,
                    neq: NEQ
                }
            },
            messages: {
                info: "Show items with value that:",
                isTrue: "is true",
                isFalse: "is false",
                filter: "Filter",
                clear: "Clear",
                and: "And",
                or: "Or",
                selectValue: "-Select value-"
            }
        }
    });

    ui.plugin(FilterMenu);
})(jQuery);
/**
 * @fileOverview Provides a PanelBar implementation which can be used to
 * display a hierarchical data as a multi-level, expandable panel bar.
 */

(function ($, undefined) {
    var kendo = window.kendo,
        ui = kendo.ui,
        extend = $.extend,
        each = $.each,
        template = kendo.template,
        Widget = ui.Widget,
        excludedNodesRegExp = /^(ul|a|div)$/i,
        IMG = "img",
        HREF = "href",
        LAST = "k-last",
        LINK = "k-link",
        ERROR = "error",
        CLICK = "click",
        ITEM = ".k-item",
        IMAGE = "k-image",
        FIRST = "k-first",
        EXPAND = "expand",
        SELECT = "select",
        CONTENT = "k-content",
        ACTIVATE = "activate",
        COLLAPSE = "collapse",
        CONTENTURL = "contentUrl",
        MOUSEENTER = "mouseenter",
        MOUSELEAVE = "mouseleave",
        CONTENTLOAD = "contentLoad",
        ACTIVECLASS = ".k-state-active",
        GROUPS = "> .k-panel",
        CONTENTS = "> .k-content",
        SELECTEDCLASS = ".k-state-selected",
        DISABLEDCLASS = ".k-state-disabled",
            HIGHLIGHTEDCLASS = ".k-state-highlighted",
            clickableItems = ITEM + ":not(.k-state-disabled) .k-link",
            disabledItems = ITEM + ".k-state-disabled .k-link",
            selectableItems = "> li > .k-state-selected, .k-panel > li > .k-state-selected",
            highlightableItems = "> .k-state-highlighted, .k-panel > .k-state-highlighted",
        defaultState = "k-state-default",
        VISIBLE = ":visible",
        EMPTY = ":empty",
        SINGLE = "single",

            templates = {
                content: template(
                "<div class='k-content'#= contentAttributes(data) #>#= content(item) #</div>"
            ),
                group: template(
                "<ul class='#= groupCssClass(group) #'#= groupAttributes(group) #>" +
                    "#= renderItems(data) #" +
            "</ul>"
        ),
                itemWrapper: template(
                    "<#= tag(item) # class='#= textClass(item, group) #'#= contentUrl(item) ##= textAttributes(item) #>" +
                    "#= image(item) ##= sprite(item) ##= text(item) #" +
                    "#= arrow(data) #" +
                "</#= tag(item) #>"
            ),
                item: template(
    "<li class='#= wrapperCssClass(group, item) #'>" +
            "#= itemWrapper(data) #" +
            "# if (item.items) { #" +
            "#= subGroup({ items: item.items, panelBar: panelBar, group: { expanded: item.expanded } }) #" +
            "# } #" +
        "</li>"
    ),
                image: template("<img class='k-image' alt='' src='#= imageUrl #' />"),
                arrow: template("<span class='#= arrowClass(item) #'></span>"),
                sprite: template("<span class='k-sprite #= spriteCssClass #'></span>"),
                empty: template("")
            },

                                rendering = {
                                    wrapperCssClass: function (group, item) {
                                        var result = "k-item",
                                            index = item.index;

                                        if (item.enabled === false) {
                                            result += " k-state-disabled";
                                        } else if (item.expanded === true) {
                                            result += " k-state-active";
                                        } else {
                                            result += " k-state-default";
                                        }

                                        if (index === 0) {
                                            result += " k-first";
                                        }

                                        if (index == group.length - 1) {
                                            result += " k-last";
                                        }

                                        return result;
                                    },
                                    textClass: function (item, group) {
                                        var result = LINK;

                                        if (group.firstLevel) {
                                            result += " k-header";
                                        }

                                        return result;
                                    },
                                    textAttributes: function (item) {
                                        return item.url ? " href='" + item.url + "'" : "";
                                    },
                                    arrowClass: function (item) {
                                        var result = "k-icon";

                                        result += item.expanded ? " k-i-arrow-n k-panelbar-collapse" : " k-i-arrow-s k-panelbar-expand";

                                        return result;
                                    },
                                    text: function (item) {
                                        return item.encoded === false ? item.text : kendo.htmlEncode(item.text);
                                    },
                                    tag: function (item) {
                                        return item.url ? "a" : "span";
                                    },
                                    groupAttributes: function (group) {
                                        return group.expanded !== true ? " style='display:none'" : "";
                                    },
                                    groupCssClass: function (group) {
                                        return "k-group k-panel";
                                    },
                                    contentAttributes: function (content) {
                                        return content.item.expanded !== true ? " style='display:none'" : "";
                                    },
                                    content: function (item) {
                                        return item.content ? item.content : item.contentUrl ? "" : "&nbsp;";
                                    },
                                    contentUrl: function (item) {
                                        return item.contentUrl ? kendo.attr("content-url") + '="' + item.contentUrl + '"' : "";
                                    }
                                };

    function updateItemClasses(item, panelElement) {
        item = $(item).addClass("k-item");

        item
            .children(IMG)
            .addClass(IMAGE);
        item
            .children("a")
            .addClass(LINK)
            .children(IMG)
            .addClass(IMAGE);
        item
            .filter(":not([disabled]):not([class*=k-state])")
            .addClass("k-state-default");
        item
            .filter("li[disabled]")
            .addClass("k-state-disabled")
            .removeAttr("disabled");
        item
            .filter(":not([class*=k-state])")
            .children("a")
            .filter(":focus")
            .parent()
            .addClass(ACTIVECLASS.substr(1));
        item
            .find(">div")
            .addClass(CONTENT)
            .css({ display: "none" });

        item.each(function () {
            var item = $(this);

            if (!item.children("." + LINK).length) {
                item
                    .contents()      // exclude groups, real links, templates and empty text nodes
                    .filter(function () {
                        return (!this.nodeName.match(excludedNodesRegExp) && !(this.nodeType == 3 && !$.trim(this.nodeValue)));
                    })
                    .wrapAll("<span class='" + LINK + "'/>");
            }
        });

        panelElement
            .find(" > li > ." + LINK)
            .addClass("k-header");
    }

    function updateArrow(items) {
        items = $(items);

        items.children(".k-link").children(".k-icon").remove();

        items
            .filter(":has(.k-panel),:has(.k-content)")
            .children(".k-link:not(:has([class*=k-i-arrow]))")
            .each(function () {
                var item = $(this),
                    parent = item.parent();

                item.append("<span class='k-icon " + (parent.hasClass(ACTIVECLASS.substr(1)) ? "k-i-arrow-n k-panelbar-collapse" : "k-i-arrow-s k-panelbar-expand") + "'/>");
            });
    }

    function updateFirstLast(items) {
        items = $(items);

        items.filter(".k-first:not(:first-child)").removeClass(FIRST);
        items.filter(".k-last:not(:last-child)").removeClass(LAST);
        items.filter(":first-child").addClass(FIRST);
        items.filter(":last-child").addClass(LAST);
    }

    function updateSelected(element, link) {
        element.find(selectableItems).removeClass(SELECTEDCLASS.substr(1));
        element.find(highlightableItems).removeClass(HIGHLIGHTEDCLASS.substr(1));

        link.addClass(SELECTEDCLASS.substr(1));
        link.parentsUntil(element, ITEM).filter(":has(.k-header)").addClass(HIGHLIGHTEDCLASS.substr(1));
    }

    var PanelBar = Widget.extend({
        init: function (element, options) {
            var that = this,
                content;

            Widget.fn.init.call(that, element, options);

            element = that.wrapper = that.element;
            options = that.options;

            if (options.dataSource) {
                that.element.empty();
                that.append(options.dataSource, element);
            }

            that._updateClasses();

            if (options.animation === false) {
                options.animation = {
                    expand: {
                        show: true, effects: {}
                    }, collapse: {
                        hide: true, effects: {
                        }
                    }
                };
            }

            element
                .delegate(clickableItems, CLICK, $.proxy(that._click, that))
                .delegate(clickableItems, MOUSEENTER + " " + MOUSELEAVE, that._toggleHover)
                .delegate(disabledItems, CLICK, false);

            if (options.contentUrls) {
                element.find("> .k-item")
                    .each(function (index, item) {
                        $(item).find("." + LINK).data(CONTENTURL, options.contentUrls[index]);
                    });
            }

            content = element.find("li" + ACTIVECLASS + " > ." + CONTENT);

            if (content.length > 0) {
                that.expand(content.parent(), false);
            }

            kendo.notify(that);
        },

        events: [
EXPAND,
COLLAPSE,
SELECT,
ACTIVATE,
ERROR,
CONTENTLOAD
        ],
        options: {
            name: "PanelBar",
            animation: {
                expand: {
                    effects: "expand:vertical",
                    duration: 200,
                    show: true
                },
                collapse: { // if collapse animation effects are defined, they will be used instead of expand.reverse
                    duration: 200
                }
            },
            expandMode: "multiple"
        },

        expand: function (element, useAnimation) {
            var that = this,
                animBackup = {};
            useAnimation = useAnimation !== false;
            element = this.element.find(element);

            element.each(function (index, item) {
                item = $(item);
                var groups = item.find(GROUPS).add(item.find(CONTENTS));

                if (!item.hasClass(DISABLEDCLASS) && groups.length > 0) {

                    if (that.options.expandMode == SINGLE && that._collapseAllExpanded(item)) {
                        return that;
                    }

                    element.find(HIGHLIGHTEDCLASS).removeClass(HIGHLIGHTEDCLASS.substr(1));
                    item.addClass(HIGHLIGHTEDCLASS.substr(1));

                    if (!useAnimation) {
                        animBackup = that.options.animation;
                        that.options.animation = {
                            expand: {
                                show: true, effects: {
                                }
                            }, collapse: {
                                hide: true, effects: {
                                }
                            }
                        };
                    }

                    if (!that._triggerEvent(EXPAND, item)) {
                        that._toggleItem(item, false, null);
                    }

                    if (!useAnimation) {
                        that.options.animation = animBackup;
                    }
                }
            });

            return that;
        },

        collapse: function (element, useAnimation) {
            var that = this,
                animBackup = {
                };
            useAnimation = useAnimation !== false;
            element = that.element.find(element);

            element.each(function (index, item) {
                item = $(item);
                var groups = item.find(GROUPS).add(item.find(CONTENTS));

                if (!item.hasClass(DISABLEDCLASS) && groups.is(VISIBLE)) {
                    item.removeClass(HIGHLIGHTEDCLASS.substr(1));

                    if (!useAnimation) {
                        animBackup = that.options.animation;
                        that.options.animation = {
                            expand: {
                                show: true, effects: {
                                }
                            }, collapse: {
                                hide: true, effects: {
                                }
                            }
                        };
                    }

                    if (!that._triggerEvent(COLLAPSE, item)) {
                        that._toggleItem(item, true, null);
                    }

                    if (!useAnimation) {
                        that.options.animation = animBackup;
                    }
                }

            });

            return that;
        },

        _toggleDisabled: function (element, enable) {
            element = this.element.find(element);
            element
            .toggleClass(defaultState, enable)
            .toggleClass(DISABLEDCLASS.substr(1), !enable);
        },

        select: function (element) {
            var that = this;
            element = that.element.find(element);

            if (arguments.length === 0) {
                return that.element.find(selectableItems).parent();
            }

            element.each(function (index, item) {
                item = $(item);
                var link = item.children("." + LINK);

                if (item.is(DISABLEDCLASS)) {
                    return that;
                }

                updateSelected(that.element, link);
            });

            return that;
        },


        enable: function (element, state) {
            this._toggleDisabled(element, state !== false);

            return this;
        },

        disable: function (element) {
            this._toggleDisabled(element, false);

            return this;
        },

        append: function (item, referenceItem) {
            referenceItem = this.element.find(referenceItem);

            var inserted = this._insert(item, referenceItem, referenceItem.length ? referenceItem.find(GROUPS) : null);

            each(inserted.items, function (idx) {
                inserted.group.append(this);

                var contents = inserted.contents[idx];
                if (contents) {
                    $(this).append(contents);
                }

                updateFirstLast(this);
            });

            updateArrow(referenceItem);
            updateFirstLast(inserted.group.find(".k-first, .k-last"));
            inserted.group.height("auto");

            return this;
        },

        insertBefore: function (item, referenceItem) {
            referenceItem = this.element.find(referenceItem);

            var inserted = this._insert(item, referenceItem, referenceItem.parent());

            each(inserted.items, function (idx) {
                referenceItem.before(this);

                var contents = inserted.contents[idx];
                if (contents) {
                    $(this).append(contents);
                }

                updateFirstLast(this);
            });

            updateFirstLast(referenceItem);
            inserted.group.height("auto");

            return this;
        },

        insertAfter: function (item, referenceItem) {
            referenceItem = this.element.find(referenceItem);

            var inserted = this._insert(item, referenceItem, referenceItem.parent());

            each(inserted.items, function (idx) {
                referenceItem.after(this);

                var contents = inserted.contents[idx];
                if (contents) {
                    $(this).append(contents);
                }

                updateFirstLast(this);
            });

            updateFirstLast(referenceItem);
            inserted.group.height("auto");

            return this;
        },

        remove: function (element) {
            element = this.element.find(element);

            var that = this,
                parent = element.parentsUntil(that.element, ITEM),
                group = element.parent("ul");

            element.remove();

            if (group && !group.hasClass("k-panelbar") && !group.children(ITEM).length) {
                group.remove();
            }

            if (parent.length) {
                parent = parent.eq(0);

                updateArrow(parent);
                updateFirstLast(parent);
            }

            return that;
        },


        reload: function (element) {
            var that = this;
            element = that.element.find(element);

            element.each(function () {
                var item = $(this);

                that._ajaxRequest(item, item.children("." + CONTENT), !item.is(VISIBLE));
            });
        },

        _insert: function (item, referenceItem, parent) {
            var that = this,
                items, contents = [];

            if (!referenceItem || !referenceItem.length) {
                parent = that.element;
            }

            var plain = $.isPlainObject(item),
                groupData = {
                    firstLevel: parent.hasClass("k-panelbar"),
                    expanded: parent.parent().hasClass("k-state-active"),
                    length: parent.children().length
                };

            if (referenceItem && !parent.length) {
                parent = $(PanelBar.renderGroup({
                    group: groupData
                })).appendTo(referenceItem);
            }

            if (plain || $.isArray(item)) { // is JSON
                items = $.map(plain ? [item] : item, function (value, idx) {
                    if (typeof value === "string") {
                        return $(value);
                    } else {
                        return $(PanelBar.renderItem({
                            group: groupData,
                            item: extend(value, {
                                index: idx
                            })
                        }));
                    }
                });
                contents = $.map(plain ? [item] : item, function (value, idx) {
                    if (value.content || value.contentUrl) {
                        return $(PanelBar.renderContent({
                            item: extend(value, {
                                index: idx
                            })
                        }));
                    } else {
                        return false;
                    }
                });
            } else {
                items = $(item);

                updateItemClasses(items, that.element);
            }

            return {
                items: items, group: parent, contents: contents
            };
        },

        _toggleHover: function (e) {
            var target = $(e.currentTarget);

            if (!target.parents("li" + DISABLEDCLASS).length) {
                target.toggleClass("k-state-hover", e.type == MOUSEENTER);
            }
        },

        _updateClasses: function () {
            var that = this;

            that.element.addClass("k-widget k-reset k-header k-panelbar");

            var panels = that.element
                                .find("li > ul")
                            .not(function () {
                                return $(this).parentsUntil(".k-panelbar", "div").length;
                            })
                            .addClass("k-group k-panel")
                            .add(that.element);

            var items = panels
                            .find("> li:not(" + ACTIVECLASS + ") > ul")
                            .css({
                                display: "none"
                            })
                            .end()
                                    .find("> li");

            items.each(function () {
                updateItemClasses(this, that.element);
            });

            updateArrow(items);
            updateFirstLast(items);
        },

        _click: function (e) {
            var that = this,
                target = $(e.currentTarget),
                element = that.element;

            if (target.parents("li" + DISABLEDCLASS).length) {
                return;
            }

            if (target.closest(".k-widget")[0] != element[0]) {
                return;
            }

            var link = target.closest("." + LINK),
                item = link.closest(ITEM);

            updateSelected(element, link);

            var contents = item.find(GROUPS).add(item.find(CONTENTS)),
                href = link.attr(HREF),
                isAnchor = link.data(CONTENTURL) || (href && (href.charAt(href.length - 1) == "#" || href.indexOf("#" + that.element[0].id + "-") != -1));

            if (contents.data("animating")) {
                return;
            }

            if (that._triggerEvent(SELECT, item)) {
                e.preventDefault();
            }

            if (isAnchor || contents.length) {
                e.preventDefault();
            } else {
                return;
            }

            if (that.options.expandMode == SINGLE) {
                if (that._collapseAllExpanded(item)) {
                    return;
                }
            }

            if (contents.length) {
                var visibility = contents.is(VISIBLE);

                if (!that._triggerEvent(!visibility ? EXPAND : COLLAPSE, item)) {
                    that._toggleItem(item, visibility, e);
                }
            }
        },

        _toggleItem: function (element, isVisible, e) {
            var that = this,
                        childGroup = element.find(GROUPS);

            if (childGroup.length) {

                this._toggleGroup(childGroup, isVisible);

                if (e) {
                    e.preventDefault();
                }
            } else {

                var content = element.find("> ." + CONTENT);

                if (content.length) {
                    if (e) {
                        e.preventDefault();
                    }

                    if (!content.is(EMPTY)) {
                        that._toggleGroup(content, isVisible);
                    } else {
                        that._ajaxRequest(element, content, isVisible);
                    }
                }
            }
        },

        _toggleGroup: function (element, visibility) {
            var that = this,
                animationSettings = that.options.animation,
                animation = animationSettings.expand,
        collapse = extend({
        }, animationSettings.collapse),
            hasCollapseAnimation = collapse && "effects" in collapse;

            if (element.is(VISIBLE) != visibility) {
                return;
            }

            element
            .parent()
    .toggleClass(defaultState, visibility)
    .toggleClass(ACTIVECLASS.substr(1), !visibility)
    .find("> .k-link > .k-icon")
                .toggleClass("k-i-arrow-n", !visibility)
        .toggleClass("k-panelbar-collapse", !visibility)
        .toggleClass("k-i-arrow-s", visibility)
        .toggleClass("k-panelbar-expand", visibility);

            if (visibility) {
                animation = extend(hasCollapseAnimation ? collapse
                                    : extend({
                                        reverse: true
                                    }, animation), {
                                        show: false, hide: true
                                    });
            } else {
                animation = extend({
                    complete: function (element) {
                        that._triggerEvent(ACTIVATE, element.closest(ITEM));
                    }
                }, animation);
            }

            element
            .kendoStop(true, true)
            .kendoAnimate(animation);
        },

        _collapseAllExpanded: function (item) {
            var that = this, children, stopExpand = false;

            if (item.find("> ." + LINK).hasClass("k-header")) {
                var groups = item.find(GROUPS).add(item.find(CONTENTS));

                if (groups.is(VISIBLE)) {
                    stopExpand = true;
                }

                if (!(groups.is(VISIBLE) || groups.length === 0)) {
                    children = $(that.element).children();
                    children.find(GROUPS).add(children.find(CONTENTS))
                            .filter(function () {
                                return $(this).is(VISIBLE);
                            })
                    .each(function (index, content) {
                        content = $(content);

                        stopExpand = that._triggerEvent(COLLAPSE, content.closest(ITEM));
                        if (!stopExpand) {
                            that._toggleGroup(content, true);
                        }
                    });
                }

                return stopExpand;
            }
        },

        _ajaxRequest: function (element, contentElement, isVisible) {

            var that = this,
                statusIcon = element.find(".k-panelbar-collapse, .k-panelbar-expand"),
                link = element.find("." + LINK),
                loadingIconTimeout = setTimeout(function () {
                    statusIcon.addClass("k-loading");
                }, 100),
            data = {};

            $.ajax({
                type: "GET",
                cache: false,
                url: link.data(CONTENTURL) || link.attr(HREF),
                dataType: "html",
                data: data,

                error: function (xhr, status) {
                    statusIcon.removeClass("k-loading");
                    if (that.trigger(ERROR, {
                        xhr: xhr, status: status
                    })) {
                        this.complete();
                    }
                },

                complete: function () {
                    clearTimeout(loadingIconTimeout);
                    statusIcon.removeClass("k-loading");
                },

                success: function (data, textStatus) {
                    contentElement.html(data);
                    that._toggleGroup(contentElement, isVisible);

                    that.trigger(CONTENTLOAD, { item: element[0], contentElement: contentElement[0] });
                }
            });
        },

        _triggerEvent: function (eventName, element) {
            var that = this;

            return that.trigger(eventName, {
                item: element[0]
            });
        }
    });

    // client-side rendering
    extend(PanelBar, {
        renderItem: function (options) {
            options = extend({ panelBar: {}, group: {} }, options);

            var empty = templates.empty,
                item = options.item;

            return templates.item(extend(options, {
                image: item.imageUrl ? templates.image : empty,
                sprite: item.spriteCssClass ? templates.sprite : empty,
                itemWrapper: templates.itemWrapper,
                arrow: item.items || item.content || item.contentUrl ? templates.arrow : empty,
                subGroup: PanelBar.renderGroup
            }, rendering));
        },

        renderGroup: function (options) {
            return templates.group(extend({
                renderItems: function (options) {
                    var html = "",
                        i = 0,
                        items = options.items,
                        len = items ? items.length : 0,
                        group = extend({ length: len }, options.group);

                    for (; i < len; i++) {
                        html += PanelBar.renderItem(extend(options, {
                            group: group,
                            item: extend({ index: i }, items[i])
                        }));
                    }

                    return html;
                }
            }, options, rendering));
        },

        renderContent: function (options) {
            return templates.content(extend(options, rendering));
        }
    });

    kendo.ui.plugin(PanelBar);

})(jQuery);

(function ($, undefined) {
    var kendo = window.kendo,
        ui = kendo.ui,
        map = $.map,
        each = $.each,
            trim = $.trim,
            extend = $.extend,
            template = kendo.template,
            Widget = ui.Widget,
        excludedNodesRegExp = /^(a|div)$/i,
        IMG = "img",
        HREF = "href",
        LINK = "k-link",
        LAST = "k-last",
        CLICK = "click",
            ERROR = "error",
            EMPTY = ":empty",
            IMAGE = "k-image",
            FIRST = "k-first",
            SELECT = "select",
        ACTIVATE = "activate",
        CONTENT = "k-content",
        CONTENTURL = "contentUrl",
        MOUSEENTER = "mouseenter",
        MOUSELEAVE = "mouseleave",
        CONTENTLOAD = "contentLoad",
        CLICKABLEITEMS = ".k-tabstrip-items > .k-item:not(.k-state-disabled)",
        HOVERABLEITEMS = ".k-tabstrip-items > .k-item:not(.k-state-disabled):not(.k-state-active)",
        DISABLEDLINKS = ".k-tabstrip-items > .k-state-disabled .k-link",
        DISABLEDSTATE = "k-state-disabled",
        DEFAULTSTATE = "k-state-default",
        ACTIVESTATE = "k-state-active",
        HOVERSTATE = "k-state-hover",
        TABONTOP = "k-tab-on-top",

        templates = {
            content: template(
        "<div class='k-content'#= contentAttributes(data) #>#= content(item) #</div>"
    ),
            itemWrapper: template(
        "<#= tag(item) # class='k-link'#= contentUrl(item) ##= textAttributes(item) #>" +
                "#= image(item) ##= sprite(item) ##= text(item) #" +
            "</#= tag(item) #>"
        ),
            item: template(
            "<li class='#= wrapperCssClass(group, item) #'>" +
                "#= itemWrapper(data) #" +
            "</li>"
        ),
            image: template("<img class='k-image' alt='' src='#= imageUrl #' />"),
            sprite: template("<span class='k-sprite #= spriteCssClass #'></span>"),
            empty: template("")
        },

        rendering = {
            wrapperCssClass: function (group, item) {
                var result = "k-item",
                index = item.index;

                if (item.enabled === false) {
                    result += " k-state-disabled";
                } else {
                    result += " k-state-default";
                }

                if (index === 0) {
                    result += " k-first";
                }

                if (index == group.length - 1) {
                    result += " k-last";
                }

                return result;
            },
            textAttributes: function (item) {
                return item.url ? " href='" + item.url + "'" : "";
            },
            text: function (item) {
                return item.encoded === false ? item.text : kendo.htmlEncode(item.text);
            },
            tag: function (item) {
                return item.url ? "a" : "span";
            },
            contentAttributes: function (content) {
                return content.active !== true ? " style='display:none'" : "";
            },
            content: function (item) {
                return item.content ? item.content : item.contentUrl ? "" : "&nbsp;";
            },
            contentUrl: function (item) {
                return item.contentUrl ? kendo.attr("content-url") + '="' + item.contentUrl + '"' : "";
            }
        };

    function updateTabClasses(tabs) {
        tabs.children(IMG)
            .addClass(IMAGE);

        tabs.children("a")
            .addClass(LINK)
                .children(IMG)
                .addClass(IMAGE);

        tabs.filter(":not([disabled]):not([class*=k-state-disabled])")
            .addClass(DEFAULTSTATE);

        tabs.filter("li[disabled]")
            .addClass(DISABLEDSTATE)
            .removeAttr("disabled");

        tabs.filter(":not([class*=k-state])")
            .children("a")
            .filter(":focus")
            .parent()
            .addClass(ACTIVESTATE + " " + TABONTOP);

        tabs.each(function () {
            var item = $(this);

            if (!item.children("." + LINK).length) {
                item
                    .contents()      // exclude groups, real links, templates and empty text nodes
                    .filter(function () {
                        return (!this.nodeName.match(excludedNodesRegExp) && !(this.nodeType == 3 && !trim(this.nodeValue)));
                    })
                    .wrapAll("<a class='" + LINK + "'/>");
            }
        });

    }

    function updateFirstLast(tabGroup) {
        var tabs = tabGroup.children(".k-item");

        tabs.filter(".k-first:not(:first-child)").removeClass(FIRST);
        tabs.filter(".k-last:not(:last-child)").removeClass(LAST);
        tabs.filter(":first-child").addClass(FIRST);
        tabs.filter(":last-child").addClass(LAST);
    }

    var TabStrip = Widget.extend({
        init: function (element, options) {
            var that = this;

            that._animations(options);

            Widget.fn.init.call(that, element, options);

            if (that.element.is("ul")) {
                that.wrapper = that.element.wrapAll("<div />").parent();
            } else {
                that.wrapper = that.element;
            }

            options = that.options;

            that.wrapper
                .delegate(CLICKABLEITEMS, CLICK, $.proxy(that._click, that))
                .delegate(HOVERABLEITEMS, MOUSEENTER + " " + MOUSELEAVE, that._toggleHover)
                .delegate(DISABLEDLINKS, CLICK, false);

            that._updateClasses();

            that._dataSource();

            if (options.dataSource) {
                that.dataSource.fetch();
            }

            if (that.options.contentUrls) {
                that.wrapper.find(".k-tabstrip-items > .k-item")
                        .each(function (index, item) {
                            $(item).find(">." + LINK).data(CONTENTURL, that.options.contentUrls[index]);
                        });
            }

            var selectedItems = that.wrapper.find("li." + ACTIVESTATE),
                        content = $(that.contentElement(selectedItems.parent().children().index(selectedItems)));

            if (content.length > 0 && content[0].childNodes.length === 0) {
                that.activateTab(selectedItems.eq(0));
            }

            kendo.notify(that);
        },

        _dataSource: function () {
            var that = this;

            if (that.dataSource && that._refreshHandler) {
                that.dataSource.unbind("change", that._refreshHandler);
            } else {
                that._refreshHandler = $.proxy(that.refresh, that);
            }

            that.dataSource = kendo.data.DataSource.create(that.options.dataSource)
                                .bind("change", that._refreshHandler);
        },

        setDataSource: function (dataSource) {
            this.options.dataSource = dataSource;
            this._dataSource();
            dataSource.fetch();
        },

        _animations: function (options) {
            if (options && ("animation" in options) && !options.animation) {
                options.animation = {
                    open: {
                        effects: {
                        }, show: true
                    }, close: {
                        effects: {}
                    }
                }; // No animation
            }
        },

        refresh: function (e) {
            var that = this,
            options = that.options,
            text = kendo.getter(options.dataTextField),
            content = kendo.getter(options.dataContentField),
                        contentUrl = kendo.getter(options.dataContentUrlField),
            image = kendo.getter(options.dataImageUrlField),
            url = kendo.getter(options.dataUrlField),
                sprite = kendo.getter(options.dataSpriteCssClass),
                idx,
            tabs = [],
            tab,
            action,
            view = that.dataSource.view(),
            length;


            e = e || {
            };
            action = e.action;

            if (action) {
                view = e.items;
            }

            for (idx = 0, length = view.length; idx < length; idx++) {
                tab = {
                    text: text(view[idx])
                };

                if (options.dataContentField) {
                    tab.content = content(view[idx]);
                }

                if (options.dataContentUrlField) {
                    tab.contentUrl = contentUrl(view[idx]);
                }

                if (options.dataUrlField) {
                    tab.url = url(view[idx]);
                }

                if (options.dataImageUrlField) {
                    tab.imageUrl = image(view[idx]);
                }

                if (options.dataSpriteCssClass) {
                    tab.spriteCssClass = sprite(view[idx]);
                }

                tabs[idx] = tab;
            }

            if (e.action == "add") {
                if (e.index < that.tabGroup.children().length) {
                    that.insertBefore(tabs, that.tabGroup.children().eq(e.index));
                } else {
                    that.append(tabs);
                }
            } else if (e.action == "remove") {
                for (idx = 0; idx < view.length; idx++) {
                    that.remove(e.index);
                }
            } else if (e.action == "itemchange") {
                idx = that.dataSource.view().indexOf(view[0]);
                if (e.field === options.dataTextField) {
                    that.tabGroup.children().eq(idx).find(".k-link").text(view[0].get(e.field));
                }
            } else {
                that.trigger("dataBinding");
                that.append(tabs);
                that.trigger("dataBound");
            }
        },

        value: function (value) {
            var that = this;

            if (value !== undefined) {
                if (value != that.value()) {
                    that.tabGroup.children().each(function () {
                        if ($.trim($(this).text()) == value) {
                            that.select(this);
                        }
                    });
                }
            } else {
                return that.select().text();
            }
        },

        items: function () {
            return this.tabGroup[0].children;
        },

        setOptions: function (options) {
            var animation = this.options.animation;

            this._animations(options);

            options.animation = extend(true, animation, options.animation);

            Widget.fn.setOptions.call(this, options);
        },

        events: [

SELECT,

ACTIVATE,

ERROR,

CONTENTLOAD,
"change",
"dataBinding",
"dataBound"
        ],

        options: {
            name: "TabStrip",
            dataTextField: "",
            dataContentField: "",
            dataImageUrlField: "",
            dataUrlField: "",
            dataSpriteCssClass: "",
            dataContentUrlField: "",
            animation: {
                open: {
                    effects: "expand:vertical fadeIn",
                    duration: 200,
                    show: true
                },
                close: { // if close animation effects are defined, they will be used instead of open.reverse
                    duration: 200
                }
            },
            collapsible: false
        },

        select: function (element) {
            var that = this;

            if (arguments.length === 0) {
                return that.wrapper.find("li." + ACTIVESTATE);
            }

            if (!isNaN(element)) {
                element = that.tabGroup.children().get(element);
            }

            element = that.element.find(element);
            $(element).each(function (index, item) {
                item = $(item);
                if (!item.hasClass(ACTIVESTATE) && !that.trigger(SELECT, { item: item[0], contentElement: that.contentElement(item.index()) })) {
                    that.activateTab(item);
                }
            });

            return that;
        },

        enable: function (element, state) {
            this._toggleDisabled(element, state !== false);

            return this;
        },

        disable: function (element) {
            this._toggleDisabled(element, false);

            return this;
        },
        reload: function (element) {
            element = this.tabGroup.find(element);
            var that = this;

            element.each(function () {
                var item = $(this),
        contentUrl = item.find("." + LINK).data(CONTENTURL);

                if (contentUrl) {
                    that.ajaxRequest(item, $(that.contentElement(item.index())), null, contentUrl);
                }
            });

            return that;
        },

        append: function (tab) {
            var that = this,
                inserted = that._create(tab);

            each(inserted.tabs, function (idx) {
                that.tabGroup.append(this);
                that.wrapper.append(inserted.contents[idx]);
            });

            updateFirstLast(that.tabGroup);
            that._updateContentElements();

            return that;
        },
        insertBefore: function (tab, referenceTab) {
            var that = this,
                inserted = that._create(tab),
                referenceContent = $(that.contentElement(referenceTab.index()));

            each(inserted.tabs, function (idx) {
                referenceTab.before(this);
                referenceContent.before(inserted.contents[idx]);
            });

            updateFirstLast(that.tabGroup);
            that._updateContentElements();

            return that;
        },

        insertAfter: function (tab, referenceTab) {
            var that = this,
                inserted = that._create(tab),
                referenceContent = $(that.contentElement(referenceTab.index()));

            each(inserted.tabs, function (idx) {
                referenceTab.after(this);
                referenceContent.after(inserted.contents[idx]);
            });

            updateFirstLast(that.tabGroup);
            that._updateContentElements();

            return that;
        },

        remove: function (element) {
            var that = this,
        type = typeof element,
        content;

            if (type === "string") {
                element = that.tabGroup.find(element);
            } else if (type === "number") {
                element = that.tabGroup.children().eq(element);
            }

            content = $(that.contentElement(element.index()));

            content.remove();
            element.remove();

            that._updateContentElements();

            return that;
        },

        _create: function (tab) {
            var plain = $.isPlainObject(tab),
                that = this, tabs, contents;

            if (plain || $.isArray(tab)) {
                tab = $.isArray(tab) ? tab : [tab];

                tabs = map(tab, function (value, idx) {
                    return $(TabStrip.renderItem({
                        group: that.tabGroup,
                        item: extend(value, {
                            index: idx
                        })
                    }));
                });

                contents = map(tab, function (value, idx) {
                    if (value.content || value.contentUrl) {
                        return $(TabStrip.renderContent({
                            item: extend(value, {
                                index: idx
                            })
                        }));
                    }
                });
            } else {
                tabs = $(tab);
                contents = $("<div class='" + CONTENT + "'/>");

                updateTabClasses(tabs);
            }

            return {
                tabs: tabs, contents: contents
            };
        },

        _toggleDisabled: function (element, enable) {
            element = this.tabGroup.find(element);
            element.each(function () {
                $(this)
                .toggleClass(DEFAULTSTATE, enable)
                .toggleClass(DISABLEDSTATE, !enable);
            });
        },

        _updateClasses: function () {
            var that = this,
                tabs, activeItem, activeTab;

            that.wrapper.addClass("k-widget k-header k-tabstrip");

            that.tabGroup = that.wrapper.children("ul").addClass("k-tabstrip-items k-reset");

            if (!that.tabGroup[0]) {
                that.tabGroup = $("<ul class='k-tabstrip-items k-reset'/>").appendTo(that.wrapper);
            }

            tabs = that.tabGroup.find("li").addClass("k-item");

            if (tabs.length) {
                activeItem = tabs.filter("." + ACTIVESTATE).index();
                activeTab = activeItem >= 0 ? activeItem : undefined;

                that.tabGroup // Remove empty text nodes
                            .contents()
                            .filter(function () {
                                return (this.nodeType == 3 && !trim(this.nodeValue));
                            })
                    .remove();
            }

            tabs.eq(activeItem).addClass(TABONTOP);

            that.contentElements = that.wrapper.children("div");

            that.contentElements
                .addClass(CONTENT)
                .eq(activeTab)
                .addClass(ACTIVESTATE)
                .css({
                    display: "block"
                });

            if (tabs.length) {
                updateTabClasses(tabs);

                updateFirstLast(that.tabGroup);
                that._updateContentElements();
            }
        },

        _updateContentElements: function () {
            var that = this,
                contentUrls = that.options.contentUrls || [],
                tabStripID = that.element.attr("id"),
                contentElements = that.wrapper.children("div");

            that.tabGroup.find(".k-item").each(function (idx) {
                var currentContent = contentElements.eq(idx),
                    id = tabStripID + "-" + (idx + 1);

                if (!currentContent.length && contentUrls[idx]) {
                    $("<div id='" + id + "' class='" + CONTENT + "'/>").appendTo(that.wrapper);
                } else {
                    currentContent.attr("id", id);
                }
            });

            that.contentElements = that.contentAnimators = that.wrapper.children("div"); // refresh the contents

            if (kendo.support.touch && kendo.mobile.ui.Scroller) {
                kendo.touchScroller(that.contentElements);
                that.contentElements = that.contentElements.children(".km-scroll-container");
            }
        },

        _toggleHover: function (e) {
            $(e.currentTarget).toggleClass(HOVERSTATE, e.type == MOUSEENTER);
        },

        _click: function (e) {
            var that = this,
                item = $(e.currentTarget),
                link = item.find("." + LINK),
                href = link.attr(HREF),
                collapse = that.options.collapsible,
                content = $(that.contentElement(item.index()));

            if (item.closest(".k-widget")[0] != that.wrapper[0]) {
                return;
            }

            if (item.is("." + DISABLEDSTATE + (!collapse ? ",." + ACTIVESTATE : ""))) {
                e.preventDefault();
                return;
            }

            if (that.tabGroup.children("[data-animating], [data-in-request]").length) {
                return;
            }

            if (that.trigger(SELECT, {
                item: item[0], contentElement: content[0]
            })) {
                e.preventDefault();
            } else {
                var isAnchor = link.data(CONTENTURL) || (href && (href.charAt(href.length - 1) == "#" || href.indexOf("#" + that.element[0].id + "-") != -1));

                if (!href || isAnchor) {
                    e.preventDefault();
                } else {
                    return;
                }

                if (collapse && item.is("." + ACTIVESTATE)) {
                    that.deactivateTab(item);
                    e.preventDefault();

                    return;
                }

                if (that.activateTab(item)) {
                    e.preventDefault();
                }
            }
        },
        deactivateTab: function (item) {
            var that = this,
        animationSettings = that.options.animation,
        animation = animationSettings.open,
        close = extend({}, animationSettings.close),
        hasCloseAnimation = close && "effects" in close;
            item = that.tabGroup.find(item);

            close = extend(hasCloseAnimation ? close : extend({
                reverse: true
            }, animation), {
                show: false, hide: true
            });

            if (kendo.size(animation.effects)) {
                item.kendoAddClass(DEFAULTSTATE, {
                    duration: animation.duration
                });
                item.kendoRemoveClass(ACTIVESTATE, {
                    duration: animation.duration
                });
            } else {
                item.addClass(DEFAULTSTATE);
                item.removeClass(ACTIVESTATE);
            }

            that.contentAnimators
                    .filter("." + ACTIVESTATE)
                    .kendoStop(true, true)
.kendoAnimate(close)
                    .removeClass(ACTIVESTATE);
        },
        activateTab: function (item) {
            item = this.tabGroup.find(item);

            var that = this,
                animationSettings = that.options.animation,
                animation = animationSettings.open,
                close = extend({}, animationSettings.close),
                hasCloseAnimation = close && "effects" in close,
                neighbours = item.parent().children(),
                oldTab = neighbours.filter("." + ACTIVESTATE),
                itemIndex = neighbours.index(item);

            close = extend(hasCloseAnimation ? close : extend({ reverse: true }, animation), {
                show: false, hide: true
            });
            // deactivate previously active tab
            if (kendo.size(animation.effects)) {
                oldTab.kendoRemoveClass(ACTIVESTATE, {
                    duration: close.duration
                });
                item.kendoRemoveClass(HOVERSTATE, {
                    duration: close.duration
                });
            } else {
                oldTab.removeClass(ACTIVESTATE);
                item.removeClass(HOVERSTATE);
            }

            // handle content elements
            var contentAnimators = that.contentAnimators;

            if (contentAnimators.length === 0) {
                oldTab.removeClass(TABONTOP);
                item.addClass(TABONTOP) // change these directly to bring the tab on top.
                    .css("z-index");

                item.addClass(ACTIVESTATE);

                that.trigger("change");

                return false;
            }

            var visibleContents = contentAnimators.filter("." + ACTIVESTATE);

            // find associated content element
            var content = $(that.contentElement(itemIndex));

            if (content.length === 0) {
                visibleContents
                    .removeClass(ACTIVESTATE)
                    .kendoStop(true, true)
                    .kendoAnimate(close);
                return false;
            }

            item.attr("data-animating", true);

            var isAjaxContent = (item.children("." + LINK).data(CONTENTURL) || false) && content.is(EMPTY),
                showContentElement = function () {
                    oldTab.removeClass(TABONTOP);
                    item.addClass(TABONTOP) // change these directly to bring the tab on top.
                        .css("z-index");

                    if (kendo.size(animation.effects)) {
                        oldTab.kendoAddClass(DEFAULTSTATE, {
                            duration: animation.duration
                        });
                        item.kendoAddClass(ACTIVESTATE, {
                            duration: animation.duration
                        });
                    } else {
                        oldTab.addClass(DEFAULTSTATE);
                        item.addClass(ACTIVESTATE);
                    }

                    content
                    .closest(".k-content")
                    .addClass(ACTIVESTATE)
                    .kendoStop(true, true)
                    .kendoAnimate(extend({
                        init: function () {
                            that.trigger(ACTIVATE, {
                                item: item[0], contentElement: content[0]
                            });
                        }
                    }, animation, {
                        complete: function () {
                            item.removeAttr("data-animating");
                        }
                    }));
                },
                showContent = function () {
                    if (!isAjaxContent) {
                        showContentElement();
                        that.trigger("change");
                    } else {
                        that.ajaxRequest(item, content, function () {
                            showContentElement();
                            that.trigger("change");
                        });
                    }
                };

            visibleContents
                    .removeClass(ACTIVESTATE);

            if (visibleContents.length) {
                visibleContents
                    .kendoStop(true, true)
                            .kendoAnimate(extend({
                                complete: showContent
                            }, close));
            } else {
                showContent();
            }

            return true;
        },

        contentElement: function (itemIndex) {
            if (isNaN(itemIndex - 0)) {
                return;
            }

            var contentElements = this.contentElements,
                idTest = new RegExp("-" + (itemIndex + 1) + "$");

            for (var i = 0, len = contentElements.length; i < len; i++) {
                if (idTest.test(contentElements.closest(".k-content")[i].id)) {
                    return contentElements[i];
                }
            }
        },

        ajaxRequest: function (element, content, complete, url) {
            element = this.tabGroup.find(element);
            if (element.find(".k-loading").length) {
                return;
            }

            var that = this,
                link = element.find("." + LINK),
                data = {},
                statusIcon = null,
                loadingIconTimeout = setTimeout(function () {
                    statusIcon = $("<span class='k-icon k-loading'/>").prependTo(link);
                }, 100);

            element.attr("data-in-request", true);

            $.ajax({
                type: "GET",
                cache: false,
                url: url || link.data(CONTENTURL) || link.attr(HREF),
                dataType: "html",
                data: data,

                error: function (xhr, status) {
                    element.removeAttr("data-animating");
                    if (that.trigger("error", {
                        xhr: xhr, status: status
                    })) {
                        this.complete();
                    }
                },

                complete: function () {
                    element.removeAttr("data-in-request");

                    clearTimeout(loadingIconTimeout);
                    if (statusIcon !== null) {
                        statusIcon.remove();
                    }
                },

                success: function (data, textStatus) {
                    content.html(data);

                    if (complete) {
                        complete.call(that, content);
                    }

                    that.trigger(CONTENTLOAD, { item: element[0], contentElement: content[0] });
                }
            });
        }
    });

    // client-side rendering
    extend(TabStrip, {
        renderItem: function (options) {
            options = extend({
                tabStrip: {}, group: {
                }
            }, options);

            var empty = templates.empty,
                item = options.item;

            return templates.item(extend(options, {
                image: item.imageUrl ? templates.image : empty,
                sprite: item.spriteCssClass ? templates.sprite : empty,
                itemWrapper: templates.itemWrapper
            }, rendering));
        },

        renderContent: function (options) {
            return templates.content(extend(options, rendering));
        }
    });

    kendo.ui.plugin(TabStrip);

})(jQuery);
/**
 * @fileOverview Provides a TimePicker implementation which allows the end user to select a time value from a list of
 * predefined values or to type a new value.
 */

(function ($, undefined) {
    var kendo = window.kendo,
        touch = kendo.support.touch,
        keys = kendo.keys,
        extractFormat = kendo._extractFormat,
        ui = kendo.ui,
        Widget = ui.Widget,
        OPEN = "open",
        CLOSE = "close",
        CHANGE = "change",
        CLICK = (touch ? "touchend" : "click"),
        DEFAULT = "k-state-default",
        DISABLED = "disabled",
        LI = "li",
        SPAN = "<span/>",
        FOCUSED = "k-state-focused",
        HOVER = "k-state-hover",
        HOVEREVENTS = "mouseenter mouseleave",
        MOUSEDOWN = "mousedown",
        MS_PER_MINUTE = 60000,
        MS_PER_DAY = 86400000,
        SELECTED = "k-state-selected",
        STATEDISABLED = "k-state-disabled",
        isArray = $.isArray,
        extend = $.extend,
        proxy = $.proxy,
        DATE = Date,
        TODAY = new DATE();

    TODAY = new DATE(TODAY.getFullYear(), TODAY.getMonth(), TODAY.getDate(), 0, 0, 0);

    var TimeView = function (options) {
        var that = this;

        that.options = options;

        that.ul = $('<ul unselectable="on" class="k-list k-reset"/>')
            .css({ overflow: kendo.support.touch ? "" : "auto" })
            .delegate(LI, CLICK, proxy(that._click, that))
            .delegate(LI, "mouseenter", function () {
                $(this).addClass(HOVER);
            })
                    .delegate(LI, "mouseleave", function () {
                        $(this).removeClass(HOVER);
                    });

        that.list = $("<div class='k-list-container'/>")
                    .append(that.ul)
                    .mousedown(preventDefault);

        that._popup();

        that.template = kendo.template('<li class="k-item" unselectable="on">#=data#</li>', {
            useWithBlock: false
        });
    };

    TimeView.prototype = {
        current: function (candidate) {
            var that = this;

            if (candidate !== undefined) {
                if (that._current) {
                    that._current.removeClass(SELECTED);
                }

                if (candidate) {
                    candidate = $(candidate);
                    candidate.addClass(SELECTED);
                    that.scroll(candidate[0]);
                }

                that._current = candidate;
            } else {
                return that._current;
            }
        },

        close: function () {
            this.popup.close();
        },

        open: function () {
            var that = this;

            if (!that.ul[0].firstChild) {
                that.bind();
            }

            that.popup.open();
            if (that._current) {
                that.scroll(that._current[0]);
            }
        },

        dataBind: function (dates) {
            var that = this,
                options = that.options,
format = options.format,
toString = kendo.toString,
template = that.template,
length = dates.length,
idx = 0,
date,
html = "";

            for (; idx < length; idx++) {
                date = dates[idx];

                if (isInRange(date, options.min, options.max)) {
                    html += template(toString(date, format, options.culture));
                }
            }

            that._html(html, length);
        },

        refresh: function () {
            var that = this,
    options = that.options,
    format = options.format,
    offset = dst(),
    ignoreDST = offset < 0,
    min = options.min,
    max = options.max,
    msMin = getMilliseconds(min),
    msMax = getMilliseconds(max),
    msInterval = options.interval * MS_PER_MINUTE,
    toString = kendo.toString,
    template = that.template,
    start = new DATE(min),
    idx = 0, length,
    html = "";

            if (ignoreDST) {
                length = (MS_PER_DAY + (offset * MS_PER_MINUTE)) / msInterval;
            } else {
                length = MS_PER_DAY / msInterval;
            }


            if (msMin != msMax) {
                if (msMin > msMax) {
                    msMax += MS_PER_DAY;
                }
                length = (msMax - msMin) / msInterval + 1;
            }

            for (; idx < length; idx++) {
                if (idx) {
                    setTime(start, msInterval, ignoreDST);
                }

                if (msMax && getMilliseconds(start) > msMax) {
                    start = new DATE(max);
                }

                html += template(toString(start, format, options.culture));
            }

            that._html(html, length);
        },

        bind: function () {
            var that = this,
                dates = that.options.dates;

            if (dates && dates[0]) {
                that.dataBind(dates);
            } else {
                that.refresh();
            }
        },

        _html: function (html, length) {
            var that = this;

            that.ul[0].innerHTML = html;
            that._height(length);

            that.current(null);
            that.select(that._value);
        },

        scroll: function (item) {
            if (!item) {
                return;
            }

            var ul = this.ul[0],
                itemOffsetTop = item.offsetTop,
                itemOffsetHeight = item.offsetHeight,
                ulScrollTop = ul.scrollTop,
                ulOffsetHeight = ul.clientHeight,
                bottomDistance = itemOffsetTop + itemOffsetHeight;

            ul.scrollTop = ulScrollTop > itemOffsetTop ?
                itemOffsetTop : bottomDistance > (ulScrollTop + ulOffsetHeight) ?
                           bottomDistance - ulOffsetHeight : ulScrollTop;
        },

        select: function (li) {
            var that = this,
                options = that.options,
                current = that._current;

            if (li instanceof Date) {
                li = kendo.toString(li, options.format, options.culture);
            }

            if (typeof li === "string") {
                if (!current || current.text() !== li) {
                    li = $.grep(that.ul[0].childNodes, function (node) {
                        return (node.textContent || node.innerText) == li;
                    });

                    li = li[0] ? li : null;
                } else {
                    li = current;
                }
            }

            that.current(li);
        },

        toggle: function () {
            var that = this;

            if (that.popup.visible()) {
                that.close();
            } else {
                that.open();
            }
        },

        value: function (value) {
            var that = this;

            that._value = value;
            if (that.ul[0].firstChild) {
                that.select(value);
            }
        },

        _click: function (e) {
            var that = this,
                li = $(e.currentTarget);

            if (!e.isDefaultPrevented()) {
                that.select(li);
                that.options.change(li.text(), true);
                that.close();
            }
        },

        _height: function (length) {
            if (length) {
                var that = this,
                    list = that.list,
                    parent = list.parent(".k-animation-container"),
                    height = that.options.height;

                list.add(parent)
                    .show()
                    .height(that.ul[0].scrollHeight > height ? height : "auto")
                    .hide();
            }
        },

        _parse: function (value) {
            var that = this,
                        options = that.options,
                current = that._value || TODAY;

            if (value instanceof DATE) {
                return value;
            }

            value = kendo.parseDate(value, options.parseFormats, options.culture);

            if (value) {
                value = new DATE(current.getFullYear(),
                                 current.getMonth(),
                                 current.getDate(),
                             value.getHours(),
                             value.getMinutes(),
                             value.getSeconds(),
                             value.getMilliseconds());
            }

            return value;
        },

        _popup: function () {
            var that = this,
                list = that.list,
            options = that.options,
            anchor = options.anchor,
            width;

            that.popup = new ui.Popup(list, extend(options.popup, {
                anchor: anchor,
                open: options.open,
                close: options.close,
                animation: options.animation
            }));

            width = anchor.outerWidth() - (list.outerWidth() - list.width());

            list.css({
                fontFamily: anchor.css("font-family"),
                width: width
            });

            kendo.touchScroller(that.popup.element);
        },

        move: function (e) {
            var that = this,
                key = e.keyCode,
                                ul = that.ul[0],
                                current = that._current,
                down = key === keys.DOWN;

            if (key === keys.UP || down) {
                if (e.altKey) {
                    that.toggle(down);
                    return;
                } else if (down) {
                    current = current ? current[0].nextSibling : ul.firstChild;
                } else {
                    current = current ? current[0].previousSibling : ul.lastChild;
                }

                if (current) {
                    that.select(current);
                }

                that.options.change(that._current.text());
                e.preventDefault();

            } else if (key === keys.ENTER || key === keys.TAB || key === keys.ESC) {
                e.preventDefault();
                if (current) {
                    that.options.change(current.text(), true);
                }
                that.close();
            }
        }
    };

    function setTime(date, time, ignoreDST) {
        var offset = date.getTimezoneOffset(),
    offsetDiff;

        date.setTime(date.getTime() + time);

        if (!ignoreDST) {
            offsetDiff = date.getTimezoneOffset() - offset;
            date.setTime(date.getTime() + offsetDiff * MS_PER_MINUTE);
        }
    }

    function dst() {
        var today = new DATE(),
            midnight = new DATE(today.getFullYear(), today.getMonth(), today.getDate(), 0, 0, 0),
            noon = new DATE(today.getFullYear(), today.getMonth(), today.getDate(), 12, 0, 0);

        return -1 * (midnight.getTimezoneOffset() - noon.getTimezoneOffset());
    }

    function getMilliseconds(date) {
        return date.getHours() * 60 * MS_PER_MINUTE + date.getMinutes() * MS_PER_MINUTE + date.getSeconds() * 1000 + date.getMilliseconds();
    }

    function isInRange(value, min, max) {
        var msMin = getMilliseconds(min),
            msMax = getMilliseconds(max),
            msValue;

        if (!value || msMin == msMax) {
            return true;
        }

        msValue = getMilliseconds(value);

        if (msMin > msValue) {
            msValue += MS_PER_DAY;
        }

        if (msMax < msMin) {
            msMax += MS_PER_DAY;
        }

        return msValue >= msMin && msValue <= msMax;
    }

    TimeView.getMilliseconds = getMilliseconds;

    kendo.TimeView = TimeView;

    var TimePicker = Widget.extend(/** @lends kendo.ui.TimePicker.prototype */{

        init: function (element, options) {
            var that = this;

            Widget.fn.init.call(that, element, options);

            element = that.element;
            options = that.options;

            normalize(options);

            that._wrapper();

            that.timeView = new TimeView(extend({
            }, options, {
                anchor: that.wrapper,
                format: options.format,
                change: function (value, trigger) {
                    if (trigger) {
                        that._change(value);
                    } else {
                        element.val(value);
                    }
                },
                open: function (e) {
                    if (that.trigger(OPEN)) {
                        e.preventDefault();
                    }
                },
                close: function (e) {
                    if (that.trigger(CLOSE)) {
                        e.preventDefault();
                    }
                }
            }));

            that._icon();

            if (!touch) {
                element[0].type = "text";
            }

            element.addClass("k-input")
                .bind({
                    keydown: proxy(that._keydown, that),
                    focus: function (e) {
                        that._inputWrapper.addClass(FOCUSED);
                    },
                    blur: proxy(that._blur, that)
                })
                .closest("form")
                .bind("reset", function () {
                    that.value(element[0].defaultValue);
                });

            that.enable(!element.is('[disabled]'));
            that.value(options.value || element.val());

            kendo.notify(that);
        },

        options: {
            name: "TimePicker",
            min: TODAY,
            max: TODAY,
            format: "",
            dates: [],
            parseFormats: [],
            value: null,
            interval: 30,
            height: 200,
            animation: {
            }
        },

        events: [

OPEN,
CLOSE,
CHANGE
        ],

        setOptions: function (options) {
            var that = this;

            Widget.fn.setOptions.call(that, options);

            normalize(that.options);

            extend(that.timeView.options, that.options);

            that.timeView.ul[0].innerHTML = "";
        },

        dataBind: function (dates) {
            if (isArray(dates)) {
                this.timeView.dataBind(dates);
            }
        },

        enable: function (enable) {
            var that = this,
                        element = that.element,
                arrow = that._arrow.unbind(CLICK + " " + MOUSEDOWN),
                wrapper = that._inputWrapper.unbind(HOVEREVENTS);

            if (enable === false) {
                wrapper
                .removeClass(DEFAULT)
                .addClass(STATEDISABLED);

                element.attr(DISABLED, DISABLED);
            } else {
                wrapper
                .removeClass(STATEDISABLED)
                .addClass(DEFAULT)
                .bind(HOVEREVENTS, that._toggleHover);

                element
                .removeAttr(DISABLED);

                arrow.bind(CLICK, proxy(that._click, that))
                     .bind(MOUSEDOWN, preventDefault);
            }
        },

        close: function () {
            this.timeView.close();
        },


        open: function () {
            this.timeView.open();
        },

        min: function (value) {
            return this._option("min", value);
        },

        max: function (value) {
            return this._option("max", value);
        },

        value: function (value) {
            var that = this;

            if (value === undefined) {
                return that._value;
            }

            that._old = that._update(value);
        },

        _blur: function () {
            var that = this;

            that.close();
            that._change(that.element.val());
            that._inputWrapper.removeClass(FOCUSED);
        },

        _click: function () {
            var that = this,
                element = that.element;

            that.timeView.toggle();

            if (!touch && element[0] !== document.activeElement) {
                element.focus();
            }
        },

        _change: function (value) {
            var that = this;

            value = that._update(value);

            if (+that._old != +value) {
                that._old = value;
                that.trigger(CHANGE);

                // trigger the DOM change event so any subscriber gets notified
                that.element.trigger(CHANGE);
            }
        },

        _icon: function () {
            var that = this,
                element = that.element,
                arrow;

            arrow = element.next("span.k-select");

            if (!arrow[0]) {
                arrow = $('<span unselectable="on" class="k-select"><span unselectable="on" class="k-icon k-i-clock">select</span></span>').insertAfter(element);
            }

            that._arrow = arrow;
        },

        _keydown: function (e) {
            var that = this,
                key = e.keyCode,
                    timeView = that.timeView;

            if (timeView.popup.visible() || e.altKey) {
                timeView.move(e);
            } else if (key === keys.ENTER) {
                that._change(that.element.val());
            }
        },

        _option: function (option, value) {
            var that = this,
    options = that.options;

            if (value === undefined) {
                return options[option];
            }

            value = that.timeView._parse(value);

            if (!value) {
                return;
            }

            value = new DATE(value);

            options[option] = value;
            that.timeView.options[option] = value;
            that.timeView.bind();
        },

        _toggleHover: function (e) {
            if (!touch) {
                $(e.currentTarget).toggleClass(HOVER, e.type === "mouseenter");
            }
        },

        _update: function (value) {
            var that = this,
                options = that.options,
            date = that.timeView._parse(value);

            if (!isInRange(date, options.min, options.max)) {
                date = null;
            }

            that._value = date;
            that.element.val(date ? kendo.toString(date, options.format, options.culture) : value);
            that.timeView.value(date);

            return date;
        },

        _wrapper: function () {
            var that = this,
                element = that.element,
                wrapper;

            wrapper = element.parents(".k-timepicker");

            if (!wrapper[0]) {
                wrapper = element.wrap(SPAN).parent().addClass("k-picker-wrap k-state-default");
                wrapper = wrapper.wrap(SPAN).parent();
            }

            wrapper[0].style.cssText = element[0].style.cssText;
            element.css({
                width: "100%",
                height: element[0].style.height
            });

            that.wrapper = wrapper.addClass("k-widget k-timepicker k-header");
            that._inputWrapper = $(wrapper[0].firstChild);
        }
    });

    function normalize(options) {
        var parseFormats = options.parseFormats;

        options.format = extractFormat(options.format || kendo.getCulture(options.culture).calendars.standard.patterns.t);

        parseFormats = isArray(parseFormats) ? parseFormats : [parseFormats];
        parseFormats.splice(0, 0, options.format);
        options.parseFormats = parseFormats;
    }

    function preventDefault(e) {
        e.preventDefault();
    }

    ui.plugin(TimePicker);

})(jQuery);
(function ($, undefined) {
    var kendo = window.kendo,
        TimeView = kendo.TimeView,
        touch = kendo.support.touch,
        parse = kendo.parseDate,
        extractFormat = kendo._extractFormat,
        calendar = kendo.calendar,
        isInRange = calendar.isInRange,
        restrictValue = calendar.restrictValue,
        isEqualDatePart = calendar.isEqualDatePart,
        getMilliseconds = TimeView.getMilliseconds,
        ui = kendo.ui,
        Widget = ui.Widget,
        OPEN = "open",
        CLOSE = "close",
        CHANGE = "change",
        CLICK = (touch ? "touchend" : "click"),
        DISABLED = "disabled",
        DEFAULT = "k-state-default",
        FOCUSED = "k-state-focused",
        HOVER = "k-state-hover",
        STATEDISABLED = "k-state-disabled",
        HOVEREVENTS = "mouseenter mouseleave",
        MOUSEDOWN = (touch ? "touchstart" : "mousedown"),
        ICONEVENTS = CLICK + " " + MOUSEDOWN,
        MONTH = "month",
        SPAN = "<span/>",
        DATE = Date,
        MIN = new DATE(1900, 0, 1),
        MAX = new DATE(2099, 11, 31),
        dateViewParams = {
            view: "date"
        },
        timeViewParams = {
            view: "time"
        },
        extend = $.extend;

    var DateTimePicker = Widget.extend(/** @lends kendo.ui.DateTimePicker.prototype */{

        init: function (element, options) {
            var that = this;

            Widget.fn.init.call(that, element, options);

            element = that.element;
            options = that.options;

            normalize(options);

            that._wrapper();

            that._icons();

            that._views();

            if (!touch) {
                element[0].type = "text";
            }

            element.addClass("k-input")
                    .bind({
                        keydown: $.proxy(that._keydown, that),
                        focus: function () {
                            that._inputWrapper.addClass(FOCUSED);
                        },
                        blur: function () {
                            that._inputWrapper.removeClass(FOCUSED);
                            that._change(element.val());
                            that.close("date");
                            that.close("time");
                        }
                    })
                   .closest("form")
                   .bind("reset", function () {
                       that.value(element[0].defaultValue);
                   });

            that._midnight = getMilliseconds(options.min) + getMilliseconds(options.max) === 0;

            that.enable(!element.is('[disabled]'));
            that.value(options.value || element.val());

            kendo.notify(that);
        },

        options: {
            name: "DateTimePicker",
            value: null,
            format: "",
            timeFormat: "",
            culture: "",
            parseFormats: [],
            dates: [],
            min: new DATE(MIN),
            max: new DATE(MAX),
            interval: 30,
            height: 200,
            footer: "",
            start: MONTH,
            depth: MONTH,
            animation: {
            },
            month: {
            },
            startControlId: null,
            endControlId: null
        },

        events: [

OPEN,
CLOSE,
CHANGE
        ],

        setOptions: function (options) {
            var that = this;

            Widget.fn.setOptions.call(that, options);

            normalize(that.options);

            extend(that.dateView.options, that.options);
            extend(that.timeView.options, that.options);

            that.timeView.ul[0].innerHTML = "";
        },

        enable: function (enable) {
            var that = this,
                dateIcon = that._dateIcon.unbind(ICONEVENTS),
                timeIcon = that._timeIcon.unbind(ICONEVENTS),
                wrapper = that._inputWrapper.unbind(HOVEREVENTS),
                element = that.element;

            if (enable === false) {
                wrapper
                .removeClass(DEFAULT)
                .addClass(STATEDISABLED);

                element.attr(DISABLED, DISABLED);
            } else {
                wrapper
                .addClass(DEFAULT)
                .removeClass(STATEDISABLED)
                .bind(HOVEREVENTS, that._toggleHover);

                element
                .removeAttr(DISABLED);

                dateIcon.bind({
                    click: function () {
                        that.toggle("date");

                        if (!touch && element[0] !== document.activeElement) {
                            element.focus();
                        }
                    },
                    mousedown: preventDefault
                });

                timeIcon.bind({
                    click: function () {
                        that.toggle("time");

                        if (!touch && element[0] !== document.activeElement) {
                            element.focus();
                        }
                    },
                    mousedown: preventDefault
                });
            }
        },

        close: function (view) {
            if (view !== "time") {
                view = "date";
            }

            this[view + "View"].close();
        },

        open: function (view) {
            if (view !== "time") {
                view = "date";
            }

            this[view + "View"].open();
        },

        min: function (value) {
            return this._option("min", value);
        },


        max: function (value) {
            return this._option("max", value);
        },


        toggle: function (view) {
            var secondView = "timeView";

            if (view !== "time") {
                view = "date";
            } else {
                secondView = "dateView";
            }

            this[view + "View"].toggle();
            this[secondView].close();
        },


        value: function (value) {
            var that = this;

            if (value === undefined) {
                return that._value;
            }

            that._old = that._update(value);
        },

        _change: function (value) {
            var that = this;

            value = that._update(value);

            if (+that._old != +value) {
                that._old = value;
                that.trigger(CHANGE);

                // trigger the DOM change event so any subscriber gets notified
                that.element.trigger(CHANGE);
            }
        },

        _option: function (option, value) {
            var that = this,
options = that.options,
timeView = that.timeView,
timeViewOptions = timeView.options,
current = that._value || that._old;

            if (value === undefined) {
                return options[option];
            }

            value = parse(value, options.parseFormats, options.culture);

            if (!value) {
                return;
            }

            options[option] = new DATE(value);
            that.dateView[option](value);

            that._midnight = getMilliseconds(options.min) + getMilliseconds(options.max) === 0;

            if (current && isEqualDatePart(value, current)) {
                if (that._midnight && option == "max") {
                    timeViewOptions[option] = MAX;
                    timeView.dataBind([MAX]);
                    return;
                }

                timeViewOptions[option] = value;
            } else {
                timeViewOptions.max = MAX;
                timeViewOptions.min = MIN;
            }

            timeView.bind();
        },

        _toggleHover: function (e) {
            if (!touch) {
                $(e.currentTarget).toggleClass(HOVER, e.type === "mouseenter");
            }
        },

        _update: function (value) {
            var that = this,
                options = that.options,
                                    min = options.min,
                                    max = options.max,
                                    timeView = that.timeView,
                                    date = parse(value, options.parseFormats, options.culture),
                                    rebind, timeViewOptions, old, skip;

            if (+date === +that._value) {
                return date;
            }

            if (date !== null && isEqualDatePart(date, min)) {
                date = restrictValue(date, min, max);
            } else if (!isInRange(date, min, max)) {
                date = null;
            }

            that._value = date;
            timeView.value(date);
            that.dateView.value(date);

            if (date) {
                old = that._old;
                timeViewOptions = timeView.options;

                if (isEqualDatePart(date, min)) {
                    timeViewOptions.min = min;
                    timeViewOptions.max = MAX;
                    rebind = true;
                }

                if (isEqualDatePart(date, max)) {
                    if (that._midnight) {
                        timeView.dataBind([MAX]);
                        skip = true;
                    } else {
                        timeViewOptions.max = max;
                        if (!rebind) {
                            timeViewOptions.min = MIN;
                        }
                        rebind = true;
                    }
                }

                if (!skip && ((!old && rebind) || (old && !isEqualDatePart(old, date)))) {
                    if (!rebind) {
                        timeViewOptions.max = MAX;
                        timeViewOptions.min = MIN;
                    }

                    timeView.bind();
                }
            }

            that.element.val(date ? kendo.toString(date, options.format, options.culture) : value);

            return date;
        },

        _keydown: function (e) {
            var that = this,
                dateView = that.dateView,
                timeView = that.timeView,
                isDateViewVisible = dateView.popup.visible();

            if (e.altKey && e.keyCode === kendo.keys.DOWN) {
                that.toggle(isDateViewVisible ? "time" : "date");
            } else if (isDateViewVisible) {
                dateView.move(e);
            } else if (timeView.popup.visible()) {
                timeView.move(e);
            } else if (e.keyCode === kendo.keys.ENTER) {
                that._change(that.element.val());
            }
        },

        _views: function () {
            var that = this,
        options = that.options;

            that.dateView = new kendo.DateView(extend({}, options, {
                anchor: that.wrapper,
                change: function () {
                    // calendar is the current scope
                    var value = this.value(),
                msValue = +value,
                msMin = +options.min,
                msMax = +options.max,
                current;

                    if (msValue === msMin || msValue === msMax) {
                        current = new DATE(that._value);
                        current.setFullYear(value.getFullYear());
                        current.setMonth(value.getMonth());
                        current.setDate(value.getDate());

                        if (isInRange(current, msMin, msMax)) {
                            value = current;
                        }
                    }

                    that._change(value);
                    that.close("date");
                },
                close: function (e) {
                    if (that.trigger(CLOSE, dateViewParams)) {
                        e.preventDefault();
                    }
                },
                open: function (e) {
                    if (that.trigger(OPEN, dateViewParams)) {
                        e.preventDefault();
                    }
                }
            }));

            that.timeView = new TimeView({
                anchor: that.wrapper,
                animation: options.animation,
                dates: options.dates,
                format: options.timeFormat,
                culture: options.culture,
                height: options.height,
                interval: options.interval,
                min: new DATE(MIN),
                max: new DATE(MAX),
                parseFormats: options.parseFormats,
                value: options.value,
                change: function (value, trigger) {
                    value = that.timeView._parse(value);

                    if (value < options.min) {
                        value = new DATE(options.min);
                        that.timeView.options.min = value;
                    } else if (value > options.max) {
                        value = new DATE(options.max);
                        that.timeView.options.max = value;
                    }

                    if (trigger) {
                        that._timeSelected = true;
                        that._change(value);
                    } else {
                        that.element.val(kendo.toString(value, options.format, options.culture));
                    }
                },
                close: function (e) {
                    if (that.trigger(CLOSE, timeViewParams)) {
                        e.preventDefault();
                    }
                },
                open: function (e) {
                    if (that.trigger(OPEN, timeViewParams)) {
                        e.preventDefault();
                    }
                }
            });
        },

        _icons: function () {
            var that = this,
element = that.element,
icons;

            icons = element.next("span.k-select");

            if (!icons[0]) {
                icons = $('<span unselectable="on" class="k-select"><span unselectable="on" class="k-icon k-i-calendar">select</span><span unselectable="on" class="k-icon k-i-clock">select</span></span>').insertAfter(element);
                icons = icons.children();
            }

            that._dateIcon = icons.eq(0);
            that._timeIcon = icons.eq(1);
        },

        _wrapper: function () {
            var that = this,
            element = that.element,
            wrapper;

            wrapper = element.parents(".k-datetimepicker");

            if (!wrapper[0]) {
                wrapper = element.wrap(SPAN).parent().addClass("k-picker-wrap k-state-default");
                wrapper = wrapper.wrap(SPAN).parent();
            }

            wrapper[0].style.cssText = element[0].style.cssText;
            element.css({
                width: "100%",
                height: element[0].style.height
            });

            that.wrapper = wrapper.addClass("k-widget k-datetimepicker k-header");
            that._inputWrapper = $(wrapper[0].firstChild);
        }
    });

    function preventDefault(e) {
        e.preventDefault();
    }

    function normalize(options) {
        var patterns = kendo.getCulture(options.culture).calendars.standard.patterns;

        options.format = extractFormat(options.format || patterns.g);
        options.timeFormat = extractFormat(options.timeFormat || patterns.t);
        kendo.DateView.normalize(options);
        options.parseFormats.splice(1, 0, options.timeFormat);
    }

    ui.plugin(DateTimePicker);

})(jQuery);
/**
 * @fileOverview Provides a TreeView implementation which can be used to display hierarchical data in a traditional
 * tree structure.
 */

(function ($, undefined) {
    var kendo = window.kendo,
        ui = kendo.ui,
        data = kendo.data,
        extend = $.extend,
        template = kendo.template,
        isArray = $.isArray,
        Widget = ui.Widget,
        HierarchicalDataSource = data.HierarchicalDataSource,
        proxy = $.proxy,
        SELECT = "select",
        EXPAND = "expand",
        CHANGE = "change",
        COLLAPSE = "collapse",
        DRAGSTART = "dragstart",
        DRAG = "drag",
        DROP = "drop",
        DRAGEND = "dragend",
        CLICK = "click",
        VISIBILITY = "visibility",
        KSTATEHOVER = "k-state-hover",
        KTREEVIEW = "k-treeview",
        VISIBLE = ":visible",
        NODE = ".k-item",
        templates, rendering, TreeView,
        subGroup, nodeContents,
        bindings = {
            text: "dataTextField",
            url: "dataUrlField",
            target: "dataTargetField",
            spriteCssClass: "dataSpriteCssClassField",
            imageUrl: "dataImageUrlField"
        },
                    isDomElement = function (o) {
                        return (
                        typeof HTMLElement === "object" ? o instanceof HTMLElement : //DOM2
                            o && typeof o === "object" && o.nodeType === 1 && typeof o.nodeName === "string"
                        );
                    };

    function contentChild(filter) {
        return function (node) {
            var result = node.children(".k-animation-container");

            if (!result.length) {
                result = node;
            }

            return result.children(filter);
        };
    }

    function treeviewFromNode(node) {
        return $(node).closest("[data-role=treeview]").data("kendoTreeView");
    }

    subGroup = contentChild(".k-group");
    nodeContents = contentChild(".k-group,.k-content");

    function updateNodeHtml(node) {
        var wrapper = node.children("div"),
            group = node.children("ul"),
            toggleButton = wrapper.children(".k-icon"),
            innerWrapper = wrapper.children(".k-in"),
            currentNode, tmp;

        if (node.hasClass("k-treeview")) {
            return;
        }

        if (!wrapper.length) {
            wrapper = $("<div />").prependTo(node);
        }

        if (!toggleButton.length && group.length) {
            toggleButton = $("<span class='k-icon' />").prependTo(wrapper);
        } else if (!group.length || !group.children().length) {
            toggleButton.remove();
            group.remove();
        }

        if (!innerWrapper.length) {
            innerWrapper = $("<span class='k-in' />").appendTo(wrapper)[0];

            // move all non-group content in the k-in container
            currentNode = wrapper[0].nextSibling;
            innerWrapper = wrapper.find(".k-in")[0];

            while (currentNode && currentNode.nodeName.toLowerCase() != "ul") {
                tmp = currentNode;
                currentNode = currentNode.nextSibling;

                if (tmp.nodeType == 3) {
                    tmp.nodeValue = $.trim(tmp.nodeValue);
                }

                innerWrapper.appendChild(tmp);
            }
        }
    }

    function updateNodeClasses(node, groupData, nodeData) {
        var wrapper = node.children("div"),
            group = node.children("ul");

        if (node.hasClass("k-treeview")) {
            return;
        }

        nodeData = extend({
            expanded: group.css("display") != "none",
            index: node.index(),
            enabled: !wrapper.children(".k-in").hasClass("k-state-disabled")
        }, nodeData);

        groupData = extend({
            firstLevel: node.parent().parent().hasClass(KTREEVIEW),
            length: node.parent().children().length
        }, groupData);

        // li
        node.removeClass("k-first k-last")
            .addClass(rendering.wrapperCssClass(groupData, nodeData));

        // div
        wrapper.removeClass("k-top k-mid k-bot")
            .addClass(rendering.cssClass(groupData, nodeData));

        // span
        wrapper.children(".k-in").removeClass("k-in k-state-default k-state-disabled")
            .addClass(rendering.textClass(nodeData));

        // toggle button
        if (group.length) {
            wrapper.children(".k-icon").removeClass("k-plus k-minus k-plus-disabled k-minus-disabled")
            .addClass(rendering.toggleButtonClass(nodeData));

            group.addClass("k-group");
        }
    }


    templates = {
        dragClue: template("<div class='k-header k-drag-clue'><span class='k-icon k-drag-status'></span>#= text #</div>"),
        group: template(
    "<ul class='#= r.groupCssClass(group) #'#= r.groupAttributes(group) #>" +
        "#= renderItems(data) #" +
    "</ul>"
)
    };

    TreeView = Widget.extend(/** @lends kendo.ui.TreeView.prototype */ {

        init: function (element, options) {
            var that = this,
                clickableItems = ".k-in:not(.k-state-selected,.k-state-disabled)",
                MOUSEENTER = "mouseenter",
                dataInit,
                inferred = false;

            if (isArray(options)) {
                dataInit = true;
                options = {
                    dataSource: options
                };
            }

            if (options && typeof options.loadOnDemand == "undefined" && isArray(options.dataSource)) {
                options.loadOnDemand = false;
            }

            Widget.prototype.init.call(that, element, options);

            element = that.element;
            options = that.options;

            inferred = element.is("ul") || element.hasClass(KTREEVIEW);

            if (inferred) {
                options.dataSource.list = element.is("ul") ? element : element.children("ul");
            }

            that._animation();

            that._accessors();

            if (options.template && typeof options.template == "string") {
                options.template = template(options.template);
            } else if (!options.template) {
                options.template = that._textTemplate();
            }

            if (options.checkboxTemplate && typeof options.checkboxTemplate == "string") {
                options.checkboxTemplate = template(options.checkboxTemplate);
            }

            that.templates = {
                item: that._itemTemplate(),
                loading: that._loadingTemplate()
            };

            // render treeview if it's not already rendered
            if (!element.hasClass(KTREEVIEW)) {
                that._wrapper();

                if (inferred) {
                    that.root = element;
                    that._group(that.wrapper);
                }
            } else {
                // otherwise just initialize properties
                that.wrapper = element;
                that.root = element.children("ul").eq(0);
            }

            that._dataSource(inferred);

            that.wrapper
                .on(MOUSEENTER, ".k-in.k-state-selected", function (e) {
                    e.preventDefault();
                })
                .on(MOUSEENTER, clickableItems, function () {
                    $(this).addClass(KSTATEHOVER);
                })
                            .on("mouseleave", clickableItems, function () {
                                $(this).removeClass(KSTATEHOVER);
                            })
                            .on(CLICK, clickableItems, proxy(that._nodeClick, that))
                            .on("dblclick", "div:not(.k-state-disabled) .k-in", proxy(that._toggleButtonClick, that))
                .on(CLICK, ".k-plus,.k-minus", proxy(that._toggleButtonClick, that));

            if (options.dragAndDrop) {
                that.dragging = new TreeViewDragAndDrop(that);
            }

            if (!inferred) {
                if (options.autoBind) {
                    that._progress(true);
                    that.dataSource.read();
                }
            } else {
                that._attachUids();
            }
        },

        _attachUids: function (root, dataSource) {
            var that = this,
                data,
                uidAttr = kendo.attr("uid");

            root = root || that.root;
            dataSource = dataSource || that.dataSource;

            data = dataSource.view();

            root.children("li").each(function (index, item) {
                item = $(item).attr(uidAttr, data[index].uid);
                that._attachUids(item.children("ul"), data[index].children);
            });
        },

        _animation: function () {
            var options = this.options;

            if (options.animation === false) {
                options.animation = {
                    expand: {
                        show: true, effects: {
                        }
                    },
                    collapse: {
                        hide: true, effects: {
                        }
                    }
                };
            }
        },

        _dataSource: function (silentRead) {
            var that = this,
                options = that.options,
                dataSource = options.dataSource;

            function recursiveRead(data) {
                for (var i = 0; i < data.length; i++) {
                    data[i].children.read();

                    recursiveRead(data[i].children.view());
                }
            }

            dataSource = isArray(dataSource) ? { data: dataSource } : dataSource;

            if (that.dataSource && that._refreshHandler) {
                that.dataSource.unbind(CHANGE, that._refreshHandler);
            } else {
                that._refreshHandler = proxy(that.refresh, that);
            }

            if (!dataSource.fields) {
                dataSource.fields = [
                {
                    field: "text"
                },
                {
                    field: "url"
                },
    {
        field: "spriteCssClass"
    },
{
    field: "imageUrl"
}
                ];
            }

            that.dataSource = HierarchicalDataSource.create(dataSource);

            if (silentRead) {
                that.dataSource.read();

                recursiveRead(that.dataSource.view());
            }

            that.dataSource.bind(CHANGE, that._refreshHandler);
        },

        events: [

    DRAGSTART,


    DRAG,


    DROP,


    DRAGEND,

    EXPAND,

    COLLAPSE,


    SELECT
        ],

        options: {
            name: "TreeView",
            dataSource: {},
            animation: {
                expand: {
                    effects: "expand:vertical",
                    duration: 200,
                    show: true
                }, collapse: {
                    duration: 100
                }
            },
            dragAndDrop: false,
            autoBind: true,
            loadOnDemand: true
        },

        _accessors: function () {
            var that = this,
                            options = that.options,
                            i, field, textField,
                            element = that.element;

            for (i in bindings) {
                field = options[bindings[i]];
                textField = element.attr(kendo.attr(i + "-field"));

                if (textField) {
                    field = textField;
                }

                if (!field) {
                    field = i;
                }

                if (!isArray(field)) {
                    field = [field];
                }

                options[bindings[i]] = field;
            }
        },

        _fieldFor: function (fieldName) {
            var fieldBindings = this.options[bindings[fieldName]],
                count = fieldBindings.length;

            if (count === 0) {
                return "'" + fieldName + "'";
            } else if (count == 1) {
                return "'" + fieldBindings[0] + "'";
            } else {
                // generates ['foo', 'bar'][item.level() < 3 ? item.level() : 2]
                return "['" + fieldBindings.join("','") + "']" +
                       "[item.level() < " + count + " ? item.level() : " + (count - 1) + "]";
            }
        },

        _textTemplate: function () {
            var that = this,
                field = function (fieldName) {
                    return "item[" + that._fieldFor(fieldName) + "]";
                },
                templateText =
                    "# var text = " + field("text") + "; #" +
                    "# if (typeof item.encoded != 'undefined' && item.encoded === false) {#" +
                        "#= text #" +
                    "# } else { #" +
                        "#: text #" +
                    "# } #";

            return template(templateText);
        },

        _loadingTemplate: function () {
            return template("<div class='k-icon k-loading' /> Loading...");
        },

        _itemTemplate: function () {
            var that = this,
                field = function (fieldName) {
                    return "item[" + that._fieldFor(fieldName) + "]";
                },
                templateText =
                    "<li class='#= r.wrapperCssClass(group, item) #'" +
                        " " + kendo.attr("uid") + "='#= item.uid #'" +
                    ">" +
                        "<div class='#= r.cssClass(group, item) #'>" +
                            "# if (item.hasChildren) { #" +
                                "<span class='#= r.toggleButtonClass(item) #'></span>" +
                            "# } #" +

                            "# if (treeview.checkboxTemplate) { #" +
                                "<span class='k-checkbox'>" +
                                    "#= treeview.checkboxTemplate(data) #" +
                                "</span>" +
                            "# } #" +

                            "# var url = " + field("url") + "; #" +
                            "# var target = " + field("target") + "; #" +
                            "# var tag = (url || target ? 'a' : 'span'); #" +
                            "# var textAttr = (url || target ? ' href=\\'' + (url ? url : 'javascript:void(0);') + '\\'' : ''); #" +
                            "# textAttr = textAttr + (target ? '  urltarget=\\'' + target + '\\'' : ''); #" +

                            "<#=tag# class='#= r.textClass(item) #'#= textAttr #>" +

                                "# var imageUrl = " + field("imageUrl") + "; #" +
                                "# if (imageUrl) { #" +
                                    "<img class='k-image' alt='' src='#= imageUrl #'>" +
                                "# } #" +

                                "# var spriteCssClass = " + field("spriteCssClass") + "; #" +
                                "# if (spriteCssClass) { #" +
                                    "<span class='k-sprite #= spriteCssClass #'></span>" +
                                "# } #" +

                                "#= treeview.template(data) #" +
                            "</#=tag#>" +
                                    "</div>" +
                                "</li>";

            return template(templateText);
        },

        setOptions: function (options) {
            var that = this;

            if (("dragAndDrop" in options) && options.dragAndDrop && !that.options.dragAndDrop) {
                that.dragging = new TreeViewDragAndDrop(that);
            }

            Widget.fn.setOptions.call(that, options);

            that._animation();
        },

        _trigger: function (eventName, node) {
            return this.trigger(eventName, {
                node: node.closest(NODE)[0]
            });
        },

        _toggleButtonClick: function (e) {
            this.toggle($(e.target).closest(NODE));
        },

        _nodeClick: function (e) {
            var that = this,
                node = $(e.target),
                contents = nodeContents(node.closest(NODE)),
                href = node.attr("href"),
                shouldNavigate;

            if (href) {
                shouldNavigate = href == "#" || href.indexOf("#" + this.element.id + "-") >= 0;
            } else {
                shouldNavigate = contents.length && !contents.children().length;
            }

            if (shouldNavigate) {
                e.preventDefault();
            }

            if (!node.hasClass(".k-state-selected") && !that._trigger("select", node)) {
                that.select(node);
            }
        },

        _wrapper: function () {
            var that = this,
                element = that.element,
                    wrapper, root,
                wrapperClasses = "k-widget k-treeview k-reset";

            if (element.is("div")) {
                wrapper = element;
                root = wrapper.children("ul").eq(0);
            } else { // element is ul
                wrapper = element.wrap('<div />').parent();
                root = element;
            }

            that.wrapper = wrapper.addClass(wrapperClasses);
            that.root = root;
        },

        _group: function (item) {
            var that = this,
                firstLevel = item.hasClass(KTREEVIEW),
                group = {
                    firstLevel: firstLevel,
                    expanded: firstLevel || that._expanded(item)
                },
                groupElement = item.children("ul");

            groupElement
                .addClass(rendering.groupCssClass(group))
                .css("display", group.expanded ? "" : "none");

            that._nodes(groupElement, group);
        },

        _nodes: function (groupElement, groupData) {
            var that = this,
                nodes = groupElement.children("li"),
            nodeData;

            groupData = extend({
                length: nodes.length
            }, groupData);

            nodes.each(function (i, node) {
                node = $(node);

                nodeData = {
                    index: i, expanded: that._expanded(node)
                };

                updateNodeHtml(node);

                updateNodeClasses(node, groupData, nodeData);

                // iterate over child nodes
                that._group(node);
            });
        },

        _processNodes: function (nodes, callback) {
            var that = this;
            that.element.find(nodes).each(function (index, item) {
                callback.call(that, index, $(item).closest(NODE));
            });
        },


        dataItem: function (node) {
            var uid = $(node).closest(NODE).attr(kendo.attr("uid")),
                dataSource = this.dataSource;

            return dataSource && dataSource.getByUid(uid);
        },

        _insertNode: function (nodeData, index, parentNode, insertCallback, collapsed) {
            var that = this,
            group = subGroup(parentNode),
            updatedGroupLength = group.children().length + 1,
            childrenData,
            groupData = {
                firstLevel: parentNode.hasClass(KTREEVIEW),
                expanded: !collapsed,
                length: updatedGroupLength
            }, node, i, item, nodeHtml = "",
        append = function (item, group) {
            item.appendTo(group);
        };

            for (i = 0; i < nodeData.length; i++) {
                item = nodeData[i];

                item.index = index + i;

                nodeHtml += that._renderItem({
                    group: groupData,
                    item: item
                });
            }

            node = $(nodeHtml);

            if (!node.length) {
                return;
            }

            if (!group.length) {
                group = $(that._renderGroup({
                    group: groupData
                })).appendTo(parentNode);
            }

            insertCallback(node, group);

            if (parentNode.hasClass("k-item")) {
                updateNodeHtml(parentNode);
                updateNodeClasses(parentNode);
            }

            updateNodeClasses(node.prev());
            updateNodeClasses(node.next());


            // render sub-nodes
            for (i = 0; i < nodeData.length; i++) {
                item = nodeData[i];

                childrenData = item.children.data();

                if (childrenData.length) {
                    that._insertNode(childrenData, item.index, node.eq(i), append, !that._expanded(node.eq(i)));
                }
            }

            return node;
        },

        refresh: function (e) {
            var that = this,
                parentNode = that.wrapper,
                node = e.node,
                action = e.action,
                items = e.items,
                index = e.index,
                loadOnDemand = that.options.loadOnDemand,
                i;

            function append(items, parentNode, collapsed) {
                var group = subGroup(parentNode),
                    children = group.children();

                if (typeof index == "undefined") {
                    index = children.length;
                }

                that._insertNode(items, index, parentNode, function (item, group) {
                    // insert node into DOM
                    if (index == children.length) {
                        item.appendTo(group);
                    } else {
                        item.insertBefore(children.eq(index));
                    }
                }, collapsed);
            }

            if (e.field) {
                return;
            }

            if (node) {
                parentNode = that.findByUid(node.uid);
                that._progress(parentNode, false);
            }

            if (action == "add") {
                append(items, parentNode);
            } else if (action == "remove") {
                that._remove(that.findByUid(items[0].uid), false);
            } else {
                if (node) {
                    subGroup(parentNode).empty();

                    append(items, parentNode, true);

                    if (that._expanded(parentNode)) {
                        updateNodeClasses(parentNode, {
                        }, {
                            expanded: true
                        });
                        subGroup(parentNode).css("display", "block");
                    }
                } else {
                    that.root = that.wrapper.html(that._renderGroup({
                        items: items,
                        group: {
                            firstLevel: true,
                            expanded: true
                        }
                    })).children("ul");
                }
            }

            if (!loadOnDemand) {
                for (i = 0; i < items.length; i++) {
                    items[i].load();
                }
            }
        },


        expand: function (nodes) {
            this._processNodes(nodes, function (index, item) {
                var contents = nodeContents(item);

                if (contents.length > 0 && !contents.is(VISIBLE)) {
                    this.toggle(item);
                }
            });
        },


        collapse: function (nodes) {
            this._processNodes(nodes, function (index, item) {
                var contents = nodeContents(item);

                if (contents.length > 0 && contents.is(VISIBLE)) {
                    this.toggle(item);
                }
            });
        },


        enable: function (nodes, enable) {
            enable = arguments.length == 2 ? !!enable : true;

            this._processNodes(nodes, function (index, item) {
                var isCollapsed = !nodeContents(item).is(VISIBLE);

                if (!enable) {
                    this.collapse(item);
                    isCollapsed = true;
                }

                updateNodeClasses(item, {}, {
                    enabled: enable, expanded: !isCollapsed
                });
            });
        },


        select: function (node) {
            var element = this.element;

            if (!arguments.length) {
                return element.find(".k-state-selected").closest(NODE);
            }

            node = $(node, element).closest(NODE);

            if (node.length) {
                element.find(".k-in").removeClass("k-state-hover k-state-selected");

                node.find(".k-in:first").addClass("k-state-selected");
            }
        },


        toggle: function (node) {
            node = $(node);

            if (!node.find(">div>.k-icon").is(".k-minus,.k-plus,.k-minus-disabled,.k-plus-disabled")) {
                return;
            }

            var that = this,
                contents = nodeContents(node),
                isExpanding = !contents.is(VISIBLE),
                options = that.options,
                animationSettings = options.animation || {
                },
                animation = animationSettings.expand,
                collapse = extend({}, animationSettings.collapse),
                hasCollapseAnimation = collapse && "effects" in collapse,
                dataItem = that.dataItem(node);

            if (contents.data("animating")) {
                return;
            }

            if (!isExpanding) {
                animation = extend(hasCollapseAnimation ? collapse
                                    : extend({ reverse: true }, animation), {
                                        show: false, hide: true
                                    });
            }

            if (!that._trigger(isExpanding ? "expand" : "collapse", node)) {
                that._expanded(node, isExpanding);

                if (contents.children().length > 0) {
                    updateNodeClasses(node, {}, {
                        expanded: isExpanding
                    });

                    if (!isExpanding) {
                        contents.css("height", contents.height()).css("height");
                    }

                    contents.kendoStop(true, true).kendoAnimate(extend(animation, {
                        complete: function () {
                            if (isExpanding) {
                                contents.css("height", "");
                            }
                        }
                    }));
                } else if (dataItem) {
                    if (options.loadOnDemand) {
                        that._progress(node, true);
                    }

                    dataItem.load();
                }
            }
        },

        _expanded: function (node, value) {
            var expandedAttr = kendo.attr("expanded"),
                dataItem = this.dataItem(node);

            if (arguments.length == 1) {
                return node.attr(expandedAttr) === "true" || (dataItem && dataItem.expanded);
            }

            if (dataItem) {
                dataItem.set("expanded", value);
            }

            if (value) {
                node.attr(expandedAttr, "true");
            } else {
                node.removeAttr(expandedAttr);
            }
        },

        _progress: function (node, showProgress) {
            var element = this.element;

            if (arguments.length == 1) {
                showProgress = node;

                if (showProgress) {
                    element.html(this.templates.loading);
                } else {
                    element.empty();
                }
            } else {
                node.find("> div > .k-icon").toggleClass("k-loading", showProgress);
            }
        },


        text: function (node) {
            return $(node).closest(NODE).find(">div>.k-in").text();
        },


        urltarget: function (node) {
            return $(node).closest(NODE).find(">div>.k-in").attr("urltarget");
        },

        _dataSourceMove: function (nodeData, group, parentNode, callback) {
            var that = this,
                srcTreeView = treeviewFromNode(nodeData),
                srcDataSource,
                dataItem,
                referenceDataItem, i,
    destTreeview = treeviewFromNode(parentNode || group),
    destDataSource = destTreeview.dataSource;

            if (parentNode) {
                referenceDataItem = destTreeview.dataItem(parentNode);

                if (!referenceDataItem.loaded()) {
                    referenceDataItem.load();
                    that._expanded(parentNode, true);
                }

                if (parentNode != that.root) {
                    destDataSource = referenceDataItem.children;
                }
            }

            if (nodeData instanceof $ || isDomElement(nodeData)) {
                // move node within or between treeviews
                nodeData = $(nodeData);
                srcDataSource = srcTreeView.dataSource;
                dataItem = srcDataSource.getByUid(nodeData.attr(kendo.attr("uid")));

                dataItem = srcDataSource.remove(dataItem);

                dataItem = callback(destDataSource, dataItem);
            } else if (isArray(nodeData) || nodeData instanceof data.ObservableArray) {
                // insert array of nodes
                for (i = 0; i < nodeData.length; i++) {
                    dataItem = callback(destDataSource, nodeData[i]);
                }
            } else {
                // insert single node from data
                dataItem = callback(destDataSource, nodeData);
            }

            return that.findByUid(dataItem.uid);
        },


        insertAfter: function (nodeData, referenceNode) {
            var group = referenceNode.parent(),
parentNode;

            if (group.parent().is("li")) {
                parentNode = group.parent();
            }

            return this._dataSourceMove(nodeData, group, parentNode, function (dataSource, model) {
                return dataSource.insert(referenceNode.index() + 1, model);
            });
        },


        insertBefore: function (nodeData, referenceNode) {
            var group = referenceNode.parent(),
                parentNode;

            if (group.parent().is("li")) {
                parentNode = group.parent();
            }

            return this._dataSourceMove(nodeData, group, parentNode, function (dataSource, model) {
                return dataSource.insert(referenceNode.index(), model);
            });
        },


        append: function (nodeData, parentNode) {
            var that = this,
                group = that.root;

            if (parentNode) {
                group = subGroup(parentNode);
            }

            return that._dataSourceMove(nodeData, group, parentNode, function (dataSource, model) {
                if (parentNode) {
                    that._expanded(parentNode, true);
                }

                return dataSource.add(model);
            });
        },

        _remove: function (node, keepData) {
            var parentNode,
                prevSibling, nextSibling;

            node = $(node, this.element);

            parentNode = node.parent().parent();
            prevSibling = node.prev();
            nextSibling = node.next();

            node[keepData ? "detach" : "remove"]();

            if (parentNode.hasClass("k-item")) {
                updateNodeHtml(parentNode);
                updateNodeClasses(parentNode);
            }

            updateNodeClasses(prevSibling);
            updateNodeClasses(nextSibling);

            return node;
        },

        remove: function (node) {
            var dataItem = this.dataItem(node);
            if (dataItem) {
                this.dataSource.remove(dataItem);
            }
        },

        detach: function (node) {
            return this._remove(node, true);
        },

        findByText: function (text) {
            return $(this.element).find(".k-in").filter(function (i, element) {
                return $(element).text() == text;
            }).closest(NODE);
        },

        findByUid: function (uid) {
            return this.element.find(".k-item[" + kendo.attr("uid") + "=" + uid + "]");
        },

        _renderItem: function (options) {
            if (!options.group) {
                options.group = {
                };
            }

            options.treeview = this.options;

            options.r = rendering;

            return this.templates.item(options);
        },

        _renderGroup: function (options) {
            var that = this;

            options.renderItems = function (options) {
                var html = "",
                    i = 0,
                    items = options.items,
                    len = items ? items.length : 0,
                    group = options.group;

                group.length = len;

                for (; i < len; i++) {
                    options.group = group;
                    options.item = items[i];
                    options.item.index = i;
                    html += that._renderItem(options);
                }

                return html;
            };

            options.r = rendering;

            return templates.group(options);
        }
    });

    function TreeViewDragAndDrop(treeview) {
        var that = this;

        that.treeview = treeview;

        that._draggable = new ui.Draggable(treeview.element, {
            filter: "div:not(.k-state-disabled) .k-in",
            hint: function (node) {
                return templates.dragClue({
                    text: node.text()
                });
            },
            cursorOffset: {
                left: 10,
                top: kendo.support.touch ? -40 / kendo.support.zoomLevel() : 10
            },
            dragstart: proxy(that.dragstart, that),
            dragcancel: proxy(that.dragcancel, that),
            drag: proxy(that.drag, that),
            dragend: proxy(that.dragend, that)
        });
    }

    TreeViewDragAndDrop.prototype = /** @ignore */{
        _hintStatus: function (newStatus) {
            var statusElement = this._draggable.hint.find(".k-drag-status")[0];

            if (newStatus) {
                statusElement.className = "k-icon k-drag-status " + newStatus;
            } else {
                return $.trim(statusElement.className.replace(/k-(icon|drag-status)/g, ""));
            }
        },

        dragstart: function (e) {
            var that = this,
                treeview = that.treeview,
                sourceNode = that.sourceNode = e.currentTarget.closest(NODE);

            if (treeview.trigger(DRAGSTART, {
                sourceNode: sourceNode[0]
            })) {
                e.preventDefault();
            }

            that.dropHint = $("<div class='k-drop-hint' />")
                .css(VISIBILITY, "hidden")
                .appendTo(treeview.element);
        },

        drag: function (e) {
            var that = this,
                treeview = that.treeview,
                sourceNode = that.sourceNode,
                dropTarget = that.dropTarget = $(kendo.eventTarget(e)),
                statusClass,
                hoveredItem, hoveredItemPos, itemHeight, itemTop, itemContent, delta,
                                insertOnTop, insertOnBottom, addChild;

            if (!dropTarget.closest(".k-treeview").length) {
                // dragging node outside of treeview
                statusClass = "k-denied";
            } else if ($.contains(sourceNode[0], dropTarget[0])) {
                // dragging node within itself
                statusClass = "k-denied";
            } else {
                // moving or reordering node
                statusClass = "k-insert-middle";

                that.dropHint.css(VISIBILITY, "visible");

                hoveredItem = dropTarget.closest(".k-top,.k-mid,.k-bot");

                if (hoveredItem.length > 0) {
                    itemHeight = hoveredItem.outerHeight();
                    itemTop = hoveredItem.offset().top;
                    itemContent = dropTarget.closest(".k-in");
                    delta = itemHeight / (itemContent.length > 0 ? 4 : 2);

                    insertOnTop = e.pageY < (itemTop + delta);
                    insertOnBottom = (itemTop + itemHeight - delta) < e.pageY;
                    addChild = itemContent.length > 0 && !insertOnTop && !insertOnBottom;

                    itemContent.toggleClass(KSTATEHOVER, addChild);
                    that.dropHint.css(VISIBILITY, addChild ? "hidden" : "visible");

                    if (addChild) {
                        statusClass = "k-add";
                    } else {
                        hoveredItemPos = hoveredItem.position();
                        hoveredItemPos.top += insertOnTop ? 0 : itemHeight;

                        that.dropHint
                            .css(hoveredItemPos)
                            [insertOnTop ? "prependTo" : "appendTo"](dropTarget.closest(NODE).children("div:first"));

                        if (insertOnTop && hoveredItem.hasClass("k-top")) {
                            statusClass = "k-insert-top";
                        }

                        if (insertOnBottom && hoveredItem.hasClass("k-bot")) {
                            statusClass = "k-insert-bottom";
                        }
                    }
                } else if (dropTarget[0] != that.dropHint[0]) {
                    statusClass = "k-denied";
                }
            }

            treeview.trigger(DRAG, {
                sourceNode: sourceNode[0],
                dropTarget: dropTarget[0],
                pageY: e.pageY,
                pageX: e.pageX,
                statusClass: statusClass.substring(2),
                setStatusClass: function (value) {
                    statusClass = value;
                }
            });

            if (statusClass.indexOf("k-insert") !== 0) {
                that.dropHint.css(VISIBILITY, "hidden");
            }

            that._hintStatus(statusClass);
        },

        dragcancel: function (e) {
            this.dropHint.remove();
            //treeview.trigger("nodeDragCancelled", { item: sourceNode[0] });
        },

        dragend: function (e) {
            var that = this,
            treeview = that.treeview,
            dropPosition = "over",
            sourceNode = that.sourceNode,
                destinationNode,
                dropHint = that.dropHint,
                valid, dropPrevented;

            if (dropHint.css(VISIBILITY) == "visible") {
                dropPosition = dropHint.prevAll(".k-in").length > 0 ? "after" : "before";
                destinationNode = dropHint.closest(NODE);
            } else if (that.dropTarget) {
                destinationNode = that.dropTarget.closest(NODE);
            }

            valid = that._hintStatus() != "k-denied";

            dropPrevented = treeview.trigger(DROP, {
                sourceNode: sourceNode[0],
                destinationNode: destinationNode[0],
                valid: valid,
                setValid: function (newValid) {
                    valid = newValid;
                },
                dropTarget: e.target,
                dropPosition: dropPosition
            });

            dropHint.remove();

            if (!valid || dropPrevented) {
                that._draggable.dropped = valid;
                return;
            }

            that._draggable.dropped = true;

            // perform reorder / move
            if (dropPosition == "over") {
                treeview.append(sourceNode, destinationNode);
                treeview.expand(destinationNode);
            } else if (dropPosition == "before") {
                treeview.insertBefore(sourceNode, destinationNode);
            } else if (dropPosition == "after") {
                treeview.insertAfter(sourceNode, destinationNode);
            }

            treeview.trigger(DRAGEND, {
                sourceNode: sourceNode[0],
                destinationNode: destinationNode[0],
                dropPosition: dropPosition
            });
        }
    };

    // client-side rendering

    rendering = /** @ignore */ {
        wrapperCssClass: function (group, item) {
            var result = "k-item",
                index = item.index;

            if (group.firstLevel && index === 0) {
                result += " k-first";
            }

            if (index == group.length - 1) {
                result += " k-last";
            }

            return result;
        },
        cssClass: function (group, item) {
            var result = "",
                index = item.index,
                groupLength = group.length - 1;

            if (group.firstLevel && index === 0) {
                result += "k-top ";
            }

            if (index === 0 && index != groupLength) {
                result += "k-top";
            } else if (index == groupLength) {
                result += "k-bot";
            } else {
                result += "k-mid";
            }

            return result;
        },
        textClass: function (item) {
            var result = "k-in";

            if (item.enabled === false) {
                result += " k-state-disabled";
            }

            if (item.selected === true) {
                result += " k-state-selected";
            }

            return result;
        },
        toggleButtonClass: function (item) {
            var result = "k-icon";

            if (item.expanded !== true) {
                result += " k-plus";
            } else {
                result += " k-minus";
            }

            if (item.enabled === false) {
                result += "-disabled";
            }

            return result;
        },
        groupAttributes: function (group) {
            return group.expanded !== true ? " style='display:none'" : "";
        },
        groupCssClass: function (group) {
            var cssClass = "k-group";

            if (group.firstLevel) {
                cssClass += " k-treeview-lines";
            }

            return cssClass;
        }
    };

    ui.plugin(TreeView);
})(jQuery);
/**
 * @fileOverview Provides a Slider and RangeSlider implementation which can be used to display a rich input for
 * selecting values or ranges of values.
 */

(function ($, undefined) {

    var kendo = window.kendo,
        Widget = kendo.ui.Widget,
        Draggable = kendo.ui.Draggable,
        extend = $.extend,
        format = kendo.format,
        parse = kendo.parseFloat,
        proxy = $.proxy,
        isArray = $.isArray,
        math = Math,
        support = kendo.support,
        touch = support.touch,
        pointers = support.pointers,
        CHANGE = "change",
        SLIDE = "slide",
        MOUSE_DOWN = touch ? "touchstart" : "mousedown",
        TRACK_MOUSE_DOWN = touch ? "touchstart" : pointers ? "MSPointerDown" : "mousedown",
        MOUSE_UP = touch ? "touchend" : "mouseup",
        MOVE_SELECTION = "moveSelection",
        KEY_DOWN = "keydown",
        CLICK = "click",
        MOUSE_OVER = "mouseover",
        DRAG_HANDLE = ".k-draghandle",
        TRACK_SELECTOR = ".k-slider-track",
                        TICK_SELECTOR = ".k-tick",
                        STATE_SELECTED = "k-state-selected",
                        STATE_DEFAULT = "k-state-default",
                        STATE_DISABLED = "k-state-disabled",
                        PRECISION = 3,
                        DISABLED = "disabled",
                        UNDEFINED = "undefined";

    var SliderBase = Widget.extend({
        init: function (element, options) {
            var that = this;

            Widget.fn.init.call(that, element, options);

            options = that.options;

            that._distance = options.max - options.min;
            that._isHorizontal = options.orientation == "horizontal";
            that._position = that._isHorizontal ? "left" : "bottom";
            that._size = that._isHorizontal ? "width" : "height";
            that._outerSize = that._isHorizontal ? "outerWidth" : "outerHeight";

            options.tooltip.format = options.tooltip.enabled ? options.tooltip.format || "{0}" : "{0}";

            that._createHtml();
            that.wrapper = that.element.closest(".k-slider");
            that._trackDiv = that.wrapper.find(TRACK_SELECTOR);

            that._setTrackDivWidth();

            that._maxSelection = that._trackDiv[that._size]();

            var sizeBetweenTicks = that._maxSelection / ((options.max - options.min) / options.smallStep);
            var pixelWidths = that._calculateItemsWidth(math.floor(that._distance / options.smallStep));

            if (options.tickPlacement != "none" && sizeBetweenTicks >= 2) {
                that._trackDiv.before(createSliderItems(options, that._distance));
                that._setItemsWidth(pixelWidths);
                that._setItemsTitle();
                that._setItemsLargeTick();
            }

            that._calculateSteps(pixelWidths);

            that[options.enabled ? "enable" : "disable"]();

            that._keyMap = {
                37: step(-options.smallStep), // left arrow
                40: step(-options.smallStep), // down arrow
                39: step(+options.smallStep), // right arrow
                38: step(+options.smallStep), // up arrow
                35: setValue(options.max), // end
                36: setValue(options.min), // home
                33: step(+options.largeStep), // page up
                34: step(-options.largeStep)  // page down
            };

            kendo.notify(that);
        },

        events: [

        CHANGE,

        SLIDE
        ],

        options: {
            enabled: true,
            min: 0,
            max: 10,
            smallStep: 1,
            largeStep: 5,
            orientation: "horizontal",
            tickPlacement: "both",
            tooltip: {
                enabled: true, format: "{0}"
            }
        },

        _setTrackDivWidth: function () {
            var that = this,
                trackDivPosition = parseFloat(that._trackDiv.css(that._position), 10) * 2;

            that._trackDiv[that._size]((that.wrapper[that._size]() - 2) - trackDivPosition);
        },

        _setItemsWidth: function (pixelWidths) {
            var that = this,
                options = that.options,
                first = 0,
                last = pixelWidths.length - 1,
                items = that.wrapper.find(TICK_SELECTOR),
                i,
                paddingTop = 0,
                bordersWidth = 2,
                count = items.length,
                                            selection = 0;

            for (i = 0; i < count - 2; i++) {
                $(items[i + 1])[that._size](pixelWidths[i]);
            }

            if (that._isHorizontal) {
                $(items[first]).addClass("k-first")[that._size](pixelWidths[last - 1]);
                $(items[last]).addClass("k-last")[that._size](pixelWidths[last]);
            } else {
                $(items[last]).addClass("k-first")[that._size](pixelWidths[last]);
                $(items[first]).addClass("k-last")[that._size](pixelWidths[last - 1]);
            }

            if (that._distance % options.smallStep !== 0 && !that._isHorizontal) {
                for (i = 0; i < pixelWidths.length; i++) {
                    selection += pixelWidths[i];
                }

                paddingTop = that._maxSelection - selection;
                paddingTop += parseFloat(that._trackDiv.css(that._position), 10) + bordersWidth;

                that.wrapper.find(".k-slider-items").css("padding-top", paddingTop);
            }
        },

        _setItemsTitle: function () {
            var that = this,
                options = that.options,
                items = that.wrapper.find(TICK_SELECTOR),
                titleNumber = options.min,
                count = items.length,
                i = that._isHorizontal ? 0 : count - 1,
                limit = that._isHorizontal ? count : -1,
                    increment = that._isHorizontal ? 1 : -1;

            for (; i - limit !== 0; i += increment) {
                $(items[i]).attr("title", format(options.tooltip.format, round(titleNumber)));
                titleNumber += options.smallStep;
            }
        },

        _setItemsLargeTick: function () {
            var that = this,
                options = that.options,
    i,
    items = that.wrapper.find(TICK_SELECTOR),
    item = {
    },
    step = round(options.largeStep / options.smallStep);

            if ((1000 * options.largeStep) % (1000 * options.smallStep) === 0) {
                if (that._isHorizontal) {
                    for (i = 0; i < items.length; i = round(i + step)) {
                        item = $(items[i]);

                        item.addClass("k-tick-large")
                            .html("<span class='k-label'>" + item.attr("title") + "</span>");
                    }
                } else {
                    for (i = items.length - 1; i >= 0; i = round(i - step)) {
                        item = $(items[i]);

                        item.addClass("k-tick-large")
                            .html("<span class='k-label'>" + item.attr("title") + "</span>");

                        if (i !== 0 && i !== items.length - 1) {
                            item.css("line-height", item[that._size]() + "px");
                        }
                    }
                }
            }
        },

        _calculateItemsWidth: function (itemsCount) {
            var that = this,
                options = that.options,
                trackDivSize = parseFloat(that._trackDiv.css(that._size)) + 1,
                pixelStep = trackDivSize / that._distance,
                itemWidth,
                pixelWidths,
                i;

            if ((that._distance / options.smallStep) - math.floor(that._distance / options.smallStep) > 0) {
                trackDivSize -= ((that._distance % options.smallStep) * pixelStep);
            }

            itemWidth = trackDivSize / itemsCount;
            pixelWidths = [];

            for (i = 0; i < itemsCount - 1; i++) {
                pixelWidths[i] = itemWidth;
            }

            pixelWidths[itemsCount - 1] = pixelWidths[itemsCount] = itemWidth / 2;
            return that._roundWidths(pixelWidths);
        },

        _roundWidths: function (pixelWidthsArray) {
            var balance = 0,
                                count = pixelWidthsArray.length,
                                i;

            for (i = 0; i < count; i++) {
                balance += (pixelWidthsArray[i] - math.floor(pixelWidthsArray[i]));
                pixelWidthsArray[i] = math.floor(pixelWidthsArray[i]);
            }

            balance = math.round(balance);

            return this._addAdditionalSize(balance, pixelWidthsArray);
        },

        _addAdditionalSize: function (additionalSize, pixelWidthsArray) {
            if (additionalSize === 0) {
                return pixelWidthsArray;
            }

            //set step size
            var step = parseFloat(pixelWidthsArray.length - 1) / parseFloat(additionalSize == 1 ? additionalSize : additionalSize - 1),
                    i;

            for (i = 0; i < additionalSize; i++) {
                pixelWidthsArray[parseInt(math.round(step * i), 10)] += 1;
            }

            return pixelWidthsArray;
        },

        _calculateSteps: function (pixelWidths) {
            var that = this,
                options = that.options,
                                val = options.min,
                selection = 0,
                itemsCount = math.ceil(that._distance / options.smallStep),
                i = 1,
                lastItem;

            itemsCount += (that._distance / options.smallStep) % 1 === 0 ? 1 : 0;
            pixelWidths.splice(0, 0, pixelWidths[itemsCount - 2] * 2);
            pixelWidths.splice(itemsCount - 1, 1, pixelWidths.pop() * 2);

            that._pixelSteps = [selection];
            that._values = [val];

            if (itemsCount === 0) {
                return;
            }

            while (i < itemsCount) {
                selection += (pixelWidths[i - 1] + pixelWidths[i]) / 2;
                that._pixelSteps[i] = selection;
                that._values[i] = val += options.smallStep;

                i++;
            }

            lastItem = that._distance % options.smallStep === 0 ? itemsCount - 1 : itemsCount;

            that._pixelSteps[lastItem] = that._maxSelection;
            that._values[lastItem] = options.max;
        },

        _getValueFromPosition: function (mousePosition, dragableArea) {
            var that = this,
            options = that.options,
            step = math.max(options.smallStep * (that._maxSelection / that._distance), 0),
            position = 0,
            halfStep = (step / 2),
            i;

            if (that._isHorizontal) {
                position = mousePosition - dragableArea.startPoint;
            } else {
                position = dragableArea.startPoint - mousePosition;
            }

            if (that._maxSelection - ((parseInt(that._maxSelection % step, 10) - 3) / 2) < position) {
                return options.max;
            }

            for (i = 0; i < that._pixelSteps.length; i++) {
                if (math.abs(that._pixelSteps[i] - position) - 1 <= halfStep) {
                    return round(that._values[i]);
                }
            }
        },

        _getDragableArea: function () {
            var that = this,
                offsetLeft = that._trackDiv.offset().left,
                offsetTop = that._trackDiv.offset().top;

            return {
                startPoint: that._isHorizontal ? offsetLeft : offsetTop + that._maxSelection,
                endPoint: that._isHorizontal ? offsetLeft + that._maxSelection : offsetTop
            };
        },

        _createHtml: function () {
            var that = this,
                element = that.element,
                options = that.options,
                inputs = element.find("input");

            if (inputs.length == 2) {
                inputs.eq(0).val(options.selectionStart);
                inputs.eq(1).val(options.selectionEnd);
            } else {
                element.val(options.value);
            }

            element.wrap(createWrapper(options, element, that._isHorizontal)).hide();

            if (options.showButtons) {
                element.before(createButton(options, "increase", that._isHorizontal))
                       .before(createButton(options, "decrease", that._isHorizontal));
            }

            element.before(createTrack(element));
        }
    });

    function createWrapper(options, element, isHorizontal) {
        var orientationCssClass = isHorizontal ? " k-slider-horizontal" : " k-slider-vertical",
            style = options.style ? options.style : element.attr("style"),
            cssClasses = element.attr("class") ? (" " + element.attr("class")) : "",
            tickPlacementCssClass = "";

        if (options.tickPlacement == "bottomRight") {
            tickPlacementCssClass = " k-slider-bottomright";
        } else if (options.tickPlacement == "topLeft") {
            tickPlacementCssClass = " k-slider-topleft";
        }

        style = style ? " style='" + style + "'" : "";

        return "<div class='k-widget k-slider" + orientationCssClass + cssClasses + "'" + style + ">" +
               "<div class='k-slider-wrap" + (options.showButtons ? " k-slider-buttons" : "") + tickPlacementCssClass +
               "'></div></div>";
    }

    function createButton(options, type, isHorizontal) {
        var buttonCssClass = "";

        if (type == "increase") {
            buttonCssClass = isHorizontal ? "k-i-arrow-e" : "k-i-arrow-n";
        } else {
            buttonCssClass = isHorizontal ? "k-i-arrow-w" : "k-i-arrow-s";
        }

        return "<a class='k-button k-button-" + type + "'><span class='k-icon " + buttonCssClass +
               "' title='" + options[type + "ButtonTitle"] + "'>" + options[type + "ButtonTitle"] + "</span></a>";
    }

    function createSliderItems(options, distance) {
        var result = "<ul class='k-reset k-slider-items'>",
            count = math.floor(round(distance / options.smallStep)) + 1,
            i;

        for (i = 0; i < count; i++) {
            result += "<li class='k-tick'>&nbsp;</li>";
        }

        result += "</ul>";

        return result;
    }

    function createTrack(element) {
        var dragHandleCount = element.is("input") ? 1 : 2;

        return "<div class='k-slider-track'><div class='k-slider-selection'><!-- --></div>" +
                               "<a href='#' class='k-draghandle' title='Drag'>Drag</a>" +
                               (dragHandleCount > 1 ? "<a href='#' class='k-draghandle' title='Drag'>Drag</a>" : "") +
                               "</div>";
    }

    function step(stepValue) {
        return function (value) {
            return value + stepValue;
        };
    }

    function setValue(value) {
        return function () {
            return value;
        };
    }

    function formatValue(value) {
        return (value + "").replace(".", kendo.cultures.current.numberFormat["."]);
    }

    function round(value) {
        value = parseFloat(value, 10);
        var power = math.pow(10, PRECISION || 0);
        return math.round(value * power) / power;
    }

    function parseAttr(element, name) {
        var value = parse(element.getAttribute(name));
        if (value === null) {
            value = undefined;
        }
        return value;
    }

    var touchLocation = function (e) {
        return {
            idx: 0,
            x: e.pageX,
            y: e.pageY
        };
    };

    if (support.pointers) {
        /** @ignore */
        touchLocation = function (e) {
            return {
                idx: 0,
                x: e.originalEvent.clientX,
                y: e.originalEvent.clientY
            };
        };
    }

    if (support.touch) {
        /** @ignore */
        touchLocation = function (e, id) {
            var changedTouches = e.changedTouches || e.originalEvent.changedTouches;

            if (id) {
                var output = null;
                $.each(changedTouches, function (idx, value) {
                    if (id == value.identifier) {
                        output = {
                            idx: value.identifier,
                            x: value.pageX,
                            y: value.pageY
                        };
                    }
                });
                return output;
            } else {
                return {
                    idx: changedTouches[0].identifier,
                    x: changedTouches[0].pageX,
                    y: changedTouches[0].pageY
                };
            }
        };
    }

    function defined(value) {
        return typeof value !== UNDEFINED;
    }

    var Slider = SliderBase.extend(/** @lends kendo.ui.Slider.prototype */ {

        init: function (element, options) {
            var that = this,
                dragHandle;

            element.type = "text";
            options = extend({
            }, {
                value: parseAttr(element, "value"),
                min: parseAttr(element, "min"),
                max: parseAttr(element, "max"),
                smallStep: parseAttr(element, "step")
            }, options);

            element = $(element);

            if (options && options.enabled === undefined) {
                options.enabled = !element.is("[disabled]");
            }

            SliderBase.fn.init.call(that, element, options);
            options = that.options;
            if (!defined(options.value)) {
                options.value = options.min;
                element.val(options.min);
            }

            dragHandle = that.wrapper.find(DRAG_HANDLE);

            new Slider.Selection(dragHandle, that, options);
            that._drag = new Slider.Drag(dragHandle, "", that, options);
        },

        options: {
            name: "Slider",
            showButtons: true,
            increaseButtonTitle: "Increase",
            decreaseButtonTitle: "Decrease",
            tooltip: {
                format: "{0}"
            }
        },


        enable: function (enable) {
            var that = this,
            options = that.options,
            clickHandler,
                            move;

            that.disable();
            if (enable === false) {
                return;
            }

            that.wrapper
                .removeClass(STATE_DISABLED)
.addClass(STATE_DEFAULT);

            that.wrapper.find("input").removeAttr(DISABLED);

            clickHandler = function (e) {
                var location = touchLocation(e),
    mousePosition = that._isHorizontal ? location.x : location.y,
    dragableArea = that._getDragableArea(),
                    target = $(e.target);

                if (target.hasClass("k-draghandle")) {
                    target.addClass(STATE_SELECTED);
                    return;
                }

                that._update(that._getValueFromPosition(mousePosition, dragableArea));

                that._drag.dragstart(e);
            };

            that.wrapper
                .find(TICK_SELECTOR + ", " + TRACK_SELECTOR)
    .bind(TRACK_MOUSE_DOWN, clickHandler)
    .end().bind(TRACK_MOUSE_DOWN, function () {
        $(document.documentElement).one("selectstart", kendo.preventDefault);
    });

            that.wrapper
                .find(DRAG_HANDLE)
                .bind(MOUSE_UP, function (e) {
                    $(e.target).removeClass(STATE_SELECTED);
                })
                                .bind(CLICK, function (e) {
                                    e.preventDefault();
                                });

            move = proxy(function (sign) {
                that._setValueInRange(that._nextValueByIndex(that._valueIndex + (sign * 1)));
            }, that);

            if (options.showButtons) {
                var mouseDownHandler = proxy(function (e, sign) {
                    if (e.which === 1 || (touch && e.which === 0)) {
                        move(sign);

                        this.timeout = setTimeout(proxy(function () {
                            this.timer = setInterval(function () {
                                move(sign);
                            }, 60);
                        }, this), 200);
                    }
                }, that);

                that.wrapper.find(".k-button")
                    .bind(MOUSE_UP, proxy(function (e) {
                        this._clearTimer();
                    }, that))
                    .bind(MOUSE_OVER, function (e) {
                        $(e.currentTarget).addClass("k-state-hover");
                    })
                                .bind("mouseout", proxy(function (e) {
                                    $(e.currentTarget).removeClass("k-state-hover");
                                    this._clearTimer();
                                }, that))
                    .eq(0)
                    .bind(MOUSE_DOWN, proxy(function (e) {
                        mouseDownHandler(e, 1);
                    }, that))
                    .click(false)
                    .end()
                    .eq(1)
                    .bind(MOUSE_DOWN, proxy(function (e) {
                        mouseDownHandler(e, -1);
                    }, that))
                    .click(false);
            }

            that.wrapper
                .find(DRAG_HANDLE).bind(KEY_DOWN, proxy(this._keydown, that));

            options.enabled = true;
        },

        disable: function () {
            var that = this;

            that.wrapper
                .removeClass(STATE_DEFAULT)
                .addClass(STATE_DISABLED);

            $(that.element).attr(DISABLED, DISABLED);

            that.wrapper
                .find(".k-button")
                .unbind(MOUSE_DOWN)
                .bind(MOUSE_DOWN, kendo.preventDefault)
                .unbind(MOUSE_UP)
                .bind(MOUSE_UP, kendo.preventDefault)
                .unbind("mouseleave")
                .bind("mouseleave", kendo.preventDefault)
                .unbind(MOUSE_OVER)
                .bind(MOUSE_OVER, kendo.preventDefault);

            that.wrapper
                .find(TICK_SELECTOR + ", " + TRACK_SELECTOR).unbind(TRACK_MOUSE_DOWN);

            that.wrapper
                .find(DRAG_HANDLE)
                .unbind(MOUSE_UP)
                .unbind(KEY_DOWN)
                .unbind(CLICK)
                .bind(KEY_DOWN, false);

            that.options.enabled = false;
        },

        _update: function (val) {
            var that = this,
                change = that.value() != val;

            that.value(val);

            if (change) {
                that.trigger(CHANGE, {
                    value: that.options.value
                });
            }
        },

        value: function (value) {
            var that = this,
                options = that.options;

            value = round(value);
            if (isNaN(value)) {
                return options.value;
            }

            if (value >= options.min && value <= options.max) {
                if (options.value != value) {
                    that.element.attr("value", formatValue(value));
                    options.value = value;
                    that._refresh();
                }
            }
        },

        _refresh: function () {
            this.trigger(MOVE_SELECTION, {
                value: this.options.value
            });
        },

        _clearTimer: function (e) {
            clearTimeout(this.timeout);
            clearInterval(this.timer);
        },

        _keydown: function (e) {
            var that = this;

            if (e.keyCode in that._keyMap) {
                that._setValueInRange(that._keyMap[e.keyCode](that.options.value));
                e.preventDefault();
            }
        },

        _setValueInRange: function (val) {
            var that = this,
        options = that.options;

            val = round(val);
            if (isNaN(val)) {
                that._update(options.min);
                return;
            }

            val = math.max(math.min(val, options.max), options.min);
            that._update(val);
        },

        _nextValueByIndex: function (index) {
            var count = this._values.length;
            return this._values[math.max(0, math.min(index, count - 1))];
        }
    });

    Slider.Selection = function (dragHandle, that, options) {
        function moveSelection(val) {
            var selectionValue = val - options.min,
                index = that._valueIndex = math.ceil(round(selectionValue / options.smallStep)),
                selection = parseInt(that._pixelSteps[index], 10),
                selectionDiv = that._trackDiv.find(".k-slider-selection"),
                halfDragHanndle = parseInt(dragHandle[that._outerSize]() / 2, 10);

            selectionDiv[that._size](selection);
            dragHandle.css(that._position, selection - halfDragHanndle);
        }

        moveSelection(options.value);

        that.bind([CHANGE, SLIDE, MOVE_SELECTION], function (e) {
            moveSelection(parseFloat(e.value, 10));
        });
    };

    Slider.Drag = function (dragHandle, type, owner, options) {
        var that = this;
        that.owner = owner;
        that.options = options;
        that.dragHandle = dragHandle;
        that.dragHandleSize = dragHandle[owner._outerSize]();
        that.type = type;

        that.draggable = new Draggable(dragHandle, {
            threshold: 0,
            dragstart: proxy(that._dragstart, that),
            drag: proxy(that.drag, that),
            dragend: proxy(that.dragend, that),
            dragcancel: proxy(that.dragcancel, that)
        });

        dragHandle.click(false);
    };

    Slider.Drag.prototype = {
        dragstart: function (e) {
            // HACK to initiate click on the line
            this.draggable.drag._start(e);
        },

        _dragstart: function (e) {
            var that = this,
                owner = that.owner,
            options = that.options,
            tooltip = options.tooltip,
            html = '',
            tooltipTemplate,
            formattedSelectionStart,
            formattedSelectionEnd;

            if (!options.enabled) {
                e.preventDefault();
                return;
            }

            owner.element.unbind(MOUSE_OVER);
            that.dragHandle.addClass(STATE_SELECTED);

            that.dragableArea = owner._getDragableArea();
            that.step = math.max(options.smallStep * (owner._maxSelection / owner._distance), 0);

            if (that.type) {
                that.selectionStart = options.selectionStart;
                that.selectionEnd = options.selectionEnd;
                owner._setZIndex(that.type);
            } else {
                that.oldVal = that.val = options.value;
            }

            if (tooltip.enabled) {
                if (tooltip.template) {
                    tooltipTemplate = that.tooltipTemplate = kendo.template(tooltip.template);
                }

                that.tooltipDiv = $("<div class='k-widget k-tooltip'><!-- --></div>").appendTo(document.body);

                if (that.type) {
                    if (that.tooltipTemplate) {
                        html = tooltipTemplate({
                            selectionStart: that.selectionStart,
                            selectionEnd: that.selectionEnd
                        });
                    } else {
                        formattedSelectionStart = format(tooltip.format, that.selectionStart);
                        formattedSelectionEnd = format(tooltip.format, that.selectionEnd);

                        html = formattedSelectionStart + ' - ' + formattedSelectionEnd;
                    }
                } else {
                    that.tooltipInnerDiv = "<div class='k-callout k-callout-" + (owner._isHorizontal ? 's' : 'e') + "'><!-- --></div>";
                    if (that.tooltipTemplate) {
                        html = tooltipTemplate({
                            value: that.val
                        });
                    } else {
                        html = format(tooltip.format, that.val);
                    }
                    html += that.tooltipInnerDiv;
                }

                that.tooltipDiv.html(html);

                that.moveTooltip();
            }
        },

        drag: function (e) {
            var that = this,
                owner = that.owner,
        options = that.options,
        x = e.x.location,
        y = e.y.location,
        startPoint = that.dragableArea.startPoint,
        endPoint = that.dragableArea.endPoint,
        tooltip = options.tooltip,
        html = "",
        tooltipTemplate = that.tooltipTemplate,
        slideParams,
        formattedSelectionStart,
        formattedSelectionEnd;

            e.preventDefault();

            if (owner._isHorizontal) {
                that.val = that.constrainValue(x, startPoint, endPoint, x >= endPoint);
            } else {
                that.val = that.constrainValue(y, endPoint, startPoint, y <= endPoint);
            }

            if (that.oldVal != that.val) {
                that.oldVal = that.val;

                if (that.type) {
                    if (that.type == "firstHandle") {
                        if (that.val < that.selectionEnd) {
                            that.selectionStart = that.val;
                        } else {
                            that.selectionStart = that.selectionEnd = that.val;
                        }
                    } else {
                        if (that.val > that.selectionStart) {
                            that.selectionEnd = that.val;
                        } else {
                            that.selectionStart = that.selectionEnd = that.val;
                        }
                    }
                    slideParams = {
                        values: [that.selectionStart, that.selectionEnd],
                        value: [that.selectionStart, that.selectionEnd]
                    };
                } else {
                    slideParams = {
                        value: that.val
                    };
                }

                owner.trigger(SLIDE, slideParams);

                if (tooltip.enabled) {
                    if (that.type) {
                        if (that.tooltipTemplate) {
                            html = tooltipTemplate({
                                selectionStart: that.selectionStart,
                                selectionEnd: that.selectionEnd
                            });
                        } else {
                            formattedSelectionStart = format(tooltip.format, that.selectionStart);
                            formattedSelectionEnd = format(tooltip.format, that.selectionEnd);
                            html = formattedSelectionStart + " - " + formattedSelectionEnd;
                        }
                    } else {
                        if (that.tooltipTemplate) {
                            html = tooltipTemplate({
                                value: that.val
                            });
                        } else {
                            html = format(tooltip.format, that.val);
                        }

                        html += that.tooltipInnerDiv;
                    }
                    that.tooltipDiv.html(html);
                    that.moveTooltip();
                }
            }
        },

        dragcancel: function (e) {
            this.owner._refresh();
            return this._end();
        },

        dragend: function (e) {
            var that = this,
                owner = that.owner;

            if (that.type) {
                owner._update(that.selectionStart, that.selectionEnd);
            } else {
                owner._update(that.val);
            }

            return that._end();
        },

        _end: function () {
            var that = this,
                owner = that.owner;

            if (owner.options.tooltip.enabled && owner.options.enabled) {
                that.tooltipDiv.remove();
            }

            that.dragHandle.removeClass(STATE_SELECTED);
            owner.element.bind(MOUSE_OVER);

            return false;
        },

        moveTooltip: function () {
            var that = this,
            owner = that.owner,
            positionTop = 0,
            positionLeft = 0,
            dragHandleOffset = that.dragHandle.offset(),
            margin = 4,
            callout = that.tooltipDiv.find(".k-callout"),
            dragHandles,
            firstDragHandleOffset,
        secondDragHandleOffset;

            if (that.type) {
                dragHandles = owner.wrapper.find(DRAG_HANDLE);
                firstDragHandleOffset = dragHandles.eq(0).offset();
                secondDragHandleOffset = dragHandles.eq(1).offset();

                if (owner._isHorizontal) {
                    positionTop = secondDragHandleOffset.top;
                    positionLeft = firstDragHandleOffset.left + ((secondDragHandleOffset.left - firstDragHandleOffset.left) / 2);
                } else {
                    positionTop = firstDragHandleOffset.top + ((secondDragHandleOffset.top - firstDragHandleOffset.top) / 2);
                    positionLeft = secondDragHandleOffset.left;
                }
            } else {
                positionTop = dragHandleOffset.top;
                positionLeft = dragHandleOffset.left;
            }
            if (owner._isHorizontal) {
                positionLeft -= parseInt((that.tooltipDiv.outerWidth() - that.dragHandle[owner._outerSize]()) / 2, 10);
                positionTop -= that.tooltipDiv.outerHeight() + callout.height() + margin;
            } else {
                positionTop -= parseInt((that.tooltipDiv.outerHeight() - that.dragHandle[owner._outerSize]()) / 2, 10);
                positionLeft -= that.tooltipDiv.outerWidth() + callout.width() + margin;
            }

            that.tooltipDiv.css({
                top: positionTop, left: positionLeft
            });
        },

        constrainValue: function (position, min, max, maxOverflow) {
            var that = this,
                val = 0;

            if (min < position && position < max) {
                val = that.owner._getValueFromPosition(position, that.dragableArea);
            } else
                if (maxOverflow) {
                    val = that.options.max;
                } else {
                    val = that.options.min;
                }

            return val;
        }

    };

    kendo.ui.plugin(Slider);

    var RangeSlider = SliderBase.extend(/** @lends kendo.ui.RangeSlider.prototype */{

        init: function (element, options) {
            var that = this,
                inputs = $(element).find("input"),
                firstInput = inputs.eq(0)[0],
                secondInput = inputs.eq(1)[0];

            firstInput.type = "text";
            secondInput.type = "text";

            options = extend({
            }, {
                selectionStart: parseAttr(firstInput, "value"),
                min: parseAttr(firstInput, "min"),
                max: parseAttr(firstInput, "max"),
                smallStep: parseAttr(firstInput, "step")
            }, {
                selectionEnd: parseAttr(secondInput, "value"),
                min: parseAttr(secondInput, "min"),
                max: parseAttr(secondInput, "max"),
                smallStep: parseAttr(secondInput, "step")
            }, options);

            if (options && options.enabled === undefined) {
                options.enabled = !inputs.is("[disabled]");
            }

            SliderBase.fn.init.call(that, element, options);
            options = that.options;
            if (!defined(options.selectionStart)) {
                options.selectionStart = options.min;
                inputs.eq(0).val(options.min);
            }

            if (!defined(options.selectionEnd)) {
                options.selectionEnd = options.max;
                inputs.eq(1).val(options.max);
            }

            var dragHandles = that.wrapper.find(DRAG_HANDLE);

            new RangeSlider.Selection(dragHandles, that, options);
            that._firstHandleDrag = new Slider.Drag(dragHandles.eq(0), "firstHandle", that, options);
            that._lastHandleDrag = new Slider.Drag(dragHandles.eq(1), "lastHandle", that, options);
        },

        options: {
            name: "RangeSlider",
            tooltip: {
                format: "{0}"
            }
        },


        enable: function (enable) {
            var that = this,
                options = that.options,
                clickHandler;

            that.disable();
            if (enable === false) {
                return;
            }

            that.wrapper
            .removeClass(STATE_DISABLED)
            .addClass(STATE_DEFAULT);

            that.wrapper.find("input").removeAttr(DISABLED);

            clickHandler = function (e) {
                var location = touchLocation(e),
                    mousePosition = that._isHorizontal ? location.x : location.y,
                    dragableArea = that._getDragableArea(),
                    val = that._getValueFromPosition(mousePosition, dragableArea),
                    target = $(e.target);

                if (target.hasClass("k-draghandle")) {
                    target.addClass(STATE_SELECTED);
                    return;
                }

                if (val < options.selectionStart) {
                    that._setValueInRange(val, options.selectionEnd);
                    that._firstHandleDrag.dragstart(e);
                } else if (val > that.selectionEnd) {
                    that._setValueInRange(options.selectionStart, val);
                    that._lastHandleDrag.dragstart(e);
                } else {
                    if (val - options.selectionStart <= options.selectionEnd - val) {
                        that._setValueInRange(val, options.selectionEnd);
                        that._firstHandleDrag.dragstart(e);
                    } else {
                        that._setValueInRange(options.selectionStart, val);
                        that._lastHandleDrag.dragstart(e);
                    }
                }
            };


            that.wrapper
                .find(TICK_SELECTOR + ", " + TRACK_SELECTOR)
                    .bind(TRACK_MOUSE_DOWN, clickHandler)
                    .end().bind(TRACK_MOUSE_DOWN, function () {
                        $(document.documentElement).one("selectstart", kendo.preventDefault);
                    });

            that.wrapper
                .find(DRAG_HANDLE)
                .bind(MOUSE_UP, function (e) {
                    $(e.target).removeClass(STATE_SELECTED);
                })
                .bind(CLICK, function (e) {
                    e.preventDefault();
                });

            that.wrapper.find(DRAG_HANDLE)
                .eq(0).bind(KEY_DOWN,
                    proxy(function (e) {
                        this._keydown(e, "firstHandle");
                    }, that)
            )
            .end()
                .eq(1).bind(KEY_DOWN,
                    proxy(function (e) {
                        this._keydown(e, "lastHandle");
                    }, that)
                );

            that.options.enabled = true;
        },

        disable: function () {
            var that = this;

            that.wrapper
                        .removeClass(STATE_DEFAULT)
                .addClass(STATE_DISABLED);

            that.wrapper.find("input").attr(DISABLED, DISABLED);

            that.wrapper
                .find(TICK_SELECTOR + ", " + TRACK_SELECTOR).unbind(TRACK_MOUSE_DOWN);

            that.wrapper
                .find(DRAG_HANDLE)
                .unbind(MOUSE_UP)
                .unbind(KEY_DOWN)
                .unbind(CLICK)
                .bind(KEY_DOWN, kendo.preventDefault);

            that.options.enabled = false;
        },

        _keydown: function (e, handle) {
            var that = this,
                selectionStartValue = that.options.selectionStart,
                selectionEndValue = that.options.selectionEnd;

            if (e.keyCode in that._keyMap) {
                if (handle == "firstHandle") {
                    selectionStartValue = that._keyMap[e.keyCode](selectionStartValue);

                    if (selectionStartValue > selectionEndValue) {
                        selectionEndValue = selectionStartValue;
                    }
                } else {
                    selectionEndValue = that._keyMap[e.keyCode](selectionEndValue);

                    if (selectionStartValue > selectionEndValue) {
                        selectionStartValue = selectionEndValue;
                    }
                }

                that._setValueInRange(selectionStartValue, selectionEndValue);
                e.preventDefault();
            }
        },

        _update: function (selectionStart, selectionEnd) {
            var that = this,
                values = that.value();

            var change = values[0] != selectionStart || values[1] != selectionEnd;

            that.value([selectionStart, selectionEnd]);

            if (change) {
                that.trigger(CHANGE, {
                    values: [selectionStart, selectionEnd],
                    value: [selectionStart, selectionEnd]
                });
            }
        },

        value: function (value) {
            if (value && value.length) {
                return this._value(value[0], value[1]);
            } else {
                return this._value();
            }
        },

        _value: function (start, end) {
            var that = this,
                options = that.options,
                selectionStart = options.selectionStart,
                selectionEnd = options.selectionEnd;

            if (isNaN(start) && isNaN(end)) {
                return [selectionStart, selectionEnd];
            } else {
                start = round(start);
                end = round(end);
            }

            if (start >= options.min && start <= options.max &&
                end >= options.min && end <= options.max && start <= end) {
                if (selectionStart != start || selectionEnd != end) {
                    that.element.find("input")
                        .eq(0).attr("value", formatValue(start))
                        .end()
                        .eq(1).attr("value", formatValue(end));

                    options.selectionStart = start;
                    options.selectionEnd = end;
                    that._refresh();
                }
            }
        },

        values: function (start, end) {
            if (isArray(start)) {
                return this._value(start[0], start[1]);
            } else {
                return this._value(start, end);
            }
        },

        _refresh: function () {
            var that = this,
    options = that.options;

            that.trigger(MOVE_SELECTION, {
                values: [options.selectionStart, options.selectionEnd],
                value: [options.selectionStart, options.selectionEnd]
            });

            if (options.selectionStart == options.max && options.selectionEnd == options.max) {
                that._setZIndex("firstHandle");
            }
        },

        _setValueInRange: function (selectionStart, selectionEnd) {
            var options = this.options;

            selectionStart = math.max(math.min(selectionStart, options.max), options.min);

            selectionEnd = math.max(math.min(selectionEnd, options.max), options.min);

            if (selectionStart == options.max && selectionEnd == options.max) {
                this._setZIndex("firstHandle");
            }

            this._update(math.min(selectionStart, selectionEnd), math.max(selectionStart, selectionEnd));
        },

        _setZIndex: function (type) {
            this.wrapper.find(DRAG_HANDLE).each(function (index) {
                $(this).css("z-index", type == "firstHandle" ? 1 - index : index);
            });
        }
    });

    RangeSlider.Selection = function (dragHandles, that, options) {
        function moveSelection(value) {
            value = value || [];
            var selectionStartValue = value[0] - options.min,
                selectionEndValue = value[1] - options.min,
                selectionStartIndex = math.ceil(round(selectionStartValue / options.smallStep)),
                selectionEndIndex = math.ceil(round(selectionEndValue / options.smallStep)),
                selectionStart = that._pixelSteps[selectionStartIndex],
                selectionEnd = that._pixelSteps[selectionEndIndex],
                halfHandle = parseInt(dragHandles.eq(0)[that._outerSize]() / 2, 10);

            dragHandles.eq(0).css(that._position, selectionStart - halfHandle)
                       .end()
                       .eq(1).css(that._position, selectionEnd - halfHandle);

            makeSelection(selectionStart, selectionEnd);
        }

        function makeSelection(selectionStart, selectionEnd) {
            var selection = 0,
                selectionPosition = 0,
                selectionDiv = that._trackDiv.find(".k-slider-selection");

            selection = math.abs(selectionStart - selectionEnd);
            selectionPosition = selectionStart < selectionEnd ? selectionStart : selectionEnd;

            selectionDiv[that._size](selection);
            selectionDiv.css(that._position, selectionPosition - 1);
        }

        moveSelection(that.value());

        that.bind([CHANGE, SLIDE, MOVE_SELECTION], function (e) {
            moveSelection(e.values);
        });
    };

    kendo.ui.plugin(RangeSlider);

})(jQuery);
/**
 * @fileOverview Provides a Splitter implementation which can be used to display a dynamic layout of resizable and
 * collapsible panes.
 */

(function ($, undefined) {

    var kendo = window.kendo,
        ui = kendo.ui,
        extend = $.extend,
        proxy = $.proxy,
        Widget = ui.Widget,
    pxUnitsRegex = /^\d+(\.\d+)?px$/i,
    percentageUnitsRegex = /^\d+(\.\d+)?%$/i,
    EXPAND = "expand",
    COLLAPSE = "collapse",
    CONTENTLOAD = "contentLoad",
    RESIZE = "resize",
        LAYOUTCHANGE = "layoutChange",
    HORIZONTAL = "horizontal",
    VERTICAL = "vertical",
    MOUSEENTER = "mouseenter",
    CLICK = "click",
    PANE = "pane",
    MOUSELEAVE = "mouseleave",
    KPANE = "k-" + PANE,
    PANECLASS = "." + KPANE;

    function isPercentageSize(size) {
        return percentageUnitsRegex.test(size);
    }

    function isPixelSize(size) {
        return pxUnitsRegex.test(size);
    }

    function isFluid(size) {
        return !isPercentageSize(size) && !isPixelSize(size);
    }

    function panePropertyAccessor(propertyName, triggersResize) {
        return function (pane, value) {
            var paneConfig = $(pane).data(PANE);

            if (arguments.length == 1) {
                return paneConfig[propertyName];
            }

            paneConfig[propertyName] = value;

            if (triggersResize) {
                var splitter = this.element.data("kendoSplitter");
                splitter.trigger(RESIZE);
            }
        };
    }

    var Splitter = Widget.extend(/** @lends kendo.ui.Splitter.prototype */ {

        init: function (element, options) {
            var that = this,
                triggerResize = function () {
                    that.trigger(RESIZE);
                };

            Widget.fn.init.call(that, element, options);

            that.wrapper = that.element;

            that.orientation = that.options.orientation.toLowerCase() != VERTICAL ? HORIZONTAL : VERTICAL;

            that.bind(RESIZE, proxy(that._resize, that));

            that._initPanes();

            that._attachEvents();

            $(window).resize(triggerResize);

            that.resizing = new PaneResizing(that);

            that.element.triggerHandler("init.kendoSplitter");
        },
        events: [

EXPAND,

COLLAPSE,

CONTENTLOAD,

RESIZE,

LAYOUTCHANGE
        ],

        _attachEvents: function () {
            var that = this,
                orientation = that.options.orientation,
                splitbarSelector = ".k-splitbar-draggable-" + orientation,
                expandCollapseSelector = ".k-splitbar .k-icon:not(.k-resize-handle)",
                triggerResize = function () {
                    that.trigger(RESIZE);
                };

            that.element
                .delegate(splitbarSelector, MOUSEENTER, function () {
                    $(this).addClass("k-splitbar-" + that.orientation + "-hover");
                })
                .delegate(splitbarSelector, MOUSELEAVE, function () {
                    $(this).removeClass("k-splitbar-" + that.orientation + "-hover");
                })
                    .delegate(splitbarSelector, "mousedown", function () {
                        that._contentFrames(this).after("<div class='k-overlay' />");
                    })
                .delegate(splitbarSelector, "mouseup", function () {
                    that._contentFrames(this).next(".k-overlay").remove();
                })
                    .delegate(expandCollapseSelector, MOUSEENTER, function () {
                        $(this).addClass("k-state-hover");
                    })
                    .delegate(expandCollapseSelector, MOUSELEAVE, function () {
                        $(this).removeClass('k-state-hover');
                    })
                .delegate(".k-splitbar .k-collapse-next, .k-splitbar .k-collapse-prev", CLICK, that._arrowClick(COLLAPSE))
                .delegate(".k-splitbar .k-expand-next, .k-splitbar .k-expand-prev", CLICK, that._arrowClick(EXPAND))
                .delegate(".k-splitbar", "dblclick", proxy(that._dbclick, that))
                .parent().closest(".k-splitter").each(function () {
                    var parentSplitter = $(this),
                        splitter = parentSplitter.data("kendoSplitter");

                    if (splitter) {
                        splitter.bind(RESIZE, triggerResize);
                    } else {
                        parentSplitter.one("init.kendoSplitter", function () {
                            $(this).data("kendoSplitter").bind(RESIZE, triggerResize);
                            triggerResize();
                        });
                    }
                });
        },

        options: {
            name: "Splitter",
            orientation: HORIZONTAL
        },

        _initPanes: function () {
            var that = this,
                panesConfig = that.options.panes || [];

            that.element
                .addClass("k-widget").addClass("k-splitter")
                .children()
                    .addClass(KPANE)
                    .each(function (index, pane) {
                        var config = panesConfig && panesConfig[index];

                        pane = $(pane);

                        pane.data(PANE, config ? config : {})
                            .toggleClass("k-scrollable", config ? config.scrollable !== false : true);
                        that.ajaxRequest(pane);
                    })
                        .end();
            that.trigger(RESIZE);
        },

        ajaxRequest: function (pane, url, data) {
            pane = $(pane);

            var that = this,
                paneConfig = pane.data(PANE);

            url = url || paneConfig.contentUrl;

            if (url) {
                pane.append("<span class='k-icon k-loading k-pane-loading' />");

                if (kendo.isLocalUrl(url)) {
                    $.ajax({
                        url: url,
                        data: data || {
                        },
                        type: "GET",
                        dataType: "html",
                        success: function (data) {
                            pane.html(data);

                            that.trigger(CONTENTLOAD, { pane: pane[0] });
                        }
                    });
                } else {
                    pane.removeClass("k-scrollable")
                        .html("<iframe src='" + url + "' frameborder='0' class='k-content-frame'>" +
                                "This page requires frames in order to show content" +
                              "</iframe>");
                }
            }
        },
        _triggerAction: function (type, pane) {
            if (!this.trigger(type, {
                pane: pane[0]
            })) {
                this[type](pane[0]);
            }
        },
        _dbclick: function (e) {
            var that = this,
                target = $(e.target),
                arrow;

            if (target.closest(".k-splitter")[0] != that.element[0]) {
                return;
            }

            arrow = target.children(".k-icon:not(.k-resize-handle)");

            if (arrow.length !== 1) {
                return;
            }

            if (arrow.is(".k-collapse-prev")) {
                that._triggerAction(COLLAPSE, target.prev());
            } else if (arrow.is(".k-collapse-next")) {
                that._triggerAction(COLLAPSE, target.next());
            } else if (arrow.is(".k-expand-prev")) {
                that._triggerAction(EXPAND, target.prev());
            } else if (arrow.is(".k-expand-next")) {
                that._triggerAction(EXPAND, target.next());
            }
        },
        _arrowClick: function (arrowType) {
            var that = this;

            return function (e) {
                var target = $(e.target),
                    pane;

                if (target.closest(".k-splitter")[0] != that.element[0]) {
                    return;
                }

                if (target.is(".k-" + arrowType + "-prev")) {
                    pane = target.parent().prev();
                } else {
                    pane = target.parent().next();
                }
                that._triggerAction(arrowType, pane);
            };
        },
        _updateSplitBar: function (splitbar, previousPane, nextPane) {
            var catIconIf = function (iconType, condition) {
                return condition ? "<div class='k-icon " + iconType + "' />" : "";
            },
    orientation = this.orientation,
    draggable = (previousPane.resizable !== false) && (nextPane.resizable !== false),
    prevCollapsible = previousPane.collapsible,
    prevCollapsed = previousPane.collapsed,
    nextCollapsible = nextPane.collapsible,
    nextCollapsed = nextPane.collapsed;

            splitbar.addClass("k-splitbar k-state-default k-splitbar-" + orientation)
                .removeClass("k-splitbar-" + orientation + "-hover")
                .toggleClass("k-splitbar-draggable-" + orientation,
                    draggable && !prevCollapsed && !nextCollapsed)
                .toggleClass("k-splitbar-static-" + orientation,
                    !draggable && !prevCollapsible && !nextCollapsible)
                .html(
                    catIconIf("k-collapse-prev", prevCollapsible && !prevCollapsed && !nextCollapsed) +
                    catIconIf("k-expand-prev", prevCollapsible && prevCollapsed && !nextCollapsed) +
                    catIconIf("k-resize-handle", draggable) +
                    catIconIf("k-collapse-next", nextCollapsible && !nextCollapsed && !prevCollapsed) +
                    catIconIf("k-expand-next", nextCollapsible && nextCollapsed && !prevCollapsed)
                );
        },
        _updateSplitBars: function () {
            var that = this;

            this.element.children(".k-splitbar").each(function () {
                var splitbar = $(this),
                    previousPane = splitbar.prev(PANECLASS).data(PANE),
                nextPane = splitbar.next(PANECLASS).data(PANE);

                if (!nextPane) {
                    return;
                }

                that._updateSplitBar(splitbar, previousPane, nextPane);
            });
        },
        _contentFrames: function (splitbar) {
            return $(splitbar).siblings(PANECLASS).find("> .k-content-frame");
        },
        _resize: function () {
            var that = this,
                element = that.element,
            panes = element.children(":not(.k-splitbar)"),
            isHorizontal = that.orientation == HORIZONTAL,
            splitBars = element.children(".k-splitbar"),
            splitBarsCount = splitBars.length,
            sizingProperty = isHorizontal ? "width" : "height",
            totalSize = element[sizingProperty]();

            if (splitBarsCount === 0) {
                splitBarsCount = panes.length - 1;
                panes.slice(0, splitBarsCount).after("<div class='k-splitbar' />");
                that._updateSplitBars();
                splitBars = element.children(".k-splitbar");
            } else {
                that._updateSplitBars();
            }

            // discard splitbar sizes from total size
            splitBars.each(function () {
                totalSize -= this[isHorizontal ? "offsetWidth" : "offsetHeight"];
            });

            var sizedPanesWidth = 0,
                sizedPanesCount = 0,
                freeSizedPanes = $();

            panes.css({
                position: "absolute", top: 0
            })
[sizingProperty](function () {
    var config = $(this).data(PANE) || {
    }, size;

    if (config.collapsed) {
        size = 0;
        $(this).css("overflow", "hidden");
    } else if (isFluid(config.size)) {
        freeSizedPanes = freeSizedPanes.add(this);
        return;
    } else { // sized in px/%, not collapsed
        size = parseInt(config.size, 10);

        if (isPercentageSize(config.size)) {
            size = Math.floor(size * totalSize / 100);
        }
    }

    sizedPanesCount++;
    sizedPanesWidth += size;

    return size;
});

            totalSize -= sizedPanesWidth;

            var freeSizePanesCount = freeSizedPanes.length,
                freeSizePaneWidth = Math.floor(totalSize / freeSizePanesCount);

            freeSizedPanes
            .slice(0, freeSizePanesCount - 1)
                .css(sizingProperty, freeSizePaneWidth)
            .end()
                .eq(freeSizePanesCount - 1)
                    .css(sizingProperty, totalSize - (freeSizePanesCount - 1) * freeSizePaneWidth);

            // arrange panes
            var sum = 0,
                alternateSizingProperty = isHorizontal ? "height" : "width",
                positioningProperty = isHorizontal ? "left" : "top",
            sizingDomProperty = isHorizontal ? "offsetWidth" : "offsetHeight";

            if (freeSizePanesCount === 0) {
                var lastNonCollapsedPane = panes.filter(function () {
                    return !(($(this).data(PANE) || {}).collapsed);
                }).last();

                lastNonCollapsedPane[sizingProperty](totalSize + lastNonCollapsedPane[0][sizingDomProperty]);
            }

            element.children()
                .css(alternateSizingProperty, element[alternateSizingProperty]())
                .each(function (i, child) {
                    child.style[positioningProperty] = Math.floor(sum) + "px";
                    sum += child[sizingDomProperty];
                });

            that.trigger(LAYOUTCHANGE);
        },

        toggle: function (pane, expand) {
            var paneConfig;

            pane = $(pane);
            paneConfig = pane.data(PANE);

            if (arguments.length == 1) {
                expand = paneConfig.collapsed === undefined ? false : paneConfig.collapsed;
            }

            paneConfig.collapsed = !expand;

            if (paneConfig.collapsed) {
                pane.css("overflow", "hidden");
            } else {
                pane.css("overflow", "");
            }

            this.trigger(RESIZE);
        },


        collapse: function (pane) {
            this.toggle(pane, false);
        },
        expand: function (pane) {
            this.toggle(pane, true);
        },


        size: panePropertyAccessor("size", true),

        min: panePropertyAccessor("min"),

        max: panePropertyAccessor("max")
    });

    ui.plugin(Splitter);

    var verticalDefaults = {
        sizingProperty: "height",
        sizingDomProperty: "offsetHeight",
        alternateSizingProperty: "width",
        positioningProperty: "top",
        mousePositioningProperty: "pageY"
    };

    var horizontalDefaults = {
        sizingProperty: "width",
        sizingDomProperty: "offsetWidth",
        alternateSizingProperty: "height",
        positioningProperty: "left",
        mousePositioningProperty: "pageX"
    };

    function PaneResizing(splitter) {
        var that = this,
        orientation = splitter.orientation;

        that.owner = splitter;
        that._element = splitter.element;
        that.orientation = orientation;

        extend(that, orientation === HORIZONTAL ? horizontalDefaults : verticalDefaults);

        that._resizable = new kendo.ui.Resizable(splitter.element, {
            orientation: orientation,
            handle: splitter.element.children(".k-splitbar-draggable-" + orientation),
            hint: proxy(that._createHint, that),
            start: proxy(that._start, that),
            max: proxy(that._max, that),
            min: proxy(that._min, that),
            invalidClass: "k-restricted-size-" + orientation,
            resizeend: proxy(that._stop, that)
        });
    }

    PaneResizing.prototype = {
        _createHint: function (handle) {
            var that = this;
            return $("<div class='k-ghost-splitbar k-ghost-splitbar-" + that.orientation + " k-state-default' />")
                        .css(that.alternateSizingProperty, handle[that.alternateSizingProperty]());
        },
        _start: function (e) {
            var that = this,
            splitbar = $(e.currentTarget),
            previousPane = splitbar.prev(),
            nextPane = splitbar.next(),
previousPaneConfig = previousPane.data(PANE),
            nextPaneConfig = nextPane.data(PANE),
prevBoundary = parseInt(previousPane[0].style[that.positioningProperty], 10),
nextBoundary = parseInt(nextPane[0].style[that.positioningProperty], 10) + nextPane[0][that.sizingDomProperty] - splitbar[0][that.sizingDomProperty],
totalSize = that._element.css(that.sizingProperty),
toPx = function (value) {
    var val = parseInt(value, 10);
    return (isPixelSize(value) ? val : (totalSize * val) / 100) || 0;
},
prevMinSize = toPx(previousPaneConfig.min),
prevMaxSize = toPx(previousPaneConfig.max) || nextBoundary - prevBoundary,
nextMinSize = toPx(nextPaneConfig.min),
nextMaxSize = toPx(nextPaneConfig.max) || nextBoundary - prevBoundary;

            that.previousPane = previousPane;
            that.nextPane = nextPane;
            that._maxPosition = Math.min(nextBoundary - nextMinSize, prevBoundary + prevMaxSize);
            that._minPosition = Math.max(prevBoundary + prevMinSize, nextBoundary - nextMaxSize);
        },
        _max: function (e) {
            return this._maxPosition;
        },
        _min: function (e) {
            return this._minPosition;
        },
        _stop: function (e) {
            var that = this,
                splitbar = $(e.currentTarget),
                owner = that.owner;

            owner._contentFrames(splitbar).next(".k-overlay").remove();

            if (e.keyCode !== kendo.keys.ESC) {
                var ghostPosition = e.position,
                                previousPane = splitbar.prev(),
                    nextPane = splitbar.next(),
                    previousPaneConfig = previousPane.data(PANE),
                    nextPaneConfig = nextPane.data(PANE),
                    previousPaneNewSize = ghostPosition - parseInt(previousPane[0].style[that.positioningProperty], 10),
                    nextPaneNewSize = parseInt(nextPane[0].style[that.positioningProperty], 10) + nextPane[0][that.sizingDomProperty] - ghostPosition - splitbar[0][that.sizingDomProperty],
                    fluidPanesCount = that._element.children(PANECLASS).filter(function () {
                        return isFluid($(this).data(PANE).size);
                    }).length;

                if (!isFluid(previousPaneConfig.size) || fluidPanesCount > 1) {
                    if (isFluid(previousPaneConfig.size)) {
                        fluidPanesCount--;
                    }

                    previousPaneConfig.size = previousPaneNewSize + "px";
                }

                if (!isFluid(nextPaneConfig.size) || fluidPanesCount > 1) {
                    nextPaneConfig.size = nextPaneNewSize + "px";
                }

                owner.trigger(RESIZE);
            }

            return false;
        }
    };

})(jQuery);
(function ($, undefined) {
    var kendo = window.kendo,
        Widget = kendo.ui.Widget,
        logToConsole = kendo.logToConsole,
        rFileExtension = /\.([^\.]+)$/,
        SELECT = "select",
        UPLOAD = "upload",
        SUCCESS = "success",
    ERROR = "error",
    COMPLETE = "complete",
        CANCEL = "cancel",
        LOAD = "load",
    PROGRESS = "progress",
    REMOVE = "remove";

    var Upload = Widget.extend({
        init: function (element, options) {
            var that = this;

            Widget.fn.init.call(that, element, options);

            that.name = element.name;
            that.multiple = that.options.multiple;
            that.localization = that.options.localization;

            var activeInput = that.element;
            that.wrapper = activeInput.closest(".k-upload");
            if (that.wrapper.length == 0) {
                that.wrapper = that._wrapInput(activeInput);
            }

            that._activeInput(activeInput);
            that.toggle(that.options.enabled);

            activeInput.closest("form").bind({
                "submit": $.proxy(that._onParentFormSubmit, that),
                "reset": $.proxy(that._onParentFormReset, that)
            });

            if (that.options.async.saveUrl != undefined) {
                that._module = that._supportsFormData() ?
                new formDataUploadModule(that) :
                new iframeUploadModule(that);
                that._async = true;
            } else {
                that._module = new syncUploadModule(that);
            }

            if (that._supportsDrop()) {
                that._setupDropZone();
            }

            that.wrapper
                    .delegate(".k-upload-action", "click", $.proxy(that._onFileAction, that))
            .delegate(".k-upload-selected", "click", $.proxy(that._onUploadSelected, that))
            .delegate(".k-file", "t:progress", $.proxy(that._onFileProgress, that))
            .delegate(".k-file", "t:upload-success", $.proxy(that._onUploadSuccess, that))
                .delegate(".k-file", "t:upload-error", $.proxy(that._onUploadError, that));
        },

        events: [
SELECT,
UPLOAD,
SUCCESS,
ERROR,
COMPLETE,
CANCEL,
PROGRESS,
REMOVE
        ],

        options: {
            name: "Upload",
            enabled: true,
            multiple: true,
            showFileList: true,
            async: {
                removeVerb: "POST",
                autoUpload: true
            },
            localization: {
                "select": "Select...",
                "cancel": "Cancel",
                "retry": "Retry",
                "remove": "Remove",
                "uploadSelectedFiles": "Upload files",
                "dropFilesHere": "drop files here to upload",
                "statusUploading": "uploading",
                "statusUploaded": "uploaded",
                "statusFailed": "failed"
            }
        },

        setOptions: function (options) {
            var that = this,
                activeInput = that.element;

            Widget.fn.setOptions.call(that, options);

            that.multiple = that.options.multiple;

            activeInput.attr("multiple", that._supportsMultiple() ? that.multiple : false)
            that.toggle(that.options.enabled);
        },

        enable: function (enable) {
            enable = typeof (enable) === "undefined" ? true : enable;
            this.toggle(enable);
        },

        disable: function () {
            this.toggle(false);
        },

        toggle: function (enable) {
            enable = typeof (enable) === "undefined" ? enable : !enable;
            this.wrapper.toggleClass("k-state-disabled", enable);
        },

        _addInput: function (input) {
            var that = this;

            input
        .insertAfter(that.element)
.data("kendoUpload", that);

            $(that.element)
                .hide()
                .removeAttr("id");

            that._activeInput(input);
        },

        _activeInput: function (input) {
            var that = this,
                    wrapper = that.wrapper;

            that.element = input;

            input
        .attr("multiple", that._supportsMultiple() ? that.multiple : false)
    .attr("autocomplete", "off")
    .click(function (e) {
        if (wrapper.hasClass("k-state-disabled")) {
            e.preventDefault();
        }
    })
    .change($.proxy(that._onInputChange, that));
        },

        _onInputChange: function (e) {
            var upload = this,
                input = $(e.target),
                prevented = upload.trigger(SELECT, {
                    files: inputFiles(input)
                });

            if (prevented) {
                upload._addInput(input.clone().val(""));
                input.remove();
            } else {
                input.trigger("t:select");
            }
        },

        _onDrop: function (e) {
            var dt = e.originalEvent.dataTransfer,
        that = this,
                droppedFiles = dt.files;

            stopEvent(e);

            if (droppedFiles.length > 0) {
                var prevented = that.trigger(SELECT, {
                    files: getAllFileInfo(droppedFiles)
                });
                if (!prevented) {
                    $(".k-dropzone", that.wrapper).trigger("t:select", [droppedFiles]);
                }
            }
        },

        _enqueueFile: function (name, data) {
            var that = this,
    existingFileEntries,
fileEntry,
fileList = $(".k-upload-files", that.wrapper);

            if (fileList.length == 0) {
                fileList = $("<ul class='k-upload-files k-reset'></ul>").appendTo(that.wrapper);
                if (!that.options.showFileList) {
                    fileList.hide();
                }
            }

            existingFileEntries = $(".k-file", fileList);
            fileEntry =
            $("<li class='k-file'><span class='k-filename' title='" + name + "'>" + name + "</span></li>")
            .appendTo(fileList)
            .data(data);

            if (that._async) {
                fileEntry.prepend("<span class='k-icon'></span>");
            }

            if (!that.multiple) {
                existingFileEntries.trigger("t:remove");
            }

            return fileEntry;
        },

        _removeFileEntry: function (fileEntry) {
            var fileList = fileEntry.closest(".k-upload-files"),
                allFiles;

            fileEntry.remove();
            allFiles = $(".k-file", fileList);

            if (allFiles.find("> .k-fail").length === allFiles.length) {
                this._hideUploadButton();
            }

            if (allFiles.length == 0) {
                fileList.remove();
            }
        },

        _fileAction: function (fileElement, actionKey) {
            var classDictionary = {
                remove: "k-delete", cancel: "k-cancel", retry: "k-retry"
            };
            if (!classDictionary.hasOwnProperty(actionKey)) {
                return;
            }

            this._clearFileAction(fileElement);

            fileElement.append(
                this._renderAction(classDictionary[actionKey], this.localization[actionKey])
                .addClass("k-upload-action")
            );
        },

        _fileState: function (fileEntry, stateKey) {
            var localization = this.localization,
                states = {
                    uploading: {
                        cssClass: "k-loading",
                        text: localization.statusUploading
                    },
                    uploaded: {
                        cssClass: "k-success",
                        text: localization.statusUploaded
                    },
                    failed: {
                        cssClass: "k-fail",
                        text: localization.statusFailed
                    }
                },
    currentState = states[stateKey];

            if (currentState) {
                var icon = fileEntry.children(".k-icon").text(currentState.text);
                icon[0].className = "k-icon " + currentState.cssClass;
            }
        },

        _renderAction: function (actionClass, actionText) {
            if (actionClass != "") {
                return $(
            "<button type='button' class='k-button k-button-icontext'>" +
                "<span class='k-icon " + actionClass + "'></span>" +
                actionText +
            "</button>"
            )
            }
            else {
                return $(
            "<button type='button' class='k-button'>" +
                actionText +
            "</button>"
                )
            }
        },

        _clearFileAction: function (fileElement) {
            fileElement
                .find(".k-upload-action").remove();
        },

        _onFileAction: function (e) {
            var that = this;

            if (!that.wrapper.hasClass("k-state-disabled")) {
                var button = $(e.target).closest(".k-upload-action"),
                        icon = button.find(".k-icon"),
                        fileEntry = button.closest(".k-file"),
                    eventArgs = {
                        files: fileEntry.data("fileNames")
                    };

                if (icon.hasClass("k-delete")) {
                    if (!that.trigger(REMOVE, eventArgs)) {
                        fileEntry.trigger("t:remove", eventArgs.data);
                    }
                } else if (icon.hasClass("k-cancel")) {
                    that.trigger(CANCEL, eventArgs);
                    fileEntry.trigger("t:cancel");
                    this._checkAllComplete();
                } else if (icon.hasClass("k-retry")) {
                    fileEntry.trigger("t:retry");
                }
            }

            return false;
        },

        _onUploadSelected: function () {
            this.wrapper.trigger("t:saveSelected");
            return false;
        },

        _onFileProgress: function (e, percentComplete) {
            var progressBar = $(".k-progress-status", e.target);
            if (progressBar.length == 0) {
                progressBar =
                    $("<span class='k-progress'><span class='k-state-selected k-progress-status' style='width: 0;'></span></span>")
                        .appendTo($(".k-filename", e.target))
                        .find(".k-progress-status");
            }

            progressBar.width(percentComplete + "%");

            this.trigger(PROGRESS, {
                files: getFileEntry(e).data("fileNames"),
                percentComplete: percentComplete
            });
        },

        _onUploadSuccess: function (e, response, xhr) {
            var fileEntry = getFileEntry(e);

            this._fileState(fileEntry, "uploaded");

            this.trigger(SUCCESS, {
                files: fileEntry.data("fileNames"),
                response: response,
                operation: "upload",
                XMLHttpRequest: xhr
            });

            if (this._supportsRemove()) {
                this._fileAction(fileEntry, REMOVE);
            } else {
                this._clearFileAction(fileEntry);
            }

            this._checkAllComplete();
        },

        _onUploadError: function (e, xhr) {
            var fileEntry = getFileEntry(e);

            this._fileState(fileEntry, "failed");
            this._fileAction(fileEntry, "retry");

            var prevented = this.trigger(ERROR, {
                operation: "upload",
                files: fileEntry.data("fileNames"),
                XMLHttpRequest: xhr
            });

            logToConsole("Server response: " + xhr.responseText);

            this._checkAllComplete();
        },

        _showUploadButton: function () {
            var uploadButton = $(".k-upload-selected", this.wrapper);
            if (uploadButton.length == 0) {
                uploadButton =
                    this._renderAction("", this.localization["uploadSelectedFiles"])
                    .addClass("k-upload-selected");
            }

            this.wrapper.append(uploadButton);
        },

        _hideUploadButton: function () {
            $(".k-upload-selected", this.wrapper).remove();
        },

        _onParentFormSubmit: function () {
            var upload = this,
                    element = upload.element;
            element.trigger("t:abort");

            if (!element.value) {
                var input = $(element);

                // Prevent submitting an empty input
                input.attr("disabled", "disabled");

                window.setTimeout(function () {
                    // Restore the input so the Upload remains functional
                    // in case the user cancels the form submit
                    input.removeAttr("disabled");
                }, 0);
            }
        },

        _onParentFormReset: function () {
            $(".k-upload-files", this.wrapper).remove();
        },

        _supportsFormData: function () {
            return typeof (FormData) != "undefined";
        },

        _supportsMultiple: function () {
            return !$.browser.opera;
        },

        _supportsDrop: function () {
            var userAgent = this._userAgent().toLowerCase(),
                isChrome = /chrome/.test(userAgent),
                isSafari = !isChrome && /safari/.test(userAgent),
                isWindowsSafari = isSafari && /windows/.test(userAgent);

            return !isWindowsSafari && this._supportsFormData() && (this.options.async.saveUrl != undefined);
        },

        _userAgent: function () {
            return navigator.userAgent;
        },

        _setupDropZone: function () {
            $(".k-upload-button", this.wrapper)
                .wrap("<div class='k-dropzone'></div>");

            var dropZone = $(".k-dropzone", this.wrapper)
                .append($("<em>" + this.localization["dropFilesHere"] + "</em>"))
                    .bind({
                        "dragenter": stopEvent,
                        "dragover": function (e) {
                            e.preventDefault();
                        },
                        "drop": $.proxy(this._onDrop, this)
                    });

            bindDragEventWrappers(dropZone,
                function () {
                    dropZone.addClass("k-dropzone-hovered");
                },
                function () {
                    dropZone.removeClass("k-dropzone-hovered");
                });

            bindDragEventWrappers($(document),
                function () {
                    dropZone.addClass("k-dropzone-active");
                },
                function () {
                    dropZone.removeClass("k-dropzone-active");
                });
        },

        _supportsRemove: function () {
            return this.options.async.removeUrl != undefined;
        },

        _submitRemove: function (fileNames, data, onSuccess, onError) {
            var upload = this,
                removeField = upload.options.async.removeField || "fileNames",
    params = $.extend(data, getAntiForgeryTokens());

            params[removeField] = fileNames;

            $.ajax({
                type: this.options.async.removeVerb,
                dataType: "json",
                url: this.options.async.removeUrl,
                traditional: true,
                data: params,
                success: onSuccess,
                error: onError
            });
        },

        _wrapInput: function (input) {
            input.wrap("<div class='k-widget k-upload'><div class='k-button k-upload-button'></div></div>");
            input.closest(".k-button")
                .append("<span>" + this.localization.select + "</span>");

            return input.closest(".k-upload");
        },

        _checkAllComplete: function () {
            if ($(".k-file .k-icon.k-loading", this.wrapper).length == 0) {
                this.trigger(COMPLETE);
            }
        }
    });

    // Synchronous upload module
    var syncUploadModule = function (upload) {
        this.name = "syncUploadModule";
        this.element = upload.wrapper;
        this.upload = upload;
        this.element
                    .bind("t:select", $.proxy(this.onSelect, this))
                    .bind("t:remove", $.proxy(this.onRemove, this))
                    .closest("form")
                        .attr("enctype", "multipart/form-data")
                        .attr("encoding", "multipart/form-data");
    };

    syncUploadModule.prototype = /** @ignore */  {
        onSelect: function (e) {
            var upload = this.upload;
            var sourceInput = $(e.target);
            upload._addInput(sourceInput.clone().val(""));
            var file = upload._enqueueFile(getFileName(sourceInput), {
                "relatedInput": sourceInput, "fileNames": inputFiles(sourceInput)
            });

            upload._fileAction(file, REMOVE);
        },

        onRemove: function (e) {
            var fileEntry = getFileEntry(e);
            fileEntry.data("relatedInput").remove();

            this.upload._removeFileEntry(fileEntry);
        }
    };

    // Iframe upload module
    var iframeUploadModule = function (upload) {
        this.name = "iframeUploadModule";
        this.element = upload.wrapper;
        this.upload = upload;
        this.iframes = [];
        this.element
            .bind("t:select", $.proxy(this.onSelect, this))
            .bind("t:cancel", $.proxy(this.onCancel, this))
            .bind("t:retry", $.proxy(this.onRetry, this))
            .bind("t:remove", $.proxy(this.onRemove, this))
            .bind("t:saveSelected", $.proxy(this.onSaveSelected, this))
            .bind("t:abort", $.proxy(this.onAbort, this));
    };

    Upload._frameId = 0;

    iframeUploadModule.prototype = /** @ignore */ {
        onSelect: function (e) {
            var upload = this.upload,
                sourceInput = $(e.target);

            var fileEntry = this.prepareUpload(sourceInput);

            if (upload.options.async.autoUpload) {
                this.performUpload(fileEntry);
            } else {
                if (upload._supportsRemove()) {
                    this.upload._fileAction(fileEntry, REMOVE);
                }

                upload._showUploadButton();
            }
        },

        prepareUpload: function (sourceInput) {
            var upload = this.upload;
            var activeInput = $(upload.element);
            var name = upload.options.async.saveField || sourceInput.attr("name");
            upload._addInput(sourceInput.clone().val(""));

            sourceInput.attr("name", name);

            var iframe = this.createFrame(upload.name + "_" + Upload._frameId++);
            this.registerFrame(iframe);

            var form = this.createForm(upload.options.async.saveUrl, iframe.attr("name"))
                .append(activeInput);

            var fileEntry = upload._enqueueFile(
        getFileName(sourceInput),
            {
                "frame": iframe, "relatedInput": activeInput, "fileNames": inputFiles(sourceInput)
            });

            iframe
        .data({
            "form": form, "file": fileEntry
        });

            return fileEntry;
        },

        performUpload: function (fileEntry) {
            var e = {
                files: fileEntry.data("fileNames")
            },
                iframe = fileEntry.data("frame"),
                upload = this.upload;

            if (!upload.trigger(UPLOAD, e)) {
                upload._hideUploadButton();

                iframe.appendTo(document.body);

                var form = iframe.data("form")
                    .appendTo(document.body);

                e.data = $.extend({
                }, e.data, getAntiForgeryTokens());
                for (var key in e.data) {
                    var dataInput = form.find("input[name='" + key + "']");
                    if (dataInput.length == 0) {
                        dataInput = $("<input>", {
                            type: "hidden", name: key
                        })
                            .appendTo(form);
                    }
                    dataInput.val(e.data[key]);
                }

                upload._fileAction(fileEntry, CANCEL);
                upload._fileState(fileEntry, "uploading");

                iframe
                        .one("load", $.proxy(this.onIframeLoad, this));

                form[0].submit();
            } else {
                upload._removeFileEntry(iframe.data("file"));
                this.cleanupFrame(iframe);
                this.unregisterFrame(iframe);
            }
        },

        onSaveSelected: function (e) {
            var module = this;

            $(".k-file", this.element).each(function () {
                var fileEntry = $(this),
                    started = isFileUploadStarted(fileEntry);

                if (!started) {
                    module.performUpload(fileEntry);
                }
            });
        },

        onIframeLoad: function (e) {
            var iframe = $(e.target);

            try {
                var responseText = iframe.contents().text();
            } catch (e) {
                responseText = "Error trying to get server response: " + e;
            }

            this.processResponse(iframe, responseText);
        },

        processResponse: function (iframe, responseText) {
            var fileEntry = iframe.data("file"),
                module = this,
fakeXHR = {
    responseText: responseText
};

            tryParseJSON(responseText,
                                function (jsonResult) {
                                    $.extend(fakeXHR, {
                                        statusText: "OK", status: "200"
                                    });
                                    fileEntry.trigger("t:progress", [100]);
                                    fileEntry.trigger("t:upload-success", [jsonResult, fakeXHR]);
                                    module.cleanupFrame(iframe);
                                    module.unregisterFrame(iframe);
                                },
                function () {
                    $.extend(fakeXHR, {
                        statusText: "error", status: "500"
                    });
                    fileEntry.trigger("t:upload-error", [fakeXHR]);
                }
            );
        },

        onCancel: function (e) {
            var iframe = $(e.target).data("frame");

            this.stopFrameSubmit(iframe);
            this.cleanupFrame(iframe);
            this.unregisterFrame(iframe);
            this.upload._removeFileEntry(iframe.data("file"));
        },

        onRetry: function (e) {
            var fileEntry = getFileEntry(e);
            this.performUpload(fileEntry);
        },

        onRemove: function (e, data) {
            var fileEntry = getFileEntry(e);

            var iframe = fileEntry.data("frame");
            if (iframe) {
                this.unregisterFrame(iframe);
                this.upload._removeFileEntry(fileEntry);
                this.cleanupFrame(iframe);
            } else {
                removeUploadedFile(fileEntry, this.upload, data);
            }
        },

        onAbort: function () {
            var element = this.element,
                module = this;

            $.each(this.iframes, function () {
                $("input", this.data("form")).appendTo(element);
                module.stopFrameSubmit(this[0]);
                this.data("form").remove();
                this.remove();
            });

            this.iframes = [];
        },

        createFrame: function (id) {
            return $(
            "<iframe" +
            " name='" + id + "'" +
            " id='" + id + "'" +
            " style='display:none;' />"
        );
        },

        createForm: function (action, target) {
            return $(
            "<form enctype='multipart/form-data' method='POST'" +
            " action='" + action + "'" +
            " target='" + target + "'" +
            "/>");
        },

        stopFrameSubmit: function (frame) {
            if (typeof (frame.stop) != "undefined") {
                frame.stop();
            } else if (frame.document) {
                frame.document.execCommand("Stop");
                frame.contentWindow.location.href = frame.contentWindow.location.href;
            }
        },

        registerFrame: function (frame) {
            this.iframes.push(frame);
        },

        unregisterFrame: function (frame) {
            this.iframes = $.grep(this.iframes, function (value) {
                return value.attr("name") != frame.attr("name");
            });
        },

        cleanupFrame: function (frame) {
            var form = frame.data("form");

            frame.data("file").data("frame", null);

            setTimeout(function () {
                form.remove();
                frame.remove();
            }, 1);
        }
    };

    // FormData upload module
    var formDataUploadModule = function (upload) {
        this.name = "formDataUploadModule";
        this.element = upload.wrapper;
        this.upload = upload;
        this.element
                    .bind("t:select", $.proxy(this.onSelect, this))
                    .bind("t:cancel", $.proxy(this.onCancel, this))
                    .bind("t:remove", $.proxy(this.onRemove, this))
                    .bind("t:retry", $.proxy(this.onRetry, this))
                    .bind("t:saveSelected", $.proxy(this.onSaveSelected, this))
                    .bind("t:abort", $.proxy(this.onAbort, this));
    };

    formDataUploadModule.prototype = /** @ignore */ {
        onSelect: function (e, rawFiles) {
            var upload = this.upload,
        module = this,
        sourceElement = $(e.target),
        files = rawFiles ? getAllFileInfo(rawFiles) : this.inputFiles(sourceElement),
        fileEntries = this.prepareUpload(sourceElement, files);

            $.each(fileEntries, function () {
                if (upload.options.async.autoUpload) {
                    module.performUpload(this);
                } else {
                    if (upload._supportsRemove()) {
                        upload._fileAction(this, REMOVE);
                    }
                    upload._showUploadButton();
                }
            });
        },

        prepareUpload: function (sourceElement, files) {
            var fileEntries = this.enqueueFiles(files);

            if (sourceElement.is("input")) {
                $.each(fileEntries, function () {
                    $(this).data("relatedInput", sourceElement);
                });
                sourceElement.data("relatedFileEntries", fileEntries);
                this.upload._addInput(sourceElement.clone().val(""));
            }

            return fileEntries;
        },

        enqueueFiles: function (files) {
            var upload = this.upload
            fileEntries = [];

            for (var i = 0; i < files.length; i++) {
                var currentFile = files[i],
                    name = currentFile.name;

                var fileEntry = upload._enqueueFile(name, { "fileNames": [currentFile] });
                fileEntry.data("file", currentFile);

                fileEntries.push(fileEntry);
            }

            return fileEntries;
        },

        inputFiles: function (sourceInput) {
            return inputFiles(sourceInput);
        },

        performUpload: function (fileEntry) {
            var upload = this.upload,
                formData = this.createFormData(fileEntry.data("file")),
e = {
    files: fileEntry.data("fileNames")
};

            if (!upload.trigger(UPLOAD, e)) {
                upload._fileAction(fileEntry, CANCEL);
                upload._hideUploadButton();

                e.data = $.extend({}, e.data, getAntiForgeryTokens());
                for (var key in e.data) {
                    formData.append(key, e.data[key]);
                }

                upload._fileState(fileEntry, "uploading");

                this.postFormData(this.upload.options.async.saveUrl, formData, fileEntry);
            } else {
                this.removeFileEntry(fileEntry);
            }
        },

        onSaveSelected: function (e) {
            var module = this;

            $(".k-file", this.element).each(function () {
                var fileEntry = $(this),
                    started = isFileUploadStarted(fileEntry);

                if (!started) {
                    module.performUpload(fileEntry);
                }
            });
        },

        onCancel: function (e) {
            var fileEntry = getFileEntry(e);
            this.stopUploadRequest(fileEntry);
            this.removeFileEntry(fileEntry);
        },

        onRetry: function (e) {
            var fileEntry = getFileEntry(e);
            this.performUpload(fileEntry);
        },

        onRemove: function (e, data) {
            var fileEntry = getFileEntry(e);

            if (fileEntry.children(".k-icon").is(".k-success")) {
                removeUploadedFile(fileEntry, this.upload, data);
            } else {
                this.removeFileEntry(fileEntry);
            }
        },

        postFormData: function (url, data, fileEntry) {
            var xhr = new XMLHttpRequest(),
            module = this;

            fileEntry.data("request", xhr);

            xhr.addEventListener("load", function (e) {
                module.onRequestSuccess.call(module, e, fileEntry);
            }, false);

            xhr.addEventListener(ERROR, function (e) {
                module.onRequestError.call(module, e, fileEntry);
            }, false);

            xhr.upload.addEventListener("progress", function (e) {
                module.onRequestProgress.call(module, e, fileEntry);
            }, false);

            xhr.open("POST", url);
            xhr.withCredentials = "true";
            xhr.send(data);
        },

        createFormData: function (fileInfo) {
            var formData = new FormData(),
            upload = this.upload;

            formData.append(upload.options.async.saveField || upload.name, fileInfo.rawFile);

            return formData;
        },

        onRequestSuccess: function (e, fileEntry) {
            var xhr = e.target,
                module = this;

            function raiseError() {
                fileEntry.trigger("t:upload-error", [xhr]);
            }

            if (xhr.status >= 200 && xhr.status <= 299) {
                tryParseJSON(xhr.responseText,
                    function (jsonResult) {
                        fileEntry.trigger("t:progress", [100]);
                        fileEntry.trigger("t:upload-success", [jsonResult, xhr]);
                        module.cleanupFileEntry(fileEntry);
                    },
                    raiseError
                );
            } else {
                raiseError();
            }
        },

        onRequestError: function (e, fileEntry) {
            var xhr = e.target;
            fileEntry.trigger("t:upload-error", [xhr]);
        },

        cleanupFileEntry: function (fileEntry) {
            var relatedInput = fileEntry.data("relatedInput"),
                uploadComplete = true;

            if (relatedInput) {
                $.each(relatedInput.data("relatedFileEntries") || [], function () {
                    // Exclude removed file entries and self
                    if (this.parent().length > 0 && this[0] != fileEntry[0]) {
                        uploadComplete = uploadComplete && this.children(".k-icon").is(".k-success");
                    }
                });

                if (uploadComplete) {
                    relatedInput.remove();
                }
            }
        },

        removeFileEntry: function (fileEntry) {
            this.cleanupFileEntry(fileEntry);
            this.upload._removeFileEntry(fileEntry);
        },

        onRequestProgress: function (e, fileEntry) {
            var percentComplete = Math.round(e.loaded * 100 / e.total);
            fileEntry.trigger("t:progress", [percentComplete]);
        },

        stopUploadRequest: function (fileEntry) {
            fileEntry.data("request").abort();
        }
    };

    // Helper functions
    function getFileName(input) {
        return $.map(inputFiles(input), function (file) {
            return file.name;
        }).join(", ");
    }

    function inputFiles($input) {
        var input = $input[0];
        if (input.files) {
            return getAllFileInfo(input.files);
        } else {
            return [{
                name: stripPath(input.value),
                extension: getFileExtension(input.value),
                size: null
            }];
        }
    }

    function getAllFileInfo(rawFiles) {
        return $.map(rawFiles, function (file) {
            return getFileInfo(file);
        });
    }

    function getFileInfo(rawFile) {
        // Older Firefox versions (before 3.6) use fileName and fileSize
        var fileName = rawFile.name || rawFile.fileName;
        return {
            name: fileName,
            extension: getFileExtension(fileName),
            size: rawFile.size || rawFile.fileSize,
            rawFile: rawFile
        };
    }

    function getFileExtension(fileName) {
        var matches = fileName.match(rFileExtension);
        return matches ? matches[0] : "";
    }

    function stripPath(name) {
        var slashIndex = name.lastIndexOf("\\");
        return (slashIndex != -1) ? name.substr(slashIndex + 1) : name;
    }

    function removeUploadedFile(fileEntry, upload, data) {
        if (!upload._supportsRemove()) {
            return;
        }

        var files = fileEntry.data("fileNames");
        var fileNames = $.map(files, function (file) {
            return file.name
        });

        upload._submitRemove(fileNames, data,
            function onSuccess(data, textStatus, xhr) {
                upload._removeFileEntry(fileEntry);

                upload.trigger(SUCCESS, {
                    operation: "remove",
                    files: files,
                    response: data,
                    XMLHttpRequest: xhr
                });
            },

            function onError(xhr, textStatus, textStatus) {
                var prevented = upload.trigger(ERROR, {
                    operation: "remove",
                    files: files,
                    XMLHttpRequest: xhr
                });

                logToConsole("Server response: " + xhr.responseText);
            }
        );
    }

    function tryParseJSON(input, onSuccess, onError) {
        var success = false,
        json = "";

        try {
            json = $.parseJSON(input);
            success = true;
        } catch (e) {
            onError();
        }

        if (success) {
            onSuccess(json);
        }
    }

    function stopEvent(e) {
        e.stopPropagation(); e.preventDefault();
    }

    function bindDragEventWrappers(element, onDragEnter, onDragLeave) {
        var hideInterval, lastDrag;

        element
            .bind("dragenter", function (e) {
                onDragEnter();
                lastDrag = new Date();

                if (!hideInterval) {
                    hideInterval = setInterval(function () {
                        var sinceLastDrag = new Date() - lastDrag;
                        if (sinceLastDrag > 100) {
                            onDragLeave();

                            clearInterval(hideInterval);
                            hideInterval = null;
                        }
                    }, 100);
                }
            })
            .bind("dragover", function (e) {
                lastDrag = new Date();
            });
    }

    function isFileUploadStarted(fileEntry) {
        return fileEntry.children(".k-icon").is(".k-loading, .k-success, .k-fail");
    }

    function getFileEntry(e) {
        return $(e.target).closest(".k-file");
    }

    function getAntiForgeryTokens() {
        var tokens = {
        },
            csrf_token = $("meta[name=csrf-token]").attr("content"),
            csrf_param = $("meta[name=csrf-param]").attr("content");

        $("input[name^='__RequestVerificationToken']").each(function () {
            tokens[this.name] = this.value;
        });

        if (csrf_param !== undefined && csrf_token !== undefined) {
            tokens[csrf_param] = csrf_token;
        }

        return tokens;
    }
    kendo.ui.plugin(Upload);
})(jQuery);

(function ($, undefined) {

    var kendo = window.kendo,
        Widget = kendo.ui.Widget,
        Draggable = kendo.ui.Draggable,
        isPlainObject = $.isPlainObject,
        proxy = $.proxy,
        extend = $.extend,
        each = $.each,
        template = kendo.template,
        BODY = "body",
        templates,
        // classNames
        KWINDOW = ".k-window",
        KWINDOWTITLEBAR = ".k-window-titlebar",
        KWINDOWCONTENT = ".k-window-content",
        KWINDOWRESIZEHANDLES = ".k-resize-handle",
        KOVERLAY = ".k-overlay",
        KCONTENTFRAME = "k-content-frame",
        LOADING = "k-loading",
        KHOVERSTATE = "k-state-hover",
        // constants
        VISIBLE = ":visible",
        HIDDEN = "hidden",
        CURSOR = "cursor",
        // events
        OPEN = "open",
        ACTIVATE = "activate",
        DEACTIVATE = "deactivate",
        CLOSE = "close",
        KEYDOWN = "keydown",
        REFRESH = "refresh",
        RESIZE = "resize",
        DRAGSTART = "dragstart",
        DRAGEND = "dragend",
        ERROR = "error",
        OVERFLOW = "overflow",
        ZINDEX = "zIndex",
        MINIMIZE_MAXIMIZE = ".k-window-actions .k-i-minimize,.k-window-actions .k-i-maximize",
        isLocalUrl = kendo.isLocalUrl;

    function constrain(value, low, high) {
        return Math.max(Math.min(value, high), low);
    }

    function windowObject(element) {
        return element.children(KWINDOWCONTENT).data("kendoWindow");
    }

    function openedModalWindows() {
        return $(KWINDOW).filter(function () {
            var wnd = $(this);
            return wnd.is(VISIBLE) && windowObject(wnd).options.modal;
        }).sort(function (a, b) {
            return +$(a).css("zIndex") - +$(b).css("zIndex");
        });
    }

    function sizingAction(actionId, callback) {
        return function () {
            var that = this,
                wrapper = that.wrapper,
                style = wrapper[0].style,
                options = that.options;

            if (options.isMaximized || options.isMinimized) {
                return;
            }

            that.restoreOptions = {
                width: style.width,
                height: style.height
            };

            wrapper
                                .find(KWINDOWRESIZEHANDLES).hide().end()
                                .find(MINIMIZE_MAXIMIZE).parent().hide()
                                    .eq(0).before(templates.action({
                                        name: "Restore"
                                    }));

            callback.call(that);

            return that;
        };
    }

    var Window = Widget.extend(/** @lends kendo.ui.Window.prototype */ {

        keyCode: {
            ALT: 18,
            BACKSPACE: 8,
            CAPS_LOCK: 20,
            COMMA: 188,
            COMMAND: 91,
            COMMAND_LEFT: 91, // COMMAND
            COMMAND_RIGHT: 93,
            CONTROL: 17,
            DELETE: 46,
            DOWN: 40,
            END: 35,
            ENTER: 13,
            ESCAPE: 27,
            HOME: 36,
            INSERT: 45,
            LEFT: 37,
            MENU: 93, // COMMAND_RIGHT
            NUMPAD_ADD: 107,
            NUMPAD_DECIMAL: 110,
            NUMPAD_DIVIDE: 111,
            NUMPAD_ENTER: 108,
            NUMPAD_MULTIPLY: 106,
            NUMPAD_SUBTRACT: 109,
            PAGE_DOWN: 34,
            PAGE_UP: 33,
            PERIOD: 190,
            RIGHT: 39,
            SHIFT: 16,
            SPACE: 32,
            TAB: 9,
            UP: 38,
            WINDOWS: 91 // COMMAND
        },

        init: function (element, options) {
            var that = this,
                wrapper,
            offset, visibility, display,
            isVisible = false,
            content;

            Widget.fn.init.call(that, element, options);
            options = that.options;
            element = that.element;
            content = options.content;

            that.appendTo = $(options.appendTo || document.body);

            that._animations();

            if (!isPlainObject(content)) {
                content = options.content = {
                    url: content
                };
            }

            if (!element.parent().is(that.appendTo)) {
                if (element.is(VISIBLE)) {
                    offset = element.offset();
                    isVisible = true;
                } else {
                    visibility = element.css("visibility");
                    display = element.css("display");

                    element.css({
                        visibility: HIDDEN, display: ""
                    });
                    offset = element.offset();
                    element.css({
                        visibility: visibility, display: display
                    });
                }
            }

            if (typeof options.visible == "undefined") {
                options.visible = element.is(VISIBLE);
            }

            wrapper = that.wrapper = element.closest(KWINDOW);

            if (!element.is(".k-content") || !wrapper[0]) {
                element.addClass("k-window-content k-content");
                that._createWindow(element, options);
                wrapper = that.wrapper = element.closest(KWINDOW);

                that._dimensions();
            }

            if (offset) {
                wrapper.css({
                    top: offset.top,
                    left: offset.left
                });
            }

            if (content) {
                that.refresh(content);
            }

            that.toFront();

            if (options.visible && options.modal) {
                that._overlay(wrapper.is(VISIBLE)).css({ opacity: 0.5 });
            }

            wrapper.on({
                mouseenter: function () {
                    $(this).addClass(KHOVERSTATE);
                },
                mouseleave: function () {
                    $(this).removeClass(KHOVERSTATE);
                },
                click: proxy(that._windowActionHandler, that)
            }, ".k-window-titlebar .k-window-action");

            if (options.resizable) {
                wrapper.on("dblclick", KWINDOWTITLEBAR, proxy(that.toggleMaximization, that));

                each("n e s w se sw ne nw".split(" "), function (index, handler) {
                    wrapper.append(templates.resizeHandle(handler));
                });

                that.resizing = new WindowResizing(that);
            }

            if (options.draggable) {
                that.dragging = new WindowDragging(that);
            }
            if (options.timeout > 0) {
                window.setTimeout(function () {
                    CloseModalWindow(that);
                }, (options.timeout * 1000))
            }
            wrapper.add(wrapper.find(".k-resize-handle,.k-window-titlebar"))
                .on("mousedown", proxy(that.toFront, that));

            that.touchScroller = kendo.touchScroller(element);

            $(window).resize(proxy(that._onDocumentResize, that));

            if (options.visible) {
                that.trigger(OPEN);
                that.trigger(ACTIVATE);
            }

            kendo.notify(that);
        },

        _dimensions: function () {
            var that = this,
                wrapper = that.wrapper,
                element = that.element,
                options = that.options;

            that.title(options.title);

            if (options.width) {
                wrapper.width(options.width);
            }

            if (options.height) {
                wrapper.height(options.height);
            }

            each(["minWidth", "minHeight", "maxWidth", "maxHeight"], function (_, prop) {
                var value = options[prop];
                if (value && value != Infinity) {
                    element.css(prop, value);
                }
            });

            if (!options.visible) {
                wrapper.hide();
            }
        },

        _animations: function () {
            var options = this.options;

            if (options.animation === false) {
                options.animation = {
                    open: {
                        show: true, effects: {}
                    }, close: {
                        hide: true, effects: {
                        }
                    }
                };
            }
        },

        setOptions: function (options) {
            Widget.fn.setOptions.call(this, options);
            this._animations();
            this._dimensions();
        },

        events: [

OPEN,

ACTIVATE,

DEACTIVATE,

CLOSE,

REFRESH,

RESIZE,

DRAGSTART,


DRAGEND,

ERROR
        ],

        options: {
            name: "Window",
            animation: {
                open: {
                    effects: {
                        zoom: {
                            direction: "in"
                        }, fade: {
                            direction: "in"
                        }
                    },
                    duration: 350,
                    show: true
                },
                close: {
                    effects: {
                        zoom: {
                            direction: "out", properties: {
                                scale: 0.7
                            }
                        }, fade: {
                            direction: "out"
                        }
                    },
                    duration: 350,
                    hide: true
                }
            },
            title: "",
            actions: ["Close"],
            modal: false,
            resizable: true,
            draggable: true,
            minWidth: 90,
            minHeight: 50,
            maxWidth: Infinity,
            maxHeight: Infinity,
            timeout: 0
        },

        _overlay: function (visible) {
            var overlay = this.appendTo.children(".k-overlay"),
                wrapper = this.wrapper;

            if (!overlay.length) {
                overlay = $("<div class='k-overlay' />");
            }

            overlay
            .insertBefore(wrapper[0])
            .toggle(visible)
            .css(ZINDEX, parseInt(wrapper.css(ZINDEX), 10) - 1);

            return overlay;
        },

        _windowActionHandler: function (e) {
            var target = $(e.target).closest(".k-window-action").find(".k-icon"),
            that = this;

            each({
                "k-i-close": that.close,
                "k-i-maximize": that.maximize,
                "k-i-minimize": that.minimize,
                "k-i-restore": that.restore,
                "k-i-refresh": that.refresh
            }, function (commandName, handler) {
                if (target.hasClass(commandName)) {
                    e.preventDefault();
                    handler.call(that);
                    return false;
                }
            });

        },

        center: function () {
            var wrapper = this.wrapper,
                documentWindow = $(window);

            wrapper.css({
                left: documentWindow.scrollLeft() + Math.max(0, (documentWindow.width() - wrapper.width()) / 2),
                top: documentWindow.scrollTop() + Math.max(0, (documentWindow.height() - wrapper.height()) / 2)
            });

            return this;
        },

        title: function (text) {
            var that = this,
                    wrapper = that.wrapper,
                    options = that.options,
                    titleBar = wrapper.find(KWINDOWTITLEBAR),
                    title = titleBar.children(".k-window-title"),
                    titleBarHeight = titleBar.outerHeight();

            if (!arguments.length) {
                return title.text();
            }

            if (text === false) {
                wrapper.addClass("k-window-titleless");
                titleBar.remove();
            } else {
                if (!titleBar.length) {
                    wrapper.prepend(templates.titlebar(extend(templates, options)));
                }

                wrapper.css("padding-top", titleBarHeight);
                titleBar.css("margin-top", -titleBarHeight);
            }

            title.text(text);

            return that;
        },

        content: function (html) {
            var content = this.wrapper.children(KWINDOWCONTENT);

            if (!html) {
                return content.html();
            }

            content.html(html);
            return this;
        },


        open: function () {
            var that = this,
                wrapper = that.wrapper,
                options = that.options,
                showOptions = options.animation.open,
                contentElement = wrapper.children(KWINDOWCONTENT),
                initialOverflow = contentElement.css(OVERFLOW),
                overlay;

            if (!that.trigger(OPEN)) {
                that.toFront();

                options.visible = true;

                if (options.modal) {
                    overlay = that._overlay(false);

                    if (showOptions.duration) {
                        overlay.kendoStop().kendoAnimate({
                            effects: {
                                fade: {
                                    direction: "out", properties: {
                                        opacity: 0.5
                                    }
                                }
                            },
                            duration: showOptions.duration,
                            show: true
                        });
                    } else {
                        overlay.css("opacity", 0.5).show();
                    }
                }

                if (!wrapper.is(VISIBLE)) {
                    contentElement.css(OVERFLOW, HIDDEN);
                    wrapper.show().kendoStop().kendoAnimate({
                        effects: showOptions.effects,
                        duration: showOptions.duration,
                        complete: function () {
                            that.trigger(ACTIVATE);
                            contentElement.css(OVERFLOW, initialOverflow);
                        }
                    });
                }
            }

            if (options.isMaximized) {
                that._documentScrollTop = $(document).scrollTop();
                $("html, body").css(OVERFLOW, HIDDEN);
            }
            return that;
        },

        close: function () {
            var that = this,
        wrapper = that.wrapper,
        options = that.options,
        showOptions = options.animation.open,
        hideOptions = options.animation.close,
        modalWindows,
                shouldHideOverlay, overlay;

            if (wrapper.is(VISIBLE) && !that.trigger(CLOSE)) {
                options.visible = false;

                modalWindows = openedModalWindows();

                shouldHideOverlay = options.modal && modalWindows.length == 1;

                overlay = options.modal ? that._overlay(true) : $(undefined);

                if (shouldHideOverlay) {
                    if (hideOptions.duration) {
                        overlay.kendoStop().kendoAnimate({
                            effects: {
                                fadeOut: {
                                    properties: { opacity: 0 }
                                }
                            },
                            duration: hideOptions.duration,
                            hide: true
                        });
                    } else {
                        overlay.hide();
                    }
                } else if (modalWindows.length) {
                    windowObject(modalWindows.eq(modalWindows.length - 2))._overlay(true);
                }

                wrapper.kendoStop().kendoAnimate({
                    effects: hideOptions.effects || showOptions.effects,
                    reverse: hideOptions.reverse === true,
                    duration: hideOptions.duration,
                    complete: function () {
                        wrapper.hide();
                        that.trigger(DEACTIVATE);
                    }
                });
            }

            if (that.options.isMaximized) {
                $("html, body").css(OVERFLOW, "");
                if (this._documentScrollTop && this._documentScrollTop > 0) {
                    $(document).scrollTop(this._documentScrollTop);
                }
            }

            return that;
        },

        toFront: function () {
            var that = this,
                wrapper = that.wrapper,
                currentWindow = wrapper[0],
                zIndex = +wrapper.css(ZINDEX),
                originalZIndex = zIndex;

            $(KWINDOW).each(function (i, element) {
                var windowObject = $(element),
                    zIndexNew = windowObject.css(ZINDEX),
                    contentElement = windowObject.find(KWINDOWCONTENT);

                if (!isNaN(zIndexNew)) {
                    zIndex = Math.max(+zIndexNew, zIndex);
                }

                // Add overlay to windows with iframes and lower z-index to prevent
                // trapping of events when resizing / dragging
                if (element != currentWindow && contentElement.find("> ." + KCONTENTFRAME).length > 0) {
                    contentElement.append(templates.overlay);
                }
            });

            if (zIndex == 10001 || originalZIndex < zIndex) {
                wrapper.css(ZINDEX, zIndex + 2);
                that.element.find("> .k-overlay").remove();
            }

            return that;
        },

        toggleMaximization: function () {
            return this[this.options.isMaximized ? "restore" : "maximize"]();
        },

        restore: function () {
            var that = this,
                options = that.options,
                restoreOptions = that.restoreOptions;

            if (!options.isMaximized && !options.isMinimized) {
                return;
            }

            that.wrapper
                .css({
                    position: "absolute",
                    left: restoreOptions.left,
                    top: restoreOptions.top,
                    width: restoreOptions.width,
                    height: restoreOptions.height
                })
                .find(".k-window-content,.k-resize-handle").show().end()
                .find(".k-window-titlebar .k-i-restore").parent().remove().end().end()
                .find(MINIMIZE_MAXIMIZE).parent().show();

            $("html, body").css(OVERFLOW, "");
            if (this._documentScrollTop && this._documentScrollTop > 0) {
                $(document).scrollTop(this._documentScrollTop);
            }

            options.isMaximized = options.isMinimized = false;

            that.trigger(RESIZE);

            return that;
        },

        maximize: sizingAction("maximize", function () {
            var that = this,
        wrapper = that.wrapper,
        position = wrapper.position();

            extend(that.restoreOptions, {
                left: position.left,
                top: position.top
            });

            wrapper.css({
                left: 0,
                top: 0,
                position: "fixed"
            });

            this._documentScrollTop = $(document).scrollTop();
            $("html, body").css(OVERFLOW, HIDDEN);

            that.options.isMaximized = true;

            that._onDocumentResize();
        }),

        minimize: sizingAction("minimize", function () {
            var that = this;

            that.wrapper.css("height", "");
            that.element.hide();

            that.options.isMinimized = true;
        }),

        _onDocumentResize: function () {
            var that = this,
                wrapper = that.wrapper,
                wnd = $(window);

            if (!that.options.isMaximized) {
                return;
            }

            wrapper.css({
                width: wnd.width(),
                height: wnd.height() - parseInt(wrapper.css("padding-top"), 10)
            });

            that.trigger(RESIZE);
        },

        refresh: function (options) {
            var that = this,
                initOptions = that.options,
                element = $(that.element),
                iframe,
                showIframe = initOptions.iframe,
                url;

            if (!isPlainObject(options)) {
                options = {
                    url: options
                };
            }

            options = extend({
            }, initOptions.content, options);

            url = options.url;

            if (url) {
                if (typeof showIframe == "undefined") {
                    showIframe = !isLocalUrl(url);
                }

                if (!showIframe) {
                    // perform AJAX request
                    that._ajaxRequest(options);
                } else {
                    iframe = element.find("." + KCONTENTFRAME)[0];

                    if (iframe) {
                        // refresh existing iframe
                        iframe.src = url || iframe.src;
                    } else {
                        // render new iframe
                        element.html(templates.contentFrame(extend({}, initOptions, {
                            content: options
                        })));
                    }
                }
            } else if (options.template) {
                // refresh template
                that.content(template(options.template)({
                }));
            }

            return that;
        },

        _ajaxRequest: function (options) {
            var that = this,
    contentTemplate = options.template,
                refreshIcon = that.wrapper.find(".k-window-titlebar .k-i-refresh"),
    loadingIconTimeout = setTimeout(function () {
        refreshIcon.addClass(LOADING);
    }, 100);

            $.ajax(extend({
                type: "GET",
                dataType: "html",
                cache: false,
                error: proxy(function (xhr, status) {
                    that.trigger(ERROR);
                }, that),
                complete: function () {
                    clearTimeout(loadingIconTimeout);
                    refreshIcon.removeClass(LOADING);
                },
                success: proxy(function (data, textStatus) {
                    if (contentTemplate) {
                        data = template(contentTemplate)(data || {});
                    }

                    that.element.html(data);

                    that.trigger(REFRESH);
                }, that)
            }, options));
        },


        destroy: function () {
            var that = this,
                modalWindows,
                shouldHideOverlay;

            that.wrapper.remove();

            modalWindows = openedModalWindows();

            shouldHideOverlay = that.options.modal && !modalWindows.length;

            if (shouldHideOverlay) {
                that._overlay(false).remove();
            } else if (modalWindows.length > 0) {
                windowObject(modalWindows.eq(modalWindows.length - 2))._overlay(true);
            }
        },

        _createWindow: function () {
            var that = this,
                contentHtml = that.element,
                options = that.options,
                iframeSrcAttributes,
                wrapper;

            if (options.scrollable === false) {
                contentHtml.attr("style", "overflow:hidden;");
            }

            if (options.iframe) {
                contentHtml.html(templates.contentFrame(options));
            }

            wrapper = $(templates.wrapper(options));

            if (options.title !== false) {
                wrapper.append(templates.titlebar(extend(templates, options)));
            }

            wrapper.toggleClass("k-rtl", !!that.element.closest(".k-rtl").length);

            // Collect the src attributes of all iframes and then set them to empty string.
            // This seems to fix this IE9 "feature": http://msdn.microsoft.com/en-us/library/gg622929%28v=VS.85%29.aspx?ppud=4
            iframeSrcAttributes = contentHtml.find("iframe").map(function (iframe) {
                var src = this.getAttribute("src");
                this.src = "";
                return src;
            });

            // Make sure the wrapper is appended to the body only once. IE9+ will throw exceptions if you move iframes in DOM
            wrapper
            .appendTo(that.appendTo)
            .append(contentHtml)
            .find("iframe").each(function (index) {
                // Restore the src attribute of the iframes when they are part of the live DOM tree
                this.src = iframeSrcAttributes[index];
            });

            contentHtml.show();
        }
    });

    templates = {
        wrapper: template("<div class='k-widget k-window' />"),
        action: template(
            "<a href='\\#' class='k-window-action k-link'>" +
    "<span class='k-icon k-i-#= name.toLowerCase() #'>#= name #</span>" +
"</a>"
),
        titlebar: template(
"<div class='k-window-titlebar k-header'>&nbsp;" +
            "<span class='k-window-title'>#= title #</span>" +
            "<div class='k-window-actions k-header'>" +
            "# for (var i = 0; i < actions.length; i++) { #" +
    "#= action({ name: actions[i] }) #" +
"# } #" +
            "</div>" +
"</div>"
),
        overlay: "<div class='k-overlay' />",
        contentFrame: template(
            "<iframe src='#= content.url #' title='#= title #' frameborder='0'" +
    " class='" + KCONTENTFRAME + "'>" +
                    "This page requires frames in order to show content" +
            "</iframe>"
        ),
        resizeHandle: template("<div class='k-resize-handle k-resize-#= data #'></div>")
    };


    function WindowResizing(wnd) {
        var that = this;

        that.owner = wnd;
        that._draggable = new Draggable(wnd.wrapper, {
            filter: KWINDOWRESIZEHANDLES,
            group: wnd.wrapper.id + "-resizing",
            dragstart: proxy(that.dragstart, that),
            drag: proxy(that.drag, that),
            dragend: proxy(that.dragend, that)
        });
    }

    WindowResizing.prototype = /** @ignore */ {
        dragstart: function (e) {
            var that = this,
                wnd = that.owner,
                wrapper = wnd.wrapper;

            that.elementPadding = parseInt(wnd.wrapper.css("padding-top"), 10);
            that.initialCursorPosition = wrapper.offset();

            that.resizeDirection = e.currentTarget.prop("className").replace("k-resize-handle k-resize-", "");

            that.initialSize = {
                width: wrapper.width(),
                height: wrapper.height()
            };

            that.containerOffset = wnd.appendTo.offset(),

            wrapper
                .append(templates.overlay)
                .find(KWINDOWRESIZEHANDLES).not(e.currentTarget).hide();

            $(BODY).css(CURSOR, e.currentTarget.css(CURSOR));
        },
        drag: function (e) {
            var that = this,
        wnd = that.owner,
        wrapper = wnd.wrapper,
        options = wnd.options,
        direction = that.resizeDirection,
        containerOffset = that.containerOffset,
        initialPosition = that.initialCursorPosition,
        initialSize = that.initialSize,
        newWidth, newHeight,
        windowBottom, windowRight,
        x = e.x.location,
        y = e.y.location;

            if (direction.indexOf("e") >= 0) {
                newWidth = x - initialPosition.left;

                wrapper.width(constrain(newWidth, options.minWidth, options.maxWidth));
            } else if (direction.indexOf("w") >= 0) {
                windowRight = initialPosition.left + initialSize.width;
                newWidth = constrain(windowRight - x, options.minWidth, options.maxWidth);

                wrapper.css({
                    left: windowRight - newWidth - containerOffset.left,
                    width: newWidth
                });
            }

            if (direction.indexOf("s") >= 0) {
                newHeight = y - initialPosition.top - that.elementPadding;

                wrapper.height(constrain(newHeight, options.minHeight, options.maxHeight));
            } else if (direction.indexOf("n") >= 0) {
                windowBottom = initialPosition.top + initialSize.height;
                newHeight = constrain(windowBottom - y, options.minHeight, options.maxHeight);

                wrapper.css({
                    top: windowBottom - newHeight - containerOffset.top,
                    height: newHeight
                });
            }

            wnd.trigger(RESIZE);
        },
        dragend: function (e) {
            var that = this,
                wnd = that.owner,
                wrapper = wnd.wrapper;

            wrapper
            .find(KOVERLAY).remove().end()
            .find(KWINDOWRESIZEHANDLES).not(e.currentTarget).show();

            $(BODY).css(CURSOR, "");

            if (wnd.touchScroller) {
                wnd.touchScroller.reset();
            }
            if (e.keyCode == 27) {
                wrapper.css(that.initialCursorPosition)
                    .css(that.initialSize);
            }

            return false;
        }
    };

    function WindowDragging(wnd) {
        var that = this;

        that.owner = wnd;
        that._draggable = new Draggable(wnd.wrapper, {
            filter: KWINDOWTITLEBAR,
            group: wnd.wrapper.id + "-moving",
            dragstart: proxy(that.dragstart, that),
            drag: proxy(that.drag, that),
            dragend: proxy(that.dragend, that),
            dragcancel: proxy(that.dragcancel, that)
        });
    }

    WindowDragging.prototype = /** @ignore */ {
        dragstart: function (e) {
            var wnd = this.owner,
                element = wnd.element,
                actions = element.find(".k-window-actions"),
                containerOffset = wnd.appendTo.offset();

            wnd.trigger(DRAGSTART);

            wnd.initialWindowPosition = wnd.wrapper.position();

            wnd.startPosition = {
                left: e.x.client - wnd.initialWindowPosition.left,
                top: e.y.client - wnd.initialWindowPosition.top
            };

            if (actions.length > 0) {
                wnd.minLeftPosition = actions.outerWidth() + parseInt(actions.css("right"), 10) - element.outerWidth();
            } else {
                wnd.minLeftPosition = 20 - element.outerWidth(); // at least 20px remain visible
            }

            wnd.minLeftPosition -= containerOffset.left;
            wnd.minTopPosition = -containerOffset.top;

            wnd.wrapper
                .append(templates.overlay)
                .find(KWINDOWRESIZEHANDLES).hide();

            $(BODY).css(CURSOR, e.currentTarget.css(CURSOR));
        },

        drag: function (e) {
            var wnd = this.owner,
                coordinates = {
                    left: Math.max(e.x.client - wnd.startPosition.left, wnd.minLeftPosition),
                    top: Math.max(e.y.client - wnd.startPosition.top, wnd.minTopPosition)
                };

            $(wnd.wrapper).css(coordinates);
        },

        dragcancel: function (e) {
            var wnd = this.owner;

            wnd.wrapper
                .find(KWINDOWRESIZEHANDLES).show().end()
                .find(KOVERLAY).remove();

            $(BODY).css(CURSOR, "");

            e.currentTarget.closest(KWINDOW).css(wnd.initialWindowPosition);
        },

        dragend: function (e) {
            var wnd = this.owner;

            wnd.wrapper
                .find(KWINDOWRESIZEHANDLES).show().end()
                .find(KOVERLAY).remove();

            $(BODY).css(CURSOR, "");

            wnd.trigger(DRAGEND);

            return false;
        }
    };

    function CloseModalWindow(that) {
        var wrapper = that.wrapper,
            options = that.options,
            showOptions = options.animation.open,
            hideOptions = options.animation.close,
            modalWindows,
            shouldHideOverlay, overlay;

        if (wrapper.is(VISIBLE) && !that.trigger(CLOSE)) {
            options.visible = false;

            modalWindows = openedModalWindows();

            shouldHideOverlay = options.modal && modalWindows.length == 1;

            overlay = options.modal ? that._overlay(true) : $(undefined);

            if (shouldHideOverlay) {
                if (hideOptions.duration) {
                    overlay.kendoStop().kendoAnimate({
                        effects: {
                            fadeOut: {
                                properties: {
                                    opacity: 0
                                }
                            }
                        },
                        duration: hideOptions.duration,
                        hide: true
                    });
                } else {
                    overlay.hide();
                }
            } else if (modalWindows.length) {
                windowObject(modalWindows.eq(modalWindows.length - 2))._overlay(true);
            }

            wrapper.kendoStop().kendoAnimate({
                effects: hideOptions.effects || showOptions.effects,
                reverse: hideOptions.reverse === true,
                duration: hideOptions.duration,
                complete: function () {
                    wrapper.hide();
                    that.trigger(DEACTIVATE);
                }
            });
        }

        if (that.options.isMaximized) {
            $("html, body").css(OVERFLOW, "");
            if (this._documentScrollTop && this._documentScrollTop > 0) {
                $(document).scrollTop(this._documentScrollTop);
            }
        }
    }

    kendo.ui.plugin(Window);

})(jQuery);

(function ($, undefined) {
    var kendo = window.kendo,
        keys = kendo.keys,
        ui = kendo.ui,
        Widget = ui.Widget,
        placeholderSupported = kendo.support.placeholder,
        touch = kendo.support.touch,
        getCulture = kendo.getCulture,
        CHANGE = "change",
        INPUT = "k-input",
        TYPE = touch ? "number" : "text",
        NULL = null,
        proxy = $.proxy;

    var AlphabetTextBox = Widget.extend({
        init: function (element, options) {
            var that = this,
              textTransform = options.textTransform,
              textType = options.textType,
              allowChar = (textType.toLowerCase() == "ip" ? "." : (textType.toLowerCase() == "time" ? ":" : options.allowChar)),
              value = options && options[value] !== undefined;

            Widget.fn.init.call(that, element, options);

            if (textType == "ip") {
                options.allowChar = ".";
                that.element.attr("maxLength", "15");
            }
            else if (textType == "contact") {
                options.allowChar = "";
                that.element.attr("maxLength", options.maxLength);
            }
            else if (textType == "time") {
                options.allowChar = (options.allowChar != undefined && options.allowChar != "" ? ":" : "");
                that.element.attr("maxLength", (options.allowChar != undefined && options.allowChar != "" ? "5" : "4")).css("width", "40px");
            }

            options = that.options;

            element = that.element.addClass(INPUT).css("text-transform", textTransform).attr("autocomplete", "off")
                            .keypress(proxy(that._keypress, that))
                            .blur(proxy(that._blur, that))
                                .change(proxy(that._removeWhiteSpace, that));

            element.closest("form")
                        .bind("reset", function () {
                            setTimeout(function () {
                                that.value(element[0].value);
                            });
                        });


            disabled = element.is("[disabled]");
            if (disabled) {
                that.enable(false);
            } else {
                that.readonly(element.is("[readonly]"));
            }



            kendo.notify(that);
        },

        options: {
            name: "AlphabetTextBox",
            textTransform: "none",
            allowChar: " ",
            textType: "default",
            value: NULL,
            placeholder: "",
            allNumericChar: "1234567890",
            maxLength: 15
        },
        events: [
CHANGE
        ],

        readonly: function (readonly) {
        },

        enable: function (enable) {
        },

        value: function (value) {
            var that = this, adjusted;
            that._text.css('color', 'black');

            if (value === undefined) {
                return that._value;
            }

            adjusted = that._adjust(value);

            if (value !== adjusted) {
                that._text.val(that.options.placeholder);
                that._text.css('color', 'gray');
                return;
            }

            that._old = that._value;
        },


        _adjust: function (value) {
            var that = this,
            options = that.options;

            if (value === NULL) {
                return value;
            }

            return value;
        },


        _blur: function () {
            var that = this,
                element = that.element[0],
                value = element.value,
                options = that.options,
                allowedChar = options.allowChar,
                textType = options.textType,
                ipTimeAllowedChar = (textType.toLowerCase() == "ip" ? "." : (textType.toLowerCase() == "time" ? allowedChar : "")),
                prevent = true,
                end;

            if (textType.toLowerCase() == "ip" || textType.toLowerCase() == "time") {
                var valueArr = value.split(ipTimeAllowedChar);
                if (textType.toLowerCase() == "ip") {
                    var modifiedIp = "";
                    if (value != "") {
                        for (var i = 0; i < 4; i++) {
                            if (valueArr.length >= i + 1) {
                                if (parseInt(valueArr[i]) > 255) {
                                    modifiedIp = (modifiedIp == "" ? "" : modifiedIp + ".") + "255";
                                }
                                else {
                                    modifiedIp = (modifiedIp == "" ? "" : modifiedIp + ".") + (valueArr[i] == "" ? "255" : ((parseInt(valueArr[i]) > 255 || parseInt(valueArr[i]) < 1) ? "255" : parseInt(valueArr[i]).toString()));
                                }
                            }
                            else
                                modifiedIp = (modifiedIp == "" ? "" : modifiedIp + ".") + "255";
                        }
                    }
                    that.element.val(modifiedIp);
                }
                else if (textType.toLowerCase() == "time") {
                    var modifiedTime = "";
                    if (ipTimeAllowedChar != "" && valueArr.length > 1) {
                        for (var i = 0; i < 2; i++) {
                            if (valueArr.length >= i + 1) {
                                if (parseInt(valueArr[i]) > (i == 0 ? 23 : 59)) {
                                    modifiedTime = (modifiedTime == "" ? "" : modifiedTime + ipTimeAllowedChar) + ((i == 0 ? 23 : 59).toString().length == 1 ? "0" : "") + (i == 0 ? 23 : 59).toString();
                                }
                                else {
                                    modifiedTime = (modifiedTime == "" ? "" : modifiedTime + ipTimeAllowedChar) + (valueArr[i] == "" ? "00" : (valueArr[i].length == 1 ? "0" : "") + valueArr[i]);
                                }
                            }
                            else
                                modifiedTime = (modifiedTime == "" ? "" : modifiedTime + ipTimeAllowedChar) + "00";
                        }
                    }
                    else {
                        if (value.length == 0) {
                            modifiedTime = "00" + ipTimeAllowedChar + "00";
                        }
                        else if (value.length < 2) {
                            modifiedTime = "0" + value + ipTimeAllowedChar + "00";
                        }
                        else if (value.length == 2) {
                            modifiedTime = (parseInt(value) > 23 ? "2300" : value + ipTimeAllowedChar + "00");
                        }
                        else if (value.length == 3) {
                            modifiedTime = (parseInt(value.substr(0, 2)) > 23 ? "23" : value.substr(0, 2)) + ipTimeAllowedChar + "0" + value.substr(2, 1);
                        }
                        else if (value.length == 4) {
                            modifiedTime = (parseInt(value.substr(0, 2)) > 23 ? "23" : value.substr(0, 2)) + ipTimeAllowedChar + (parseInt(value.substr(2, 2)) > 59 ? "59" : value.substr(2, 2));
                        }
                        else {
                            modifiedTime = "";
                        }
                    }
                    element.value = modifiedTime;
                    prevent = !(valueArr.length <= 2 && valueArr[valueArr.length - 1] != "");
                }
            }
        },

        _culture: function (culture) {
            return culture || getCulture(this.options.culture);
        },


        _keypress: function (e) {
            var that = this,
                    options = that.options,
                    key = (e.keyCode ? e.keyCode : e.which),
                    textType = options.textType,
                    charCode = "";

            if (e.keyCode != 0) charCode = String.fromCharCode(e.keyCode);
            else charCode = String.fromCharCode(e.charCode);

            //                $('#spn').text($('#spn').text() + e.which);
            if (textType.toLowerCase() == "ip" || textType.toLowerCase() == "time" || textType.toLowerCase() == "contact") {
                if (key == 32) {
                    e.preventDefault();
                    return;
                }
                //if (kendo.support.browser.mozilla == true) {
                //    if (e.which == 0 && (key == 46 || key == 9)) {
                //    }
                //    else if (key != 8 && !(key >= 33 && key <= 40 && e.which == 0) && that._prevent(key, charCode) && !e.ctrlKey) {
                //        e.preventDefault();
                //    }
                //}
                //else if (that._prevent(key, charCode) && !e.ctrlKey) {
                //    e.preventDefault();
                //}
            }
            else {
                //if (kendo.support.browser.mozilla == true) {
                //    if (e.which == 0 && (key == 46 || key == 9)) {
                //    }
                //    else if (key != 32 && key != 8 && !(key >= 33 && key <= 40 && e.which == 0) && that._prevent(key, charCode) && !e.ctrlKey) {
                //        e.preventDefault();
                //    }
                //}
                if (key != 32 && that._prevent(key, charCode) && !e.ctrlKey) {
                    e.preventDefault();
                }
            }
        },

        _numericRegex: function (numberFormat) {
            var that = this;
            var separator = numberFormat[POINT];
            var precision = that.options.decimals;

            if (separator === POINT) {
                separator = "\\" + separator;
            }

            if (precision === NULL) {
                precision = numberFormat.decimals;
            }

            if (precision === 0) {
                return INTEGER_REGEXP;
            }

            if (that._separator !== separator) {
                that._separator = separator;
                that._floatRegExp = new RegExp("^(-)?(((\\d+(" + separator + "\\d*)?)|(" + separator + "\\d*)))?$");
            }

            return that._floatRegExp;
        },

        _paste: function (e) {
            var that = this,
                    element = e.target,
                    value = element.value;

            setTimeout(function () {

            });
        },

        _prevent: function (key, char) {
            var that = this,
                    element = that.element[0],
            value = element.value,
            options = that.options,
            allowedChar = options.allowChar,
            textType = options.textType,
            prevent = true,
            ipTimeAllowedChar = (textType.toLowerCase() == "ip" ? "." : (textType.toLowerCase() == "time" ? allowedChar : (textType.toLowerCase() == "contact" ? allowedChar : ""))),
            end;
            if (textType.toLowerCase() == "ip" || textType.toLowerCase() == "time" || textType.toLowerCase() == "contact") {
                if (value != "" && ipTimeAllowedChar.indexOf(char) >= 0) {
                    var valueArr = value.split(ipTimeAllowedChar);
                    if (textType.toLowerCase() == "ip") {
                        var modifiedIp = "";
                        for (var i = 0; i < valueArr.length; i++) {
                            if (parseInt(valueArr[i]) > 255) {
                                modifiedIp = (modifiedIp == "" ? "" : modifiedIp + ".") + "255";
                            }
                            else {
                                modifiedIp = (modifiedIp == "" ? "" : modifiedIp + ".") + valueArr[i];
                            }
                        }
                        element.value = modifiedIp;
                        prevent = !(valueArr.length <= 3 && valueArr[valueArr.length - 1] != "");
                    }
                    else if (textType.toLowerCase() == "time") {
                        var modifiedTime = "";
                        for (var i = 0; i < valueArr.length; i++) {
                            if (parseInt(valueArr[i]) > (i == 0 ? 23 : 59)) {
                                modifiedTime = (modifiedTime == "" ? "" : modifiedTime + ":") + ((i == 0 ? 23 : 59).toString().length == 1 ? "0" : "") + (i == 0 ? 23 : 59).toString();
                            }
                            else {
                                modifiedTime = (modifiedTime == "" ? "" : modifiedTime + ":") + (valueArr[i].length == 1 ? "0" : "") + valueArr[i];
                            }
                        }
                        element.value = modifiedTime;
                        prevent = !(valueArr.length <= 2 && valueArr[valueArr.length - 1] != "");
                    }
                }
            }
            else {
                if (allowedChar.indexOf(char) >= 0) {
                    prevent = false;
                }
            }
            if (prevent) {
                if (textType.toLowerCase() == "ip" || textType.toLowerCase() == "time" || textType.toLowerCase() == "contact") {
                    if (options.allNumericChar.indexOf(char) >= 0 || ipTimeAllowedChar.indexOf(char) >= 0) {
                        prevent = false;
                    }
                }
                else if (textType.toLowerCase() == "default") {
                    prevent = false;
                }
                else if ((key >= 65 && key <= 90) || (key >= 97 && key < 123)) {
                    prevent = false;
                }
            }

            if (prevent && textType.toLowerCase().indexOf("alphanumeric") >= 0) {
                if (options.allNumericChar.indexOf(char) >= 0) {
                    prevent = false;
                }
            }

            return prevent;
        },

        _placeholder: function (value) {
            this._text.val(value);
            if (!placeholderSupported && !value) {
                this._text.val(this.options.placeholder);
            }
        },

        _removeWhiteSpace: function (e) {
            var that = this,
            element = e.target,
            value = element.value;
            value = value.replace(/(^\s*)|(\s*$)/gi, "").replace(/[ ]{2,}/gi, " ").replace(/\n +/, "\n");
            element.value = value;
        },

        _reset: function () {
            var that = this,
                element = that.element,
                formId = element.attr("form"),
                form = formId ? $("#" + formId) : element.closest("form");

            if (form[0]) {
                that._resetHandler = function () {
                    setTimeout(function () {
                        that.value(element[0].value);
                    });
                };

                that._form = form.on("reset", that._resetHandler);
            }
        }
    });

    function buttonHtml(className, text) {
        return '<span unselectable="on" class="k-link"><span unselectable="on" class="k-icon k-i-arrow-' + className + '" title="' + text + '">' + text + '</span></span>';
    }

    ui.plugin(AlphabetTextBox);



})(jQuery);

/* jshint eqnull: true */
(function ($, undefined) {
    var kendo = window.kendo,
        ui = kendo.ui,
        DataSource = kendo.data.DataSource,
        Groupable = ui.Groupable,
        tbodySupportsInnerHtml = kendo.support.tbodyInnerHtml,
        activeElement = kendo._activeElement,
        Widget = ui.Widget,
        keys = kendo.keys,
        isPlainObject = $.isPlainObject,
        extend = $.extend,
        map = $.map,
        grep = $.grep,
        isArray = $.isArray,
        inArray = $.inArray,
        push = Array.prototype.push,
        proxy = $.proxy,
        isFunction = kendo.isFunction,
        isEmptyObject = $.isEmptyObject,
        math = Math,
        PROGRESS = "progress",
        ERROR = "error",
        DATA_CELL = ":not(.k-group-cell):not(.k-hierarchy-cell):visible",
        SELECTION_CELL_SELECTOR = "tbody>tr:not(.k-grouping-row):not(.k-detail-row):not(.k-group-footer) > td:not(.k-group-cell):not(.k-hierarchy-cell)",
        NAVROW = "tr:not(.k-footer-template):visible",
        NAVCELL = ":not(.k-group-cell):not(.k-hierarchy-cell):visible",
        FIRSTNAVITEM = NAVROW + ":first>" + NAVCELL + ":first",
        HEADERCELLS = "th.k-header:not(.k-group-cell):not(.k-hierarchy-cell)",
        NS = ".kendoGridNew",
        EDIT = "edit",
        SAVE = "save",
        REMOVE = "remove",
        DETAILINIT = "detailInit",
        FILTERMENUINIT = "filterMenuInit",
        COLUMNMENUINIT = "columnMenuInit",
        CHANGE = "change",
        COLUMNHIDE = "columnHide",
        COLUMNSHOW = "columnShow",
        SAVECHANGES = "saveChanges",
        DATABOUND = "dataBound",
        DETAILEXPAND = "detailExpand",
        DETAILCOLLAPSE = "detailCollapse",
        FOCUSED = "k-state-focused",
        SELECTED = "k-state-selected",
        COLUMNRESIZE = "columnResize",
        COLUMNREORDER = "columnReorder",
        COLUMNLOCK = "columnLock",
        COLUMNUNLOCK = "columnUnlock",
        CLICK = "click",
        HEIGHT = "height",
        TABINDEX = "tabIndex",
        FUNCTION = "function",
        STRING = "string",
        DELETECONFIRM = "Are you sure you want to delete this record?",
        CONFIRMDELETE = "Delete",
        CANCELDELETE = "Cancel",
        formatRegExp = /(\}|\#)/ig,
        templateHashRegExp = /#/ig,
        whitespaceRegExp = "[\\x20\\t\\r\\n\\f]",
        nonDataCellsRegExp = new RegExp("(^|" + whitespaceRegExp + ")" + "(k-group-cell|k-hierarchy-cell)" + "(" + whitespaceRegExp + "|$)"),
        filterRowRegExp = new RegExp("(^|" + whitespaceRegExp + ")" + "(k-filter-row)" + "(" + whitespaceRegExp + "|$)"),
        COMMANDBUTTONTMPL = '<a class="k-button k-button-icontext #=className#" #=attr# href="\\#"><span class="#=iconClass# #=imageClass#"></span>#=text#</a>',
        isRtl = false,
        //browser = kendo.support.browser,
        browser = $.browser,
        isIE7 = browser.msie && browser.version == 7,
        isIE8 = browser.msie && browser.version == 8;

    var VirtualScrollable = Widget.extend({
        init: function (element, options) {
            var that = this;

            Widget.fn.init.call(that, element, options);
            that._refreshHandler = proxy(that.refresh, that);
            that.setDataSource(options.dataSource);
            that.wrap();
        },

        setDataSource: function (dataSource) {
            var that = this;
            if (that.dataSource) {
                that.dataSource.unbind(CHANGE, that._refreshHandler);
            }
            that.dataSource = dataSource;
            that.dataSource.bind(CHANGE, that._refreshHandler);
        },

        options: {
            name: "VirtualScrollable",
            itemHeight: $.noop,
            prefetch: true
        },

        destroy: function () {
            var that = this;

            Widget.fn.destroy.call(that);

            that.dataSource.unbind(CHANGE, that._refreshHandler);
            that.wrapper.add(that.verticalScrollbar).off(NS);

            if (that.drag) {
                that.drag.destroy();
                that.drag = null;
            }
            that.wrapper = that.element = that.verticalScrollbar = null;
            that._refreshHandler = null;
        },

        wrap: function () {
            var that = this,
                    // workaround for IE issue where scroll is not raised if container is same width as the scrollbar
                    scrollbar = kendo.support.scrollbar() + 1,
                    element = that.element,
                    wrapper;

            element.css({
                width: "auto",
                overflow: "hidden"
            }).css((isRtl ? "padding-left" : "padding-right"), scrollbar);
            that.content = element.children().first();
            wrapper = that.wrapper = that.content.wrap('<div class="k-virtual-scrollable-wrap"/>')
                                .parent()
                            .bind("DOMMouseScroll" + NS + " mousewheel" + NS, proxy(that._wheelScroll, that));

            if (kendo.support.kineticScrollNeeded) {
                that.drag = new kendo.UserEvents(that.wrapper, {
                    global: true,
                    start: function (e) {
                        e.sender.capture();
                    },
                    move: function (e) {
                        that.verticalScrollbar.scrollTop(that.verticalScrollbar.scrollTop() - e.y.delta);
                        wrapper.scrollLeft(wrapper.scrollLeft() - e.x.delta);
                        e.preventDefault();
                    }
                });
            }

            that.verticalScrollbar = $('<div class="k-scrollbar k-scrollbar-vertical" />')
                                        .css({
                                            width: scrollbar
                                        }).appendTo(element)
                                        .bind("scroll" + NS, proxy(that._scroll, that));
        },

        _wheelScroll: function (e) {
            if (e.ctrlKey) {
                return;
            }

            var scrollTop = this.verticalScrollbar.scrollTop(),
                delta = kendo.wheelDeltaY(e);

            if (delta) {
                e.preventDefault();
                //In Firefox DOMMouseScroll event cannot be canceled
                $(e.currentTarget).one("wheel" + NS, false);
                this.verticalScrollbar.scrollTop(scrollTop + (-delta));
            }
        },

        _scroll: function (e) {
            var that = this,
                delayLoading = !that.options.prefetch,
                scrollTop = e.currentTarget.scrollTop,
                dataSource = that.dataSource,
                rowHeight = that.itemHeight,
                skip = dataSource.skip() || 0,
                start = that._rangeStart || skip,
                height = that.element.innerHeight(),
                isScrollingUp = !!(that._scrollbarTop && that._scrollbarTop > scrollTop),
                firstItemIndex = math.max(math.floor(scrollTop / rowHeight), 0),
    lastItemIndex = math.max(firstItemIndex + math.floor(height / rowHeight), 0);

            that._scrollTop = scrollTop - (start * rowHeight);
            that._scrollbarTop = scrollTop;

            that._scrolling = delayLoading;

            if (!that._fetch(firstItemIndex, lastItemIndex, isScrollingUp)) {
                that.wrapper[0].scrollTop = that._scrollTop;
            }

            if (delayLoading) {
                if (that._scrollingTimeout) {
                    clearTimeout(that._scrollingTimeout);
                }

                that._scrollingTimeout = setTimeout(function () {
                    that._scrolling = false;
                    that._page(that._rangeStart, that.dataSource.take());
                }, 100);
            }
        },

        _fetch: function (firstItemIndex, lastItemIndex, scrollingUp) {
            var that = this,
    dataSource = that.dataSource,
    itemHeight = that.itemHeight,
    take = dataSource.take(),
    rangeStart = that._rangeStart || dataSource.skip() || 0,
    currentSkip = math.floor(firstItemIndex / take) * take,
    fetching = false,
    prefetchAt = 0.33;

            if (firstItemIndex < rangeStart) {

                fetching = true;
                rangeStart = math.max(0, lastItemIndex - take);
                that._scrollTop = (firstItemIndex - rangeStart) * itemHeight;
                that._page(rangeStart, take);

            } else if (lastItemIndex >= rangeStart + take && !scrollingUp) {

                fetching = true;
                rangeStart = firstItemIndex;
                that._scrollTop = itemHeight;
                that._page(rangeStart, take);

            } else if (!that._fetching && that.options.prefetch) {

                if (firstItemIndex < (currentSkip + take) - take * prefetchAt && firstItemIndex > take) {
                    dataSource.prefetch(currentSkip - take, take);
                }
                if (lastItemIndex > currentSkip + take * prefetchAt) {
                    dataSource.prefetch(currentSkip + take, take);
                }

            }
            return fetching;
        },

        _page: function (skip, take) {
            var that = this,
                delayLoading = !that.options.prefetch,
                dataSource = that.dataSource;

            clearTimeout(that._timeout);
            that._fetching = true;
            that._rangeStart = skip;

            if (dataSource.inRange(skip, take)) {
                dataSource.range(skip, take);
            } else {
                if (!delayLoading) {
                    kendo.ui.progress(that.wrapper.parent(), true);
                }

                that._timeout = setTimeout(function () {
                    if (!that._scrolling) {
                        if (delayLoading) {
                            kendo.ui.progress(that.wrapper.parent(), true);
                        }
                        dataSource.range(skip, take);
                    }
                }, 100);
            }
        },

        repaintScrollbar: function () {
            var that = this,
    html = "",
    maxHeight = 250000,
    dataSource = that.dataSource,
    scrollbar = !kendo.support.kineticScrollNeeded ? kendo.support.scrollbar() : 0,
    wrapperElement = that.wrapper[0],
    totalHeight,
    idx,
    itemHeight;

            itemHeight = that.itemHeight = that.options.itemHeight() || 0;

            var addScrollBarHeight = (wrapperElement.scrollWidth > wrapperElement.offsetWidth) ? scrollbar : 0;

            totalHeight = dataSource.total() * itemHeight + addScrollBarHeight;

            for (idx = 0; idx < math.floor(totalHeight / maxHeight) ; idx++) {
                html += '<div style="width:1px;height:' + maxHeight + 'px"></div>';
            }

            if (totalHeight % maxHeight) {
                html += '<div style="width:1px;height:' + (totalHeight % maxHeight) + 'px"></div>';
            }

            that.verticalScrollbar.html(html);
            wrapperElement.scrollTop = that._scrollTop;
        },

        refresh: function () {
            var that = this,
                dataSource = that.dataSource,
                rangeStart = that._rangeStart;

            kendo.ui.progress(that.wrapper.parent(), false);
            clearTimeout(that._timeout);

            that.repaintScrollbar();

            if (that.drag) {
                that.drag.cancel();
            }

            if (rangeStart && !that._fetching) { // we are rebound from outside local range should be reset
                that._rangeStart = dataSource.skip();

                if (dataSource.page() === 1) {// reset the scrollbar position if datasource is filtered
                    that.verticalScrollbar[0].scrollTop = 0;
                }
            }
            that._fetching = false;
        }
    });

    function groupCells(count) {
        return new Array(count + 1).join('<td class="k-group-cell">&nbsp;</td>');
    }

    function stringifyAttributes(attributes) {
        var attr,
            result = " ";

        if (attributes) {
            if (typeof attributes === STRING) {
                return attributes;
            }

            for (attr in attributes) {
                result += attr + '="' + attributes[attr] + '"';
            }
        }
        return result;
    }

    var defaultCommands = {
        create: {
            text: "Add new record",
            imageClass: "k-add",
            className: "k-grid-add",
            iconClass: "k-icon"
        },
        cancel: {
            text: "Cancel changes",
            imageClass: "k-cancel",
            className: "k-grid-cancel-changes",
            iconClass: "k-icon"
        },
        save: {
            text: "Save changes",
            imageClass: "k-update",
            className: "k-grid-save-changes",
            iconClass: "k-icon"
        },
        destroy: {
            text: "Delete",
            imageClass: "k-delete",
            className: "k-grid-delete",
            iconClass: "k-icon"
        },
        edit: {
            text: "Edit",
            imageClass: "k-edit",
            className: "k-grid-edit",
            iconClass: "k-icon"
        },
        update: {
            text: "Update",
            imageClass: "k-update",
            className: "k-primary k-grid-update",
            iconClass: "k-icon"
        },
        canceledit: {
            text: "Cancel",
            imageClass: "k-cancel",
            className: "k-grid-cancel",
            iconClass: "k-icon"
        },
        excel: {
            text: "Export to Excel",
            imageClass: "k-i-excel",
            className: "k-grid-excel",
            iconClass: "k-icon"
        },
        pdf: {
            text: "Export to PDF",
            imageClass: "k-i-pdf",
            className: "k-grid-pdf",
            iconClass: "k-icon"
        }
    };

    function heightAboveHeader(context) {
        var top = 0;
        $('> .k-grouping-header, > .k-grid-toolbar', context).each(function () {
            top += this.offsetHeight;
        });
        return top;
    }

    function cursor(context, value) {
        $('th, th .k-grid-filter, th .k-link', context)
            .add(document.body)
            .css('cursor', value);
    }

    function reorder(selector, source, dest, before, count) {
        var sourceIndex = source;
        source = $();
        count = count || 1;
        for (var idx = 0; idx < count; idx++) {
            source = source.add(selector.eq(sourceIndex + idx));
        }

        if (typeof dest == "number") {
            source[before ? "insertBefore" : "insertAfter"](selector.eq(dest));
        } else {
            source.appendTo(dest);
        }
    }

    function elements(lockedContent, content, filter) {
        return $(lockedContent).add(content).find(filter);
    }

    function attachCustomCommandEvent(context, container, commands) {
        var idx,
            length,
            command,
            commandName;

        commands = !isArray(commands) ? [commands] : commands;

        for (idx = 0, length = commands.length; idx < length; idx++) {
            command = commands[idx];

            if (isPlainObject(command) && command.click) {
                commandName = command.name || command.text;
                container.on(CLICK + NS, "a.k-grid-" + (commandName || "").replace(/\s/g, ""), {
                    commandName: commandName
                }, proxy(command.click, context));
            }
        }
    }

    function normalizeColumns(columns, encoded, hide) {
        return map(columns, function (column) {
            column = typeof column === STRING ? { field: column } : column;

            var hidden;

            if (!isVisible(column) || hide) {
                column.attributes = addHiddenStyle(column.attributes);
                column.footerAttributes = addHiddenStyle(column.footerAttributes);
                column.headerAttributes = addHiddenStyle(column.headerAttributes);
                hidden = true;
            }

            if (column.columns) {
                column.columns = normalizeColumns(column.columns, encoded, hidden);
            }

            return extend({ encoded: encoded, hidden: hidden }, column);
        });
    }

    function columnParent(column, columns) {
        var parents = [];
        columnParents(column, columns, parents);
        return parents[parents.length - 1];
    }

    function columnParents(column, columns, parents) {
        parents = parents || [];

        for (var idx = 0; idx < columns.length; idx++) {
            if (column === columns[idx]) {
                return true;
            } else if (columns[idx].columns) {
                var inserted = parents.length;
                parents.push(columns[idx]);
                if (!columnParents(column, columns[idx].columns, parents)) {
                    parents.splice(inserted, parents.length - inserted);
                } else {
                    return true;
                }
            }
        }
        return false;
    }

    function setColumnVisibility(column, visible) {
        var method = visible ? removeHiddenStyle : addHiddenStyle;
        column.hidden = !visible;
        column.attributes = method(column.attributes);
        column.footerAttributes = method(column.footerAttributes);
        column.headerAttributes = method(column.headerAttributes);
    }

    function isCellVisible() {
        return this.style.display !== "none";
    }

    function isVisible(column) {
        return visibleColumns([column]).length > 0;
    }

    function visibleColumns(columns) {
        return grep(columns, function (column) {
            var result = !column.hidden;
            if (result && column.columns) {
                result = visibleColumns(column.columns).length > 0;
            }
            return result;
        });
    }

    function toJQuery(elements) {
        return $(elements).map(function () {
            return this.toArray();
        });
    }

    function updateCellRowSpan(cell, columns, sourceLockedColumnsCount) {
        var lockedColumnDepth = depth(lockedColumns(columns));
        var nonLockedColumnDepth = depth(nonLockedColumns(columns));

        var rowSpan = cell.rowSpan;
        if (sourceLockedColumnsCount) {
            if (lockedColumnDepth > nonLockedColumnDepth) {
                cell.rowSpan = (rowSpan - (lockedColumnDepth - nonLockedColumnDepth)) || 1;
            } else {
                cell.rowSpan = rowSpan + (nonLockedColumnDepth - lockedColumnDepth);
            }
        } else {
            if (lockedColumnDepth > nonLockedColumnDepth) {
                cell.rowSpan = rowSpan + (lockedColumnDepth - nonLockedColumnDepth);
            } else {
                cell.rowSpan = (rowSpan - (nonLockedColumnDepth - lockedColumnDepth)) || 1;
            }
        }
    }

    function moveCellsBetweenContainers(sources, target, leafs, columns, container, destination, groups) {
        var sourcesDepth = depth(sources);
        var targetDepth = depth([target]);

        if (sourcesDepth > targetDepth) {
            var groupCells = new Array(groups + 1).join('<th class="k-group-cell k-header">&nbsp;</th>');
            var rows = destination.children(":not(.k-filter-row)");
            $(new Array((sourcesDepth - targetDepth) + 1).join("<tr>" + groupCells + "</tr>")).insertAfter(rows.last());
        }

        addRowSpanValue(destination, sourcesDepth - targetDepth);

        moveCells(leafs, columns, container, destination);
    }

    function updateCellIndex(thead, columns, offset) {
        offset = offset || 0;

        var position;
        var cell;
        var allColumns = columns;
        columns = leafColumns(columns);

        var cells = {};
        var rows = thead.find(">tr:not(.k-filter-row)");

        var filter = function () {
            var el = $(this);
            return !el.hasClass("k-group-cell") && !el.hasClass("k-hierarchy-cell");
        };

        for (var idx = 0, length = columns.length; idx < length; idx++) {
            position = columnPosition(columns[idx], allColumns);

            if (!cells[position.row]) {
                cells[position.row] = rows.eq(position.row)
                    .find(".k-header")
                    .filter(filter);
            }

            cell = cells[position.row].eq(position.cell);
            cell.attr(kendo.attr("index"), offset + idx);
        }


        return columns.length;
    }

    function depth(columns) {
        var result = 1;
        var max = 0;

        for (var idx = 0; idx < columns.length; idx++) {
            if (columns[idx].columns) {
                var temp = depth(columns[idx].columns);
                if (temp > max) {
                    max = temp;
                }
            }
        }
        return result + max;
    }

    function moveCells(leafs, columns, container, destination) {
        var sourcePosition = columnVisiblePosition(leafs[0], columns);

        var ths = container.find(">tr:not(.k-filter-row):eq(" + sourcePosition.row + ")>th.k-header");

        var t = $();
        var sourceIndex = sourcePosition.cell;
        var idx;

        for (idx = 0; idx < leafs.length; idx++) {
            t = t.add(ths.eq(sourceIndex + idx));
        }

        destination.find(">tr:not(.k-filter-row)").eq(sourcePosition.row).append(t);

        var children = [];
        for (idx = 0; idx < leafs.length; idx++) {
            if (leafs[idx].columns) {
                children = children.concat(leafs[idx].columns);
            }
        }

        if (children.length) {
            moveCells(children, columns, container, destination);
        }
    }

    function columnPosition(column, columns, row, cellCounts) {
        var result;
        var idx;

        row = row || 0;
        cellCounts = cellCounts || {
        };
        cellCounts[row] = cellCounts[row] || 0;

        for (idx = 0; idx < columns.length; idx++) {
            if (columns[idx] == column) {
                result = {
                    cell: cellCounts[row], row: row
                };
                break;
            } else if (columns[idx].columns) {
                result = columnPosition(column, columns[idx].columns, row + 1, cellCounts);
                if (result) {
                    break;
                }
            }

            cellCounts[row]++;
        }
        return result;
    }
    function findParentColumnWithChildren(columns, index, source, rtl) {
        var target;
        var locked = source.locked;

        do {
            target = columns[index];
            index += rtl ? 1 : -1;
        } while (target && index > -1 && index < columns.length && target != source && !target.columns && target.locked == locked);

        return target;
    }

    function findReorderTarget(columns, target, source, before) {
        if (target.columns) {
            target = target.columns;
            return target[before ? 0 : target.length - 1];
        } else {
            var parent = columnParent(target, columns);
            var parentColumns;

            if (parent) {
                parentColumns = parent.columns;
            } else {
                parentColumns = columns;
            }

            var index = inArray(target, parentColumns);
            if (index === 0 && before) {
                index++;
            } else if (index == parentColumns.length - 1 && !before) {
                index--;
            } else if (index > 0 || (index === 0 && !before)) {
                index += before ? -1 : 1;
            }

            var sourceIndex = inArray(source, parentColumns);
            target = findParentColumnWithChildren(parentColumns, index, source, sourceIndex > index);

            if (target && target != source && target.columns) {
                return findReorderTarget(columns, target, source, before);
            }
        }
        return null;
    }


    function columnVisiblePosition(column, columns, row, cellCounts) {
        var result;
        var idx;

        row = row || 0;
        cellCounts = cellCounts || {};
        cellCounts[row] = cellCounts[row] || 0;

        for (idx = 0; idx < columns.length; idx++) {
            if (columns[idx] == column) {
                result = {
                    cell: cellCounts[row], row: row
                };
                break;
            } else if (columns[idx].columns) {
                result = columnVisiblePosition(column, columns[idx].columns, row + 1, cellCounts);
                if (result) {
                    break;
                }
            }

            if (!columns[idx].hidden) {
                cellCounts[row]++;
            }
        }
        return result;
    }

    function flatColumnsInDomOrder(columns) {
        var result = flatColumns(lockedColumns(columns));
        return result.concat(flatColumns(nonLockedColumns(columns)));
    }

    function flatColumns(columns) {
        var result = [];
        var children = [];
        for (var idx = 0; idx < columns.length; idx++) {
            result.push(columns[idx]);
            if (columns[idx].columns) {
                children = children.concat(columns[idx].columns);
            }

        }
        if (children.length) {
            result = result.concat(flatColumns(children));
        }
        return result;
    }

    function hiddenLeafColumnsCount(columns) {
        var counter = 0;
        var column;

        for (var idx = 0; idx < columns.length; idx++) {
            column = columns[idx];

            if (column.columns) {
                counter += hiddenLeafColumnsCount(column.columns);
            } else if (column.hidden) {
                counter++;
            }
        }
        return counter;
    }

    function columnsWidth(cols) {
        var colWidth, width = 0;

        for (var idx = 0, length = cols.length; idx < length; idx++) {
            colWidth = cols[idx].style.width;
            if (colWidth && colWidth.indexOf("%") == -1) {
                width += parseInt(colWidth, 10);
            }
        }

        return width;
    }

    function removeRowSpanValue(container, count) {
        var cells = container.find("tr:not(.k-filter-row) th:not(.k-group-cell,.k-hierarchy-cell)");

        var rowSpan;
        for (var idx = 0; idx < cells.length; idx++) {
            rowSpan = cells[idx].rowSpan;
            if (rowSpan > 1) {
                cells[idx].rowSpan = (rowSpan - count) || 1;
            }
        }
    }

    function addRowSpanValue(container, count) {
        var cells = container.find("tr:not(.k-filter-row) th:not(.k-group-cell,.k-hierarchy-cell)");

        for (var idx = 0; idx < cells.length; idx++) {
            cells[idx].rowSpan += count;
        }
    }

    function removeEmptyRows(container) {
        var rows = container.find("tr:not(.k-filter-row)");

        var emptyRowsCount = rows.filter(function () {
            return !$(this).children().length;
        }).remove().length;

        var cells = rows.find("th:not(.k-group-cell,.k-hierarchy-cell)");

        for (var idx = 0; idx < cells.length; idx++) {
            if (cells[idx].rowSpan > 1) {
                cells[idx].rowSpan -= emptyRowsCount;
            }
        }
        return rows.length - emptyRowsCount;
    }

    function mapColumnToCellRows(columns, cells, rows, rowIndex, offset) {
        var idx, row, length, children = [];

        for (idx = 0, length = columns.length; idx < length; idx++) {
            row = rows[rowIndex] || [];
            row.push(cells.eq(offset + idx));
            rows[rowIndex] = row;

            if (columns[idx].columns) {
                children = children.concat(columns[idx].columns);
            }
        }

        if (children.length) {
            mapColumnToCellRows(children, cells, rows, rowIndex + 1, offset + columns.length);
        }
    }

    function lockedColumns(columns) {
        return grep(columns, function (column) {
            return column.locked;
        });
    }

    function nonLockedColumns(columns) {
        return grep(columns, function (column) {
            return !column.locked;
        });
    }

    function visibleNonLockedColumns(columns) {
        return grep(columns, function (column) {
            return !column.locked && isVisible(column);
        });
    }

    function visibleLockedColumns(columns) {
        return grep(columns, function (column) {
            return column.locked && isVisible(column);
        });
    }

    function visibleLeafColumns(columns) {
        var result = [];

        for (var idx = 0; idx < columns.length; idx++) {
            if (columns[idx].hidden) {
                continue;
            }

            if (columns[idx].columns) {
                result = result.concat(visibleLeafColumns(columns[idx].columns));
            } else {
                result.push(columns[idx]);
            }
        }

        return result;
    }

    function leafColumns(columns) {
        var result = [];

        for (var idx = 0; idx < columns.length; idx++) {
            if (!columns[idx].columns) {
                result.push(columns[idx]);
                continue;
            }
            result = result.concat(leafColumns(columns[idx].columns));
        }

        return result;
    }

    function leafDataCells(container) {
        var rows = container.find(">tr:not(.k-filter-row)");

        var filter = function () {
            var el = $(this);
            return !el.hasClass("k-group-cell") && !el.hasClass("k-hierarchy-cell");
        };

        var cells = $();
        if (rows.length > 1) {
            cells = rows.find("th")
                .filter(filter)
                .filter(function () {
                    return this.rowSpan > 1;
                });
        }

        cells = cells.add(rows.last().find("th").filter(filter));

        var indexAttr = kendo.attr("index");
        cells.sort(function (a, b) {
            a = $(a);
            b = $(b);

            var indexA = a.attr(indexAttr);
            var indexB = b.attr(indexAttr);

            if (indexA === undefined) {
                indexA = $(a).index();
            }
            if (indexB === undefined) {
                indexB = $(b).index();
            }

            indexA = parseInt(indexA, 10);
            indexB = parseInt(indexB, 10);
            return indexA > indexB ? 1 : (indexA < indexB ? -1 : 0);
        });

        return cells;
    }

    function parentColumnsCells(cell) {
        var container = cell.closest("table");
        var result = $().add(cell);

        var row = cell.closest("tr");
        var headerRows = container.find("tr:not(.k-filter-row)");
        var level = headerRows.index(row);
        if (level > 0) {
            var parent = headerRows.eq(level - 1);
            var parentCellsWithChildren = parent.find("th:not(.k-group-cell,.k-hierarchy-cell)").filter(function () {
                return !$(this).attr("rowspan");
            });

            var offset = 0;
            var index = row.find("th:not(.k-group-cell,.k-hierarchy-cell)").index(cell);

            var prevCells = cell.prevAll(":not(.k-group-cell,.k-hierarchy-cell)").filter(function () {
                return this.colSpan > 1;
            });

            for (idx = 0; idx < prevCells.length; idx++) {
                offset += prevCells[idx].colSpan || 1;
            }

            index += Math.max(offset - 1, 0);

            offset = 0;
            for (var idx = 0; idx < parentCellsWithChildren.length; idx++) {
                var parentCell = parentCellsWithChildren.eq(idx);
                if (parentCell.attr("colSpan")) {
                    offset += parentCell[0].colSpan;
                } else {
                    offset += 1;
                }
                if (index >= idx && index < offset) {
                    result = parentColumnsCells(parentCell).add(result);
                    break;
                }
            }
        }
        return result;
    }

    function childColumnsCells(cell) {
        var container = cell.closest("table");
        var result = $().add(cell);

        var row = cell.closest("tr");
        var headerRows = container.find("tr:not(.k-filter-row)");
        var level = headerRows.index(row) + cell[0].rowSpan;
        var colSpanAttr = kendo.attr("colspan");

        if (level <= headerRows.length - 1) {
            var child = row.next();
            var index = row.find("th:not(.k-group-cell,.k-hierarchy-cell)").index(cell);
            var prevCells = cell.prevAll(":not(.k-group-cell,.k-hierarchy-cell)");

            var idx;

            prevCells = prevCells.filter(function () {
                return !this.rowSpan || this.rowSpan === 1;
            });

            var offset = 0;

            for (idx = 0; idx < prevCells.length; idx++) {
                offset += parseInt(prevCells.eq(idx).attr(colSpanAttr), 10) || 1;
            }

            var cells = child.find("th:not(.k-group-cell,.k-hierarchy-cell)");
            var colSpan = parseInt(cell.attr(colSpanAttr), 10) || 1;

            idx = 0;

            while (idx < colSpan) {
                child = cells.eq(idx + offset);
                result = result.add(childColumnsCells(child));
                var value = parseInt(child.attr(colSpanAttr), 10);
                if (value > 1) {
                    colSpan -= value - 1;
                }
                idx++;
            }
        }

        return result;
    }

    function appendContent(tbody, table, html) {
        var placeholder,
            tmp = tbody;

        if (tbodySupportsInnerHtml) {
            tbody[0].innerHTML = html;
        } else {
            placeholder = document.createElement("div");
            placeholder.innerHTML = "<table><tbody>" + html + "</tbody></table>";
            tbody = placeholder.firstChild.firstChild;
            table[0].replaceChild(tbody, tmp[0]);
            tbody = $(tbody);
        }
        return tbody;
    }

    function addHiddenStyle(attr) {
        attr = attr || {
        };
        var style = attr.style;

        if (!style) {
            style = "display:none";
        } else {
            style = style.replace(/((.*)?display)(.*)?:([^;]*)/i, "$1:none");
            if (style === attr.style) {
                style = style.replace(/(.*)?/i, "display:none;$1");
            }
        }

        return extend({
        }, attr, {
            style: style
        });
    }

    function removeHiddenStyle(attr) {
        attr = attr || {
        };
        var style = attr.style;

        if (style) {
            attr.style = style.replace(/(display\s*:\s*none\s*;?)*/ig, "");
        }

        return attr;
    }

    function normalizeCols(table, visibleColumns, hasDetails, groups) {
        var colgroup = table.find(">colgroup"),
            width,
            cols = map(visibleColumns, function (column) {
                width = column.width;
                if (width && parseInt(width, 10) !== 0) {
                    return kendo.format('<col style="width:{0}"/>', typeof width === STRING ? width : width + "px");
                }

                return "<col />";
            });

        if (hasDetails || colgroup.find(".k-hierarchy-col").length) {
            cols.splice(0, 0, '<col class="k-hierarchy-col" />');
        }

        if (colgroup.length) {
            colgroup.remove();
        }

        colgroup = $(new Array(groups + 1).join('<col class="k-group-col">') + cols.join(""));
        if (!colgroup.is("colgroup")) {
            colgroup = $("<colgroup/>").append(colgroup);
        }

        table.prepend(colgroup);

        // fill gap after column hiding
        if (browser.msie && browser.version == 8) {
            table.css("display", "inline-table");
            window.setTimeout(function () {
                table.css("display", "");
            }, 1);
        }
    }

    function normalizeHeaderCells(th, columns) {
        var lastIndex = 0;
        var idx, len;

        for (idx = 0, len = columns.length; idx < len; idx++) {
            if (columns[idx].locked) {
                th.eq(idx).insertBefore(th.eq(lastIndex));
                lastIndex++;
            }
        }
    }

    function convertToObject(array) {
        var result = {},
            item,
            idx,
            length;

        for (idx = 0, length = array.length; idx < length; idx++) {
            item = array[idx];
            result[item.value] = item.text;
        }

        return result;
    }

    function formatGroupValue(value, format, columnValues) {
        var isForiegnKey = columnValues && columnValues.length && isPlainObject(columnValues[0]) && "value" in columnValues[0],
            groupValue = isForiegnKey ? convertToObject(columnValues)[value] : value;

        groupValue = groupValue != null ? groupValue : "";

        return format ? kendo.format(format, groupValue) : groupValue;
    }

    function setCellVisibility(cells, index, visible) {
        var pad = 0,
            state,
            cell = cells[pad];

        while (cell) {
            state = visible ? true : cell.style.display !== "none";

            if (state && !nonDataCellsRegExp.test(cell.className) && --index < 0) {
                cell.style.display = visible ? "" : "none";
                break;
            }

            cell = cells[++pad];
        }
    }

    function hideColumnCells(rows, columnIndex) {
        var idx = 0,
            length = rows.length,
            cell, row;

        for (; idx < length; idx += 1) {
            row = rows.eq(idx);
            if (row.is(".k-grouping-row,.k-detail-row")) {
                cell = row.children(":not(.k-group-cell):first,.k-detail-cell").last();
                cell.attr("colspan", parseInt(cell.attr("colspan"), 10) - 1);
            } else {
                if (row.hasClass("k-grid-edit-row") && (cell = row.children(".k-edit-container")[0])) {
                    cell = $(cell);
                    cell.attr("colspan", parseInt(cell.attr("colspan"), 10) - 1);
                    cell.find("col").eq(columnIndex).remove();
                    row = cell.find("tr:first");
                }

                setCellVisibility(row[0].cells, columnIndex, false);
            }
        }
    }

    function groupRows(data) {
        var result = [];
        var item;

        for (var idx = 0; idx < data.length; idx++) {
            item = data[idx];
            if (!("field" in item && "value" in item && "items" in item)) {
                break;
            }

            result.push(item);

            if (item.hasSubgroups) {
                result = result.concat(groupRows(item.items));
            }
        }

        return result;
    }

    function showColumnCells(rows, columnIndex) {
        var idx = 0,
            length = rows.length,
            cell, row, columns;

        for (; idx < length; idx += 1) {
            row = rows.eq(idx);
            if (row.is(".k-grouping-row,.k-detail-row")) {
                cell = row.children(":not(.k-group-cell):first,.k-detail-cell").last();
                cell.attr("colspan", parseInt(cell.attr("colspan"), 10) + 1);
            } else {
                if (row.hasClass("k-grid-edit-row") && (cell = row.children(".k-edit-container")[0])) {
                    cell = $(cell);
                    cell.attr("colspan", parseInt(cell.attr("colspan"), 10) + 1);
                    normalizeCols(cell.find(">form>table"), visibleColumns(columns), false, 0);
                    row = cell.find("tr:first");
                }

                setCellVisibility(row[0].cells, columnIndex, true);
            }
        }
    }

    function updateColspan(toAdd, toRemove, num) {
        num = num || 1;

        var item, idx, length;
        for (idx = 0, length = toAdd.length; idx < length; idx++) {
            item = toAdd.eq(idx).children().last();
            item.attr("colspan", parseInt(item.attr("colspan"), 10) + num);

            item = toRemove.eq(idx).children().last();
            item.attr("colspan", parseInt(item.attr("colspan"), 10) - num);
        }
    }

    function tableWidth(table) {
        var idx, length, width = 0;
        var cols = table.find(">colgroup>col");

        for (idx = 0, length = cols.length; idx < length; idx += 1) {
            width += parseInt(cols[idx].style.width, 10);
        }

        return width;
    }

    var GridNew = Widget.extend({
        init: function (element, options, events) {
            var that = this;

            options = isArray(options) ? {
                dataSource: options
            } : options;

            Widget.fn.init.call(that, element, options);

            if (events) {
                that._events = events;
            }

            isRtl = kendo.support.isRtl(element);

            that._element();

            that._aria();

            that._columns(that.options.columns);

            that._dataSource();

            that._tbody();

            that._pageable();

            that._thead();

            that._groupable();

            that._toolbar();

            that._setContentHeight();

            that._templates();

            that._navigatable();

            that._selectable();

            that._clipboard();

            that._details();

            that._editable();

            that._attachCustomCommandsEvent();

            that._minScreenSupport();

            if (that.options.autoBind) {
                that.dataSource.fetch();
            } else {
                that._footer();
            }

            if (that.lockedContent) {
                that.wrapper.addClass("k-grid-lockedcolumns");
                that._resizeHandler = function () {
                    that.resize();
                };
                $(window).on("resize" + NS, that._resizeHandler);
            }

            kendo.notify(that);
        },

        events: [
CHANGE,
"dataBinding",
"cancel",
DATABOUND,
DETAILEXPAND,
DETAILCOLLAPSE,
DETAILINIT,
FILTERMENUINIT,
COLUMNMENUINIT,
EDIT,
SAVE,
REMOVE,
SAVECHANGES,
COLUMNRESIZE,
COLUMNREORDER,
COLUMNSHOW,
COLUMNHIDE,
COLUMNLOCK,
COLUMNUNLOCK
        ],

        setDataSource: function (dataSource) {
            var that = this;
            var scrollable = that.options.scrollable;

            that.options.dataSource = dataSource;

            that._dataSource();

            that._pageable();

            that._thead();

            if (scrollable) {
                if (scrollable.virtual) {
                    that.content.find(">.k-virtual-scrollable-wrap").scrollLeft(0);
                } else {
                    that.content.scrollLeft(0);
                }
            }

            if (that.options.groupable) {
                that._groupable();
            }

            if (that.virtualScrollable) {
                that.virtualScrollable.setDataSource(that.options.dataSource);
            }

            if (that.options.navigatable) {
                that._navigatable();
            }

            if (that.options.selectable) {
                that._selectable();
            }

            if (that.options.autoBind) {
                dataSource.fetch();
            }
        },

        options: {
            name: "GridNew",
            columns: [],
            toolbar: null,
            autoBind: true,
            filterable: false,
            scrollable: true,
            sortable: false,
            selectable: false,
            allowCopy: false,
            navigatable: false,
            pageable: false,
            editable: false,
            groupable: false,
            rowTemplate: "",
            altRowTemplate: "",
            dataSource: {},
            height: null,
            resizable: false,
            reorderable: false,
            columnMenu: false,
            detailTemplate: null,
            columnResizeHandleWidth: 3,
            mobile: "",
            messages: {
                editable: {
                    cancelDelete: CANCELDELETE,
                    confirmation: DELETECONFIRM,
                    confirmDelete: CONFIRMDELETE
                },
                commands: {
                    create: defaultCommands.create.text,
                    cancel: defaultCommands.cancel.text,
                    save: defaultCommands.save.text,
                    destroy: defaultCommands.destroy.text,
                    edit: defaultCommands.edit.text,
                    update: defaultCommands.update.text,
                    canceledit: defaultCommands.canceledit.text,
                    excel: defaultCommands.excel.text,
                    pdf: defaultCommands.pdf.text
                }
            }
        },

        destroy: function () {
            var that = this,
                element;

            that._destroyColumnAttachments();

            Widget.fn.destroy.call(that);

            if (that._resizeHandler) {
                $(window).off("resize" + NS, that._resizeHandler);
            }

            if (that.pager && that.pager.element) {
                that.pager.destroy();
            }

            that.pager = null;

            if (that.groupable && that.groupable.element) {
                that.groupable.element.kendoGroupable("destroy");
            }

            that.groupable = null;

            if (that.options.reorderable) {
                that.wrapper.data("kendoReorderable").destroy();
            }

            if (that.selectable && that.selectable.element) {
                that.selectable.destroy();

                that.clearArea();

                if (that.copyHandler) {
                    that.wrapper.off("keydown", that.copyHandler);
                    that.unbind(that.copyHandler);
                }
                if (that.updateClipBoardState) {
                    that.unbind(that.updateClipBoardState);
                    that.updateClipBoardState = null;
                }
                if (that.clearAreaHandler) {
                    that.wrapper.off("keyup", that.clearAreaHandler);
                }
            }

            that.selectable = null;

            if (that.resizable) {
                that.resizable.destroy();

                if (that._resizeUserEvents) {
                    if (that._resizeHandleDocumentClickHandler) {
                        $(document).off("click", that._resizeHandleDocumentClickHandler);
                    }
                    that._resizeUserEvents.destroy();
                    that._resizeUserEvents = null;
                }
                that.resizable = null;
            }

            if (that.virtualScrollable && that.virtualScrollable.element) {
                that.virtualScrollable.destroy();
            }

            that.virtualScrollable = null;

            that._destroyEditable();

            if (that.dataSource) {
                that.dataSource.unbind(CHANGE, that._refreshHandler)
                           .unbind(PROGRESS, that._progressHandler)
                       .unbind(ERROR, that._errorHandler);

                that._refreshHandler = that._progressHandler = that._errorHandler = null;
            }

            element = that.element
                .add(that.wrapper)
                .add(that.table)
.add(that.thead)
.add(that.wrapper.find(">.k-grid-toolbar"));

            if (that.content) {
                element = element
                        .add(that.content)
                        .add(that.content.find(">.k-virtual-scrollable-wrap"));
            }

            if (that.lockedHeader) {
                that._removeLockedContainers();
            }

            if (that.pane) {
                that.pane.destroy();
            }

            if (that.minScreenResizeHandler) {
                $(window).off("resize", that.minScreenResizeHandler);
            }

            if (that._draggableInstance && that._draggableInstance.element) {
                that._draggableInstance.destroy();
            }

            that._draggableInstance = null;

            element.off(NS);

            kendo.destroy(that.wrapper);

            that.rowTemplate =
            that.altRowTemplate =
            that.lockedRowTemplate =
            that.lockedAltRowTemplate =
            that.detailTemplate =
            that.footerTemplate =
            that.groupFooterTemplate =
            that.lockedGroupFooterTemplate = null;


            that.scrollables =
            that.thead =
            that.tbody =
            that.element =
        that.table =
        that.content =
            that.footer =
        that.wrapper =
        that._groupableClickHandler =
        that._setContentWidthHandler = null;
        },

        getOptions: function () {
            var options = this.options;
            options.dataSource = null;

            var result = extend(true, {
            }, this.options);
            result.columns = kendo.deepExtend([], this.columns);

            var dataSource = this.dataSource;

            var initialData = dataSource.options.data && dataSource._data;
            dataSource.options.data = null;
            result.dataSource = $.extend(true, {}, dataSource.options);

            result.dataSource.data = initialData;
            result.dataSource.page = dataSource.page();
            result.dataSource.filter = dataSource.filter();
            result.dataSource.pageSize = dataSource.pageSize();
            result.dataSource.sort = dataSource.sort();
            result.dataSource.group = dataSource.group();
            result.dataSource.aggregate = dataSource.aggregate();

            //result.$angular = undefined;

            return result;
        },

        setOptions: function (options) {
            var currentOptions = this.getOptions();
            kendo.deepExtend(currentOptions, options);
            if (!options.dataSource) {
                currentOptions.dataSource = this.dataSource;
            }
            var wrapper = this.wrapper;
            var events = this._events;
            var element = this.element;

            this.destroy();
            this.options = null;
            if (this._isMobile) {
                var mobileWrapper = wrapper.closest(kendo.roleSelector("pane")).parent();
                mobileWrapper.after(wrapper);
                mobileWrapper.remove();
                wrapper.removeClass("k-grid-mobile");
            }
            if (wrapper[0] !== element[0]) {
                wrapper.before(element);
                wrapper.remove();
            }
            element.empty();

            this.init(element, currentOptions, events);
            this._setEvents(currentOptions);

        },

        items: function () {
            if (this.lockedContent) {
                return this._items(this.tbody).add(this._items(this.lockedTable.children("tbody")));
            } else {
                return this._items(this.tbody);
            }
        },

        _items: function (container) {
            return container.children().filter(function () {
                var tr = $(this);
                return !tr.hasClass("k-grouping-row") && !tr.hasClass("k-detail-row") && !tr.hasClass("k-group-footer");
            });
        },

        dataItems: function () {
            var dataItems = kendo.ui.DataBoundWidget.fn.dataItems.call(this);
            if (this.lockedContent) {
                var n = dataItems.length, tmp = new Array(2 * n);
                for (var i = n; --i >= 0;) {
                    tmp[i] = tmp[i + n] = dataItems[i];
                }
                dataItems = tmp;
            }

            return dataItems;
        },

        _destroyColumnAttachments: function () {
            var that = this;

            that.resizeHandle = null;

            if (!that.thead) {
                return;
            }

            //this.angular("cleanup", function () {
            //    return { elements: that.thead.get() };
            //});

            that.thead.find("th").each(function () {
                var th = $(this),
                    filterMenu = th.data("kendoFilterMenu"),
                    sortable = th.data("kendoColumnSorter"),
                    columnMenu = th.data("kendoColumnMenu");

                if (filterMenu) {
                    filterMenu.destroy();
                }

                if (sortable) {
                    sortable.destroy();
                }

                if (columnMenu) {
                    columnMenu.destroy();
                }
            });
        },

        _attachCustomCommandsEvent: function () {
            var that = this,
                columns = leafColumns(that.columns || []),
                command,
                idx,
                    length;

            for (idx = 0, length = columns.length; idx < length; idx++) {
                command = columns[idx].command;

                if (command) {
                    attachCustomCommandEvent(that, that.wrapper, command);
                }
            }
        },

        _aria: function () {
            var id = this.element.attr("id") || "aria";

            if (id) {
                this._cellId = id + "_active_cell";
            }
        },

        _element: function () {
            var that = this,
                table = that.element;

            if (!table.is("table")) {
                if (that.options.scrollable) {
                    table = that.element.find("> .k-grid-content > table");
                } else {
                    table = that.element.children("table");
                }

                if (!table.length) {
                    table = $("<table />").appendTo(that.element);
                }
            }

            if (isIE7) {
                table.attr("cellspacing", 0);
            }

            that.table = table.attr("role", that._hasDetails() ? "treegrid" : "grid");

            that._wrapper();
        },

        _createResizeHandle: function (container, th) {
            var that = this;
            var indicatorWidth = that.options.columnResizeHandleWidth;
            var scrollable = that.options.scrollable;
            var resizeHandle = that.resizeHandle;
            var groups = this._groups();
            var left;

            if (resizeHandle && that.lockedContent && resizeHandle.data("th")[0] !== th[0]) {
                resizeHandle.off(NS).remove();
                resizeHandle = null;
            }

            if (!resizeHandle) {
                resizeHandle = that.resizeHandle = $('<div class="k-resize-handle"><div class="k-resize-handle-inner"></div></div>');
                container.append(resizeHandle);
            }

            if (!isRtl) {
                left = th[0].offsetWidth;

                var cells = leafDataCells(th.closest("thead"));
                for (var idx = 0; idx < cells.length; idx++) {
                    if (cells[idx] == th[0]) {
                        break;
                    }
                    left += cells[idx].offsetWidth;
                }

                if (groups > 0) {
                    left += container.find(".k-group-cell:first").outerWidth() * groups;
                }

                if (that._hasDetails()) {
                    left += container.find(".k-hierarchy-cell:first").outerWidth();
                }

            } else {
                left = th.position().left;
                if (scrollable) {
                    var headerWrap = th.closest(".k-grid-header-wrap, .k-grid-header-locked"),
                        ieCorrection = browser.msie ? headerWrap.scrollLeft() : 0,
                        webkitCorrection = browser.webkit ? (headerWrap[0].scrollWidth - headerWrap[0].offsetWidth - headerWrap.scrollLeft()) : 0,
                        firefoxCorrection = browser.mozilla ? (headerWrap[0].scrollWidth - headerWrap[0].offsetWidth - (headerWrap[0].scrollWidth - headerWrap[0].offsetWidth - headerWrap.scrollLeft())) : 0;

                    left -= webkitCorrection - firefoxCorrection + ieCorrection;
                }
            }

            resizeHandle.css({
                top: th.position().top,//scrollable ? 0 : heightAboveHeader(that.wrapper),
                left: left - indicatorWidth,
                height: th.outerHeight(),
                width: indicatorWidth * 3
            })
                .data("th", th)
                .show();

            resizeHandle.off("dblclick" + NS).on("dblclick" + NS, function () {
                that._autoFitLeafColumn(th.data("index"));
            });
        },

        _positionColumnResizeHandle: function (container) {
            var that = this,
                indicatorWidth = that.options.columnResizeHandleWidth,
                lockedHead = that.lockedHeader ? that.lockedHeader.find("thead:first") : $();

            that.thead.add(lockedHead).on("mousemove" + NS, "th", function (e) {
                var th = $(this);

                if (th.hasClass("k-group-cell") || th.hasClass("k-hierarchy-cell")) {
                    return;
                }

                var clientX = e.clientX,
                    winScrollLeft = $(window).scrollLeft(),
                    position = th.offset().left + (!isRtl ? this.offsetWidth : 0);

                if (clientX + winScrollLeft > position - indicatorWidth && clientX + winScrollLeft < position + indicatorWidth) {
                    that._createResizeHandle(th.closest("div"), th);
                } else if (that.resizeHandle) {
                    that.resizeHandle.hide();
                } else {
                    cursor(that.wrapper, "");
                }
            });
        },

        _resizeHandleDocumentClick: function (e) {
            if ($(e.target).closest(".k-column-active").length) {
                return;
            }

            $(document).off(e);

            this._hideResizeHandle();
        },

        _hideResizeHandle: function () {
            if (this.resizeHandle) {
                this.resizeHandle.data("th")
                    .removeClass("k-column-active");

                if (this.lockedContent && !this._isMobile) {
                    this.resizeHandle.off(NS).remove();
                    this.resizeHandle = null;
                } else {
                    this.resizeHandle.hide();
                }
            }
        },

        _positionColumnResizeHandleTouch: function (container) {
            var that = this,
                lockedHead = that.lockedHeader ? that.lockedHeader.find("thead:first") : $();

            that._resizeUserEvents = new kendo.UserEvents(lockedHead.add(that.thead), {
                filter: "th:not(.k-group-cell):not(.k-hierarchy-cell)",
                threshold: 10,
                hold: function (e) {
                    var th = $(e.target);

                    e.preventDefault();

                    th.addClass("k-column-active");
                    that._createResizeHandle(th.closest("div"), th);

                    if (!that._resizeHandleDocumentClickHandler) {
                        that._resizeHandleDocumentClickHandler = proxy(that._resizeHandleDocumentClick, that);
                    }

                    $(document).on("click", that._resizeHandleDocumentClickHandler);
                }
            });
        },

        _resizable: function () {
            var that = this,
                options = that.options,
    container,
    columnStart,
            columnWidth,
            gridWidth,
            isMobile = this._isMobile,
            scrollbar = !kendo.support.mobileOS ? kendo.support.scrollbar() : 0,
    isLocked,
        col, th;

            if (options.resizable) {
                container = options.scrollable ? that.wrapper.find(".k-grid-header-wrap:first") : that.wrapper;

                if (isMobile) {
                    that._positionColumnResizeHandleTouch(container);
                } else {
                    that._positionColumnResizeHandle(container);
                }

                if (that.resizable) {
                    that.resizable.destroy();
                }

                that.resizable = new ui.Resizable(container.add(that.lockedHeader), {
                    handle: (!!options.scrollable ? "" : ">") + ".k-resize-handle",
                    hint: function (handle) {
                        return $('<div class="k-grid-resize-indicator" />').css({
                            height: handle.data("th").outerHeight() + that.tbody.attr("clientHeight")
                        });
                    },
                    start: function (e) {
                        th = $(e.currentTarget).data("th");

                        if (isMobile) {
                            that._hideResizeHandle();
                        }

                        var header = th.closest("table"),
                            index = $.inArray(th[0], leafDataCells(th.closest("thead")).filter(":visible"));

                        isLocked = header.parent().hasClass("k-grid-header-locked");

                        var contentTable = isLocked ? that.lockedTable : that.table,
                            footer = that.footer || $();

                        if (that.footer && that.lockedContent) {
                            footer = isLocked ? that.footer.children(".k-grid-footer-locked") : that.footer.children(".k-grid-footer-wrap");
                        }

                        cursor(that.wrapper, 'col-resize');

                        if (options.scrollable) {
                            col = header.find("col:not(.k-group-col):not(.k-hierarchy-col):eq(" + index + ")")
                                .add(contentTable.children("colgroup").find("col:not(.k-group-col):not(.k-hierarchy-col):eq(" + index + ")"))
                                .add(footer.find("colgroup").find("col:not(.k-group-col):not(.k-hierarchy-col):eq(" + index + ")"));
                        } else {
                            col = contentTable.children("colgroup").find("col:not(.k-group-col):not(.k-hierarchy-col):eq(" + index + ")");
                        }

                        columnStart = e.x.location;
                        columnWidth = th.outerWidth();
                        gridWidth = isLocked ? contentTable.children("tbody").outerWidth() : that.tbody.outerWidth(); // IE returns 0 if grid is empty and scrolling is enabled

                        // fix broken UI in Chrome38+
                        if (browser.webkit) {
                            that.wrapper.addClass("k-grid-column-resizing");
                        }
                    },
                    resize: function (e) {
                        var rtlMultiplier = isRtl ? -1 : 1,
                            currentWidth = columnWidth + (e.x.location * rtlMultiplier) - (columnStart * rtlMultiplier);

                        if (options.scrollable) {
                            var footer;
                            if (isLocked && that.lockedFooter) {
                                footer = that.lockedFooter.children("table");
                            } else if (that.footer) {
                                footer = that.footer.find(">.k-grid-footer-wrap>table");
                            }
                            if (!footer || !footer[0]) {
                                footer = $();
                            }
                            var header = th.closest("table");
                            var contentTable = isLocked ? that.lockedTable : that.table;
                            var constrain = false;
                            var totalWidth = that.wrapper.width() - scrollbar;
                            var width = currentWidth;

                            if (isLocked && gridWidth - columnWidth + width > totalWidth) {
                                width = columnWidth + (totalWidth - gridWidth - scrollbar * 2);
                                if (width < 0) {
                                    width = currentWidth;
                                }
                                constrain = true;
                            }

                            if (width > 10) {
                                col.css('width', width);

                                if (gridWidth) {
                                    if (constrain) {
                                        width = totalWidth - scrollbar * 2;
                                    } else {
                                        width = gridWidth + (e.x.location * rtlMultiplier) - (columnStart * rtlMultiplier);
                                    }

                                    contentTable
                                        .add(header)
                                        .add(footer)
                                        .css('width', width);

                                    if (!isLocked) {
                                        that._footerWidth = width;
                                    }
                                }
                            }
                        } else if (currentWidth > 10) {
                            col.css('width', currentWidth);
                        }
                    },
                    resizeend: function () {
                        var newWidth = th.outerWidth(),
                    column,
                    header;

                        cursor(that.wrapper, "");

                        if (browser.webkit) {
                            that.wrapper.removeClass("k-grid-column-resizing");
                        }

                        if (columnWidth != newWidth) {
                            header = that.lockedHeader ? that.lockedHeader.find("thead:first tr:first").add(that.thead.find("tr:first")) : th.parent();

                            var index = th.attr(kendo.attr("index"));
                            if (!index) {
                                index = header.find("th:not(.k-group-cell):not(.k-hierarchy-cell)").index(th);
                            }
                            column = leafColumns(that.columns)[index];

                            column.width = newWidth;

                            that.trigger(COLUMNRESIZE, {
                                column: column,
                                oldWidth: columnWidth,
                                newWidth: newWidth
                            });

                            that._applyLockedContainersWidth();
                            that._syncLockedContentHeight();
                            that._syncLockedHeaderHeight();
                        }

                        that._hideResizeHandle();
                        th = null;
                    }
                });

            }
        },

        _draggable: function () {
            var that = this;
            if (that.options.reorderable) {
                if (that._draggableInstance) {
                    that._draggableInstance.destroy();
                }

                that._draggableInstance = that.wrapper.kendoDraggable({
                    group: kendo.guid(),
                    filter: that.content ? ".k-grid-header:first " + HEADERCELLS : "table:first>.k-grid-header " + HEADERCELLS,
                    drag: function () {
                        that._hideResizeHandle();
                    },
                    hint: function (target) {
                        return $('<div class="k-header k-drag-clue" />')
                            .css({
                                width: target.width(),
                                paddingLeft: target.css("paddingLeft"),
                                paddingRight: target.css("paddingRight"),
                                lineHeight: target.height() + "px",
                                paddingTop: target.css("paddingTop"),
                                paddingBottom: target.css("paddingBottom")
                            })
                .html(target.attr(kendo.attr("title")) || target.attr(kendo.attr("field")) || target.text())
                            .prepend('<span class="k-icon k-drag-status k-denied" />');
                    }
                }).data("kendoDraggable");
            }
        },

        _reorderable: function () {
            var that = this;
            if (that.options.reorderable) {
                if (that.wrapper.data("kendoReorderable")) {
                    that.wrapper.data("kendoReorderable").destroy();
                }

                var targetParentContainerIndex = function (columns, sourceIndex, targetIndex) {
                    var column = columns[sourceIndex];
                    var target = columns[targetIndex];

                    var parent = columnParent(column, that.columns);
                    columns = parent ? parent.columns : that.columns;

                    return inArray(target, columns);
                };

                that.wrapper.kendoReorderable({
                    draggable: that._draggableInstance,
                    dragOverContainers: function (sourceIndex, targetIndex) {
                        var columns = flatColumnsInDomOrder(that.columns);
                        return columns[sourceIndex].lockable !== false && targetParentContainerIndex(columns, sourceIndex, targetIndex) > -1;
                    },
                    inSameContainer: function (e) {
                        return $(e.source).parent()[0] === $(e.target).parent()[0] && targetParentContainerIndex(flatColumnsInDomOrder(that.columns), e.sourceIndex, e.targetIndex) > -1;
                    },
                    change: function (e) {
                        var columns = flatColumnsInDomOrder(that.columns);
                        var column = columns[e.oldIndex];
                        var newIndex = targetParentContainerIndex(columns, e.oldIndex, e.newIndex);

                        that.trigger(COLUMNREORDER, {
                            newIndex: newIndex,
                            oldIndex: inArray(column, columns),
                            column: column
                        });

                        that.reorderColumn(newIndex, column, e.position === "before");
                    }
                });
            }
        },

        _reorderHeader: function (sources, target, before) {
            var that = this;
            var sourcePosition = columnPosition(sources[0], that.columns);
            var destPosition = columnPosition(target, that.columns);

            var leafs = [];
            for (var idx = 0; idx < sources.length; idx++) {
                if (sources[idx].columns) {
                    leafs = leafs.concat(sources[idx].columns);
                }
            }

            var ths = elements(that.lockedHeader, that.thead, "tr:eq(" + sourcePosition.row + ")>th.k-header:not(.k-group-cell,.k-hierarchy-cell)");

            var sourceLockedColumns = lockedColumns(sources).length;
            var targetLockedColumns = lockedColumns([target]).length;

            if (leafs.length) {
                if (sourceLockedColumns > 0 && targetLockedColumns === 0) {
                    moveCellsBetweenContainers(sources, target, leafs, that.columns, that.lockedHeader.find("thead"), that.thead, this._groups());
                } else if (sourceLockedColumns === 0 && targetLockedColumns > 0) {
                    moveCellsBetweenContainers(sources, target, leafs, that.columns, that.thead, that.lockedHeader.find("thead"), this._groups());
                }

                if (target.columns || sourcePosition.cell - destPosition.cell > 1 || destPosition.cell - sourcePosition.cell > 1) {
                    target = findReorderTarget(that.columns, target, sources[0], before);
                    if (target) {
                        that._reorderHeader(leafs, target, before);
                    }
                }
            } else if (sourceLockedColumns !== targetLockedColumns) { // move between containers
                updateCellRowSpan(ths[sourcePosition.cell], that.columns, sourceLockedColumns);
            }

            reorder(ths, sourcePosition.cell, destPosition.cell, before, sources.length);
        },

        _reorderContent: function (sources, destination, before) {
            var that = this;
            var lockedRows = $();
            var source = sources[0];
            var visibleSources = visibleColumns(sources);
            var sourceIndex = inArray(source, leafColumns(that.columns));
            var destIndex = inArray(destination, leafColumns(that.columns));

            var colSourceIndex = inArray(source, visibleLeafColumns(that.columns));
            var colDest = inArray(destination, visibleLeafColumns(that.columns));
            var lockedCount = lockedColumns(that.columns).length;
            var isLocked = !!destination.locked;
            var footer = that.footer || that.wrapper.find(".k-grid-footer");

            var headerCol, footerCol;
            headerCol = footerCol = colDest;

            if (destination.hidden) {
                if (isLocked) {
                    colDest = that.lockedTable.find("colgroup");
                    headerCol = that.lockedHeader.find("colgroup");
                    footerCol = $(that.lockedFooter).find(">table>colgroup");
                } else {
                    colDest = that.tbody.prev();
                    headerCol = that.thead.prev();
                    footerCol = footer.find(".k-grid-footer-wrap").find(">table>colgroup");
                }
            }

            if (that._hasFilterRow()) {
                reorder(that.wrapper.find(".k-filter-row th:not(.k-group-cell,.k-hierarchy-cell)"), sourceIndex, destIndex, before, sources.length);
            }

            reorder(elements(that.lockedHeader, that.thead.prev(), "col:not(.k-group-col,.k-hierarchy-col)"), colSourceIndex, headerCol, before, visibleSources.length);

            if (that.options.scrollable) {
                reorder(elements(that.lockedTable, that.tbody.prev(), "col:not(.k-group-col,.k-hierarchy-col)"), colSourceIndex, colDest, before, visibleSources.length);
            }

            if (footer && footer.length) {
                reorder(elements(that.lockedFooter, footer.find(".k-grid-footer-wrap"), ">table>colgroup>col:not(.k-group-col,.k-hierarchy-col)"), colSourceIndex, footerCol, before, visibleSources.length);
                reorder(footer.find(".k-footer-template>td:not(.k-group-cell,.k-hierarchy-cell)"), sourceIndex, destIndex, before, sources.length);
            }

            var rows = that.tbody.children(":not(.k-grouping-row,.k-detail-row)");
            if (that.lockedTable) {
                if (lockedCount > destIndex) {
                    if (lockedCount <= sourceIndex) {
                        updateColspan(
                            that.lockedTable.find(">tbody>tr.k-grouping-row"),
                            that.table.find(">tbody>tr.k-grouping-row"),
                            sources.length
                        );
                    }
                } else if (lockedCount > sourceIndex) {
                    updateColspan(
                    that.table.find(">tbody>tr.k-grouping-row"),
                    that.lockedTable.find(">tbody>tr.k-grouping-row"),
                    sources.length
                );
                }

                lockedRows = that.lockedTable.find(">tbody>tr:not(.k-grouping-row,.k-detail-row)");
            }

            for (var idx = 0, length = rows.length; idx < length; idx += 1) {
                reorder(elements(lockedRows[idx], rows[idx], ">td:not(.k-group-cell,.k-hierarchy-cell)"), sourceIndex, destIndex, before, sources.length);
            }
        },

        _autoFitLeafColumn: function (leafIndex) {
            this.autoFitColumn(leafColumns(this.columns)[leafIndex]);
        },

        autoFitColumn: function (column) {
            var that = this,
                options = that.options,
                columns = that.columns,
                index,
                th,
                header,
                headerTable,
                isLocked,
                visibleLocked = that.lockedHeader ? leafDataCells(that.lockedHeader.find(">table>thead")).filter(isCellVisible).length : 0,
                col;

            //  retrieve the column object, depending on the method argument
            if (typeof column == "number") {
                column = columns[column];
            } else if (isPlainObject(column)) {
                column = grep(flatColumns(columns), function (item) {
                    return item === column;
                })[0];
            } else {
                column = grep(flatColumns(columns), function (item) {
                    return item.field === column;
                })[0];
            }

            if (!column || !isVisible(column)) {
                return;
            }

            index = inArray(column, leafColumns(columns));
            isLocked = column.locked;

            if (isLocked) {
                headerTable = that.lockedHeader.children("table");
            } else {
                headerTable = that.thead.parent();
            }

            th = headerTable.find("[data-index='" + index + "']");

            var contentTable = isLocked ? that.lockedTable : that.table,
                footer = that.footer || $();

            if (that.footer && that.lockedContent) {
                footer = isLocked ? that.footer.children(".k-grid-footer-locked") : that.footer.children(".k-grid-footer-wrap");
            }

            var footerTable = footer.find("table").first();

            if (that.lockedHeader && visibleLocked >= index && !isLocked) {
                index -= visibleLocked;
            }

            // adjust column index, depending on previous hidden columns
            for (var j = 0; j < columns.length; j++) {
                if (columns[j] === column) {
                    break;
                } else {
                    if (columns[j].hidden) {
                        index--;
                    }
                }
            }

            // get col elements
            if (options.scrollable) {
                col = headerTable.find("col:not(.k-group-col):not(.k-hierarchy-col):eq(" + index + ")")
                .add(contentTable.children("colgroup").find("col:not(.k-group-col):not(.k-hierarchy-col):eq(" + index + ")"))
                .add(footerTable.find("colgroup").find("col:not(.k-group-col):not(.k-hierarchy-col):eq(" + index + ")"));
            } else {
                col = contentTable.children("colgroup").find("col:not(.k-group-col):not(.k-hierarchy-col):eq(" + index + ")");
            }

            var tables = headerTable.add(contentTable).add(footerTable);

            var oldColumnWidth = th.outerWidth();

            // reset the table and autofitted column widths
            // if scrolling is disabled, we need some additional repainting of the table
            col.width("");
            tables.css("table-layout", "fixed");
            col.width("auto");
            tables.addClass("k-autofitting");
            tables.css("table-layout", "");

            var newTableWidth = Math.max(headerTable.width(), contentTable.width(), footerTable.width());
            var newColumnWidth = Math.ceil(Math.max(th.outerWidth(), contentTable.find("tr").eq(0).children("td:visible").eq(index).outerWidth(), footerTable.find("tr").eq(0).children("td:visible").eq(index).outerWidth()));

            col.width(newColumnWidth);
            column.width = newColumnWidth;

            // if all visible columns have widths, the table needs a pixel width as well
            if (options.scrollable) {
                var cols = headerTable.find("col"),
                colWidth,
                totalWidth = 0;
                for (var idx = 0, length = cols.length; idx < length; idx += 1) {
                    colWidth = cols[idx].style.width;
                    if (colWidth && colWidth.indexOf("%") == -1) {
                        totalWidth += parseInt(colWidth, 10);
                    } else {
                        totalWidth = 0;
                        break;
                    }
                }

                if (totalWidth) {
                    tables.each(function () {
                        this.style.width = totalWidth + "px";
                    });
                }
            }

            if (browser.msie && browser.version == 8) {
                tables.css("display", "inline-table");
                setTimeout(function () {
                    tables.css("display", "table");
                }, 1);
            }

            tables.removeClass("k-autofitting");

            that.trigger(COLUMNRESIZE, {
                column: column,
                oldWidth: oldColumnWidth,
                newWidth: newColumnWidth
            });

            that._applyLockedContainersWidth();
            that._syncLockedContentHeight();
            that._syncLockedHeaderHeight();
        },

        reorderColumn: function (destIndex, column, before) {
            var that = this,
                            parent = columnParent(column, that.columns),
                columns = parent ? parent.columns : that.columns,
                sourceIndex = inArray(column, columns),
                destColumn = columns[destIndex],
                lockChanged,
                isLocked = !!destColumn.locked,
                lockedCount = lockedColumns(that.columns).length;

            if (sourceIndex === destIndex) {
                return;
            }

            if (!column.locked && isLocked && nonLockedColumns(that.columns).length == 1) {
                return;
            }

            if (column.locked && !isLocked && lockedCount == 1) {
                return;
            }

            that._hideResizeHandle();

            if (before === undefined) {
                before = destIndex < sourceIndex;
            }

            var sourceColumns = [column];

            that._reorderHeader(sourceColumns, destColumn, before);

            if (that.lockedHeader) {
                removeEmptyRows(that.thead);
                removeEmptyRows(that.lockedHeader);
            }

            if (destColumn.columns) {
                destColumn = leafColumns(destColumn.columns);
                destColumn = destColumn[before ? 0 : destColumn.length - 1];
            }

            if (column.columns) {
                sourceColumns = leafColumns(column.columns);
            }

            that._reorderContent(sourceColumns, destColumn, before);

            lockChanged = !!column.locked;
            lockChanged = lockChanged != isLocked;
            column.locked = isLocked;

            columns.splice(before ? destIndex : destIndex + 1, 0, column);
            columns.splice(sourceIndex < destIndex ? sourceIndex : sourceIndex + 1, 1);

            that._templates();

            that._updateColumnCellIndex();

            that._updateTablesWidth();
            that._applyLockedContainersWidth();
            that._syncLockedHeaderHeight();
            that._syncLockedContentHeight();
            that._updateFirstColumnClass();

            if (!lockChanged) {
                return;
            }

            if (isLocked) {
                that.trigger(COLUMNLOCK, {
                    column: column
                });
            } else {
                that.trigger(COLUMNUNLOCK, {
                    column: column
                });
            }
        },

        _updateColumnCellIndex: function () {
            var header;
            var offset = 0;

            if (this.lockedHeader) {
                header = this.lockedHeader.find("thead");
                offset = updateCellIndex(header, lockedColumns(this.columns));
            }
            updateCellIndex(this.thead, nonLockedColumns(this.columns), offset);
        },

        lockColumn: function (column) {
            var columns = this.columns;

            if (typeof column == "number") {
                column = columns[column];
            } else {
                column = grep(columns, function (item) {
                    return item.field === column;
                })[0];
            }

            if (!column || column.locked || column.hidden) {
                return;
            }

            var index = lockedColumns(columns).length - 1;
            this.reorderColumn(index, column, false);
        },

        unlockColumn: function (column) {
            var columns = this.columns;

            if (typeof column == "number") {
                column = columns[column];
            } else {
                column = grep(columns, function (item) {
                    return item.field === column;
                })[0];
            }

            if (!column || !column.locked || column.hidden) {
                return;
            }

            var index = lockedColumns(columns).length;
            this.reorderColumn(index, column, true);
        },

        cellIndex: function (td) {
            var lockedColumnOffset = 0;

            if (this.lockedTable && !$.contains(this.lockedTable[0], td[0])) {
                lockedColumnOffset = leafColumns(lockedColumns(this.columns)).length;
            }

            return $(td).parent().children('td:not(.k-group-cell,.k-hierarchy-cell)').index(td) + lockedColumnOffset;
        },

        _modelForContainer: function (container) {
            container = $(container);

            if (!container.is("tr") && this._editMode() !== "popup") {
                container = container.closest("tr");
            }

            var id = container.attr(kendo.attr("uid"));

            return this.dataSource.getByUid(id);
        },

        _editable: function () {
            var that = this,
                selectable = that.selectable && that.selectable.options.multiple,
                editable = that.options.editable,
                handler = function () {
                    var target = activeElement(),
                        cell = that._editContainer;

                    if (cell && !$.contains(cell[0], target) && cell[0] !== target && !$(target).closest(".k-animation-container").length) {
                        if (that.editable.end()) {
                            that.closeCell();
                        }
                    }
                };

            if (editable) {
                var mode = that._editMode();
                if (mode === "incell") {
                    if (editable.update !== false) {
                        that.wrapper.on(CLICK + NS, "tr:not(.k-grouping-row) > td", function (e) {
                            var td = $(this),
                                isLockedCell = that.lockedTable && td.closest("table")[0] === that.lockedTable[0];

                            if (td.hasClass("k-hierarchy-cell") ||
                                td.hasClass("k-detail-cell") ||
                                td.hasClass("k-group-cell") ||
                                td.hasClass("k-edit-cell") ||
                                td.has("a.k-grid-delete").length ||
                                td.has("button.k-grid-delete").length ||
                                (td.closest("tbody")[0] !== that.tbody[0] && !isLockedCell) ||
                                $(e.target).is(":input")) {
                                return;
                            }

                            if (that.editable) {
                                if (that.editable.end()) {
                                    if (selectable) {
                                        $(activeElement()).blur();
                                    }
                                    that.closeCell();
                                    that.editCell(td);
                                }
                            } else {
                                that.editCell(td);
                            }

                        })
                        .on("focusin" + NS, function () {
                            clearTimeout(that.timer);
                            that.timer = null;
                        })
                        .on("focusout" + NS, function () {
                            that.timer = setTimeout(handler, 1);
                        });
                    }
                } else {
                    if (editable.update !== false) {
                        that.wrapper.on(CLICK + NS, "tbody>tr:not(.k-detail-row,.k-grouping-row):visible a.k-grid-edit", function (e) {
                            e.preventDefault();
                            that.editRow($(this).closest("tr"));
                        });
                    }
                }

                if (editable.destroy !== false) {
                    that.wrapper.on(CLICK + NS, "tbody>tr:not(.k-detail-row,.k-grouping-row):visible .k-grid-delete", function (e) {
                        e.preventDefault();
                        e.stopPropagation();
                        that.removeRow($(this).closest("tr"));
                    });
                } else {
                    //Required for the MVC server wrapper delete button
                    that.wrapper.on(CLICK + NS, "tbody>tr:not(.k-detail-row,.k-grouping-row):visible button.k-grid-delete", function (e) {
                        e.stopPropagation();

                        if (!that._confirmation()) {
                            e.preventDefault();
                        }
                    });
                }
            }
        },

        editCell: function (cell) {
            cell = $(cell);

            var that = this,
            column = leafColumns(that.columns)[that.cellIndex(cell)],
                model = that._modelForContainer(cell);

            that.closeCell();

            if (model && (!model.editable || model.editable(column.field)) && !column.command && column.field) {

                that._attachModelChange(model);

                that._editContainer = cell;

                that.editable = cell.addClass("k-edit-cell")
                    .kendoEditable({
                        fields: {
                            field: column.field, format: column.format, editor: column.editor, values: column.values
                        },
                        model: model,
                        target: that,
                        change: function (e) {
                            if (that.trigger(SAVE, {
                                values: e.values, container: cell, model: model
                            })) {
                                e.preventDefault();
                            }
                        }
                    }).data("kendoEditable");

                var tr = cell.parent().addClass("k-grid-edit-row");

                if (that.lockedContent) {
                    adjustRowHeight(tr[0], that._relatedRow(tr).addClass("k-grid-edit-row")[0]);
                }

                that.trigger(EDIT, {
                    container: cell, model: model
                });
            }
        },

        _adjustLockedHorizontalScrollBar: function () {
            var table = this.table,
                content = table.parent();

            var scrollbar = table[0].offsetWidth > content[0].clientWidth ? kendo.support.scrollbar() : 0;
            this.lockedContent.height(content.height() - scrollbar);
        },

        _syncLockedContentHeight: function () {
            if (this.lockedTable) {
                if (!this.touchScroller) {
                    this._adjustLockedHorizontalScrollBar();
                }
                this._adjustRowsHeight(this.table, this.lockedTable);
            }
        },

        _syncLockedHeaderHeight: function () {
            if (this.lockedHeader) {
                var lockedTable = this.lockedHeader.children("table");
                var table = this.thead.parent();

                this._adjustRowsHeight(lockedTable, table);

                syncTableHeight(lockedTable, table);
            }
        },

        _syncLockedFooterHeight: function () {
            if (this.lockedFooter && this.footer && this.footer.length) {
                this._adjustRowsHeight(this.lockedFooter.children("table"), this.footer.find(".k-grid-footer-wrap > table"));
            }
        },

        _destroyEditable: function () {
            var that = this;

            var destroy = function () {
                if (that.editable) {

                    var container = that.editView ? that.editView.element : that._editContainer;

                    if (container) {
                        container.off(CLICK + NS, "a.k-grid-cancel", that._editCancelClickHandler);
                        container.off(CLICK + NS, "a.k-grid-update", that._editUpdateClickHandler);
                    }

                    that._detachModelChange();
                    that.editable.destroy();
                    that.editable = null;
                    that._editContainer = null;
                    that._destroyEditView();
                }
            };

            if (that.editable) {
                if (that._editMode() === "popup" && !that._isMobile) {
                    that._editContainer.data("kendoWindow").bind("deactivate", destroy).close();
                } else {
                    destroy();
                }
            }
            if (that._actionSheet) {
                that._actionSheet.destroy();
                that._actionSheet = null;
            }
        },

        _destroyEditView: function () {
            if (this.editView) {
                this.editView.purge();
                this.editView = null;
                this.pane.navigate("");
            }
        },

        _attachModelChange: function (model) {
            var that = this;

            that._modelChangeHandler = function (e) {
                that._modelChange({
                    field: e.field, model: this
                });
            };

            model.bind("change", that._modelChangeHandler);
        },

        _detachModelChange: function () {
            var that = this,
                container = that._editContainer,
                model = that._modelForContainer(container);

            if (model) {
                model.unbind(CHANGE, that._modelChangeHandler);
            }
        },

        closeCell: function (isCancel) {
            var that = this,
        cell = that._editContainer,
        id,
        column,
        tr,
        model;

            if (!cell) {
                return;
            }

            id = cell.closest("tr").attr(kendo.attr("uid"));
            model = that.dataSource.getByUid(id);

            if (isCancel && that.trigger("cancel", {
                container: cell, model: model
            })) {
                return;
            }

            cell.removeClass("k-edit-cell");
            column = leafColumns(that.columns)[that.cellIndex(cell)];

            tr = cell.parent().removeClass("k-grid-edit-row");

            that._destroyEditable(); // editable should be destroyed before content of the container is changed

            that._displayCell(cell, column, model);

            if (cell.hasClass("k-dirty-cell")) {
                $('<span class="k-dirty"/>').prependTo(cell);
            }

            if (that.lockedContent) {
                adjustRowHeight(tr.css("height", "")[0], that._relatedRow(tr).css("height", "")[0]);
            }
        },

        _displayCell: function (cell, column, dataItem) {
            var that = this,
                state = {
                    storage: {
                    }, count: 0
                },
                settings = extend({}, kendo.Template, that.options.templateSettings),
                tmpl = kendo.template(that._cellTmpl(column, state), settings);

            if (state.count > 0) {
                tmpl = proxy(tmpl, state.storage);
            }

            cell.empty().html(tmpl(dataItem));

            that.angular("compile", function () {
                return {
                    elements: cell,
                    data: [{
                        dataItem: dataItem
                    }]
                };
            });
        },

        removeRow: function (row) {
            if (!this._confirmation(row)) {
                return;
            }

            this._removeRow(row);
        },

        _removeRow: function (row) {
            var that = this,
                model,
                mode = that._editMode();

            if (mode !== "incell") {
                that.cancelRow();
            }

            row = $(row).hide();
            model = that._modelForContainer(row);

            if (model && !that.trigger(REMOVE, {
                row: row, model: model
            })) {

                that.dataSource.remove(model);

                if (mode === "inline" || mode === "popup") {
                    that.dataSource.sync();
                }
            } else if (mode === "incell") {
                that._destroyEditable();
            }
        },

        _editMode: function () {
            var mode = "incell",
                    editable = this.options.editable;

            if (editable !== true) {
                if (typeof editable == "string") {
                    mode = editable;
                } else {
                    mode = editable.mode || mode;
                }
            }

            return mode;
        },

        editRow: function (row) {
            var model;
            var that = this;

            if (row instanceof kendo.data.ObservableObject) {
                model = row;
            } else {
                row = $(row);
                model = that._modelForContainer(row);
            }

            var mode = that._editMode();
            var container;

            that.cancelRow();

            if (model) {

                that._attachModelChange(model);

                if (mode === "popup") {
                    that._createPopupEditor(model);
                } else if (mode === "inline") {
                    that._createInlineEditor(row, model);
                } else if (mode === "incell") {
                    $(row).children(DATA_CELL).each(function () {
                        var cell = $(this);
                        var column = leafColumns(that.columns)[cell.index()];

                        model = that._modelForContainer(cell);

                        if (model && (!model.editable || model.editable(column.field)) && column.field) {
                            that.editCell(cell);
                            return false;
                        }
                    });
                }

                container = that.editView ? that.editView.element : that._editContainer;

                if (container) {
                    if (!this._editCancelClickHandler) {
                        this._editCancelClickHandler = proxy(this._editCancelClick, this);
                    }

                    container.on(CLICK + NS, "a.k-grid-cancel", this._editCancelClickHandler);

                    if (!this._editUpdateClickHandler) {
                        this._editUpdateClickHandler = proxy(this._editUpdateClick, this);
                    }

                    container.on(CLICK + NS, "a.k-grid-update", this._editUpdateClickHandler);
                }
            }
        },

        _editUpdateClick: function (e) {
            e.preventDefault();
            e.stopPropagation();

            this.saveRow();
        },

        _editCancelClick: function (e) {
            var that = this;
            var navigatable = that.options.navigatable;
            var model = that.editable.options.model;
            var container = that.editView ? that.editView.element : that._editContainer;

            e.preventDefault();
            e.stopPropagation();

            if (that.trigger("cancel", {
                container: container, model: model
            })) {
                return;
            }

            var currentIndex = that.items().index($(that.current()).parent());

            that.cancelRow();

            if (navigatable) {
                that.current(that.items().eq(currentIndex).children().filter(NAVCELL).first());
                focusTable(that.table, true);
            }
        },

        _createPopupEditor: function (model) {
            var that = this,
                html = '<div ' + kendo.attr("uid") + '="' + model.uid + '" class="k-popup-edit-form' + (that._isMobile ? ' k-mobile-list' : '') + '"><div class="k-edit-form-container">',
                column,
                command,
                fields = [],
                idx,
                length,
                tmpl,
                updateText,
                cancelText,
                tempCommand,
                columns = leafColumns(that.columns),
                attr,
                editable = that.options.editable,
                template = editable.template,
                options = isPlainObject(editable) ? editable.window : {},
                settings = extend({}, kendo.Template, that.options.templateSettings);

            options = options || {
            };

            if (template) {
                if (typeof template === STRING) {
                    template = window.unescape(template);
                }

                html += (kendo.template(template, settings))(model);

                for (idx = 0, length = columns.length; idx < length; idx++) {
                    column = columns[idx];
                    if (column.command) {
                        tempCommand = getCommand(column.command, "edit");
                        if (tempCommand) {
                            command = tempCommand;
                        }
                    }
                }
            } else {
                for (idx = 0, length = columns.length; idx < length; idx++) {
                    column = columns[idx];

                    if (!column.command) {
                        html += '<div class="k-edit-label"><label for="' + column.field + '">' + (column.title || column.field || "") + '</label></div>';

                        if ((!model.editable || model.editable(column.field)) && column.field) {
                            fields.push({
                                field: column.field, format: column.format, editor: column.editor, values: column.values
                            });
                            html += '<div ' + kendo.attr("container-for") + '="' + column.field + '" class="k-edit-field"></div>';
                        } else {
                            var state = {
                                storage: {
                                }, count: 0
                            };

                            tmpl = kendo.template(that._cellTmpl(column, state), settings);

                            if (state.count > 0) {
                                tmpl = proxy(tmpl, state.storage);
                            }

                            html += '<div class="k-edit-field">' + tmpl(model) + '</div>';
                        }
                    } else if (column.command) {
                        tempCommand = getCommand(column.command, "edit");
                        if (tempCommand) {
                            command = tempCommand;
                        }
                    }
                }
            }

            if (command) {
                if (isPlainObject(command)) {
                    if (command.text && isPlainObject(command.text)) {
                        updateText = command.text.update;
                        cancelText = command.text.cancel;
                    }

                    if (command.attr) {
                        attr = command.attr;
                    }
                }
            }

            var container;

            if (!that._isMobile) {
                html += '<div class="k-edit-buttons k-state-default">';
                html += that._createButton({ name: "update", text: updateText, attr: attr }) + that._createButton({
                    name: "canceledit", text: cancelText, attr: attr
                });
                html += '</div></div></div>';

                container = that._editContainer = $(html)
                .appendTo(that.wrapper).eq(0)
                .kendoWindow(extend({
                    modal: true,
                    resizable: false,
                    draggable: true,
                    title: "Edit",
                    visible: false,
                    close: function (e) {
                        if (e.userTriggered) {
                            //The bellow line is required due to: draggable window in IE, change event will be triggered while the window is closing
                            e.sender.element.focus();
                            if (that.trigger("cancel", {
                                container: container, model: model
                            })) {
                                e.preventDefault();
                                return;
                            }

                            var currentIndex = that.items().index($(that.current()).parent());

                            that.cancelRow();
                            if (that.options.navigatable) {
                                that.current(that.items().eq(currentIndex).children().filter(NAVCELL).first());
                                focusTable(that.table, true);
                            }
                        }
                    }
                }, options));
            } else {
                html += "</div></div>";
                that.editView = that.pane.append(
                    '<div data-' + kendo.ns + 'role="view" data-' + kendo.ns + 'init-widgets="false" class="k-grid-edit-form">' +
                        '<div data-' + kendo.ns + 'role="header" class="k-header">' +
                            that._createButton({
                                name: "update", text: updateText, attr: attr
                            }) +
                            (options.title || "Edit") +
                            that._createButton({
                                name: "canceledit", text: cancelText, attr: attr
                            }) +
                            '</div>' +
                            html +
                        '</div>');
                container = that._editContainer = that.editView.element.find(".k-popup-edit-form");
            }

            that.editable = that._editContainer
                .kendoEditable({
                    fields: fields,
                    model: model,
                    clearContainer: false,
                    target: that
                }).data("kendoEditable");

            // TODO: Replace this code with labels and for="ID"
            if (that._isMobile) {
                container.find("input[type=checkbox],input[type=radio]")
                         .parent(".k-edit-field")
                         .addClass("k-check")
                         .prev(".k-edit-label")
                         .addClass("k-check")
                         .click(function () {
                             $(this).next().children("input").click();
                         });
            }

            that._openPopUpEditor();

            that.trigger(EDIT, {
                container: container, model: model
            });
        },

        _openPopUpEditor: function () {
            if (!this._isMobile) {
                this._editContainer.data("kendoWindow").center().open();
            } else {
                this.pane.navigate(this.editView, this._editAnimation);
            }
        },

        _createInlineEditor: function (row, model) {
            var that = this,
                column,
                cell,
                command,
                fields = [];


            if (that.lockedContent) {
                row = row.add(that._relatedRow(row));
            }

            row.children(":not(.k-group-cell,.k-hierarchy-cell)").each(function () {
                cell = $(this);
                column = leafColumns(that.columns)[that.cellIndex(cell)];

                if (!column.command && column.field && (!model.editable || model.editable(column.field))) {
                    fields.push({ field: column.field, format: column.format, editor: column.editor, values: column.values });
                    cell.attr(kendo.attr("container-for"), column.field);
                    cell.empty();
                } else if (column.command) {
                    command = getCommand(column.command, "edit");
                    if (command) {
                        cell.empty();

                        var updateText,
                            cancelText,
                            attr;

                        if (isPlainObject(command)) {
                            if (command.text && isPlainObject(command.text)) {
                                updateText = command.text.update;
                                cancelText = command.text.cancel;
                            }

                            if (command.attr) {
                                attr = command.attr;
                            }
                        }

                        $(that._createButton({
                            name: "update", text: updateText, attr: attr
                        }) +
                            that._createButton({ name: "canceledit", text: cancelText, attr: attr })).appendTo(cell);
                    }
                }
            });

            that._editContainer = row;

            that.editable = new kendo.ui.Editable(row
                .addClass("k-grid-edit-row"), {
                    target: that,
                    fields: fields,
                    model: model,
                    clearContainer: false
                });

            if (row.length > 1) {

                adjustRowHeight(row[0], row[1]);
                that._applyLockedContainersWidth();
            }

            that.trigger(EDIT, {
                container: row, model: model
            });
        },

        cancelRow: function () {
            var that = this,
                container = that._editContainer,
                            model,
                            tr;

            if (container) {
                model = that._modelForContainer(container);

                that._destroyEditable();

                that.dataSource.cancelChanges(model);

                if (that._editMode() !== "popup") {
                    that._displayRow(container);
                } else {
                    that._displayRow(that.tbody.find("[" + kendo.attr("uid") + "=" + model.uid + "]"));
                }
            }
        },

        saveRow: function () {
            var that = this,
    container = that._editContainer,
    model = that._modelForContainer(container),
    editable = that.editable;

            if (container && editable && editable.end() &&
                !that.trigger(SAVE, {
                container: container, model: model
            })) {

                that.dataSource.sync();
            }
        },

        _displayRow: function (row) {
            var that = this,
            model = that._modelForContainer(row),
            related,
                newRow,
                nextRow,
            isSelected = row.hasClass("k-state-selected"),
            isAlt = row.hasClass("k-alt");

            if (model) {

                if (that.lockedContent) {
                    related = $((isAlt ? that.lockedAltRowTemplate : that.lockedRowTemplate)(model));
                    that._relatedRow(row.last()).replaceWith(related);
                }

                that.angular("cleanup", function () {
                    return {
                        elements: row.get()
                    };
                });

                newRow = $((isAlt ? that.altRowTemplate : that.rowTemplate)(model));
                row.replaceWith(newRow);

                that.angular("compile", function () {
                    return {
                        elements: newRow.get(),
                        data: [{
                            dataItem: model
                        }]
                    };
                });

                if (isSelected && that.options.selectable) {
                    that.select(newRow.add(related));
                }

                if (related) {
                    adjustRowHeight(newRow[0], related[0]);
                }

                nextRow = newRow.next();
                if (nextRow.hasClass("k-detail-row") && nextRow.is(":visible")) {
                    newRow.find(".k-hierarchy-cell .k-icon")
                                        .removeClass("k-plus")
                        .addClass("k-minus");
                }
            }
        },

        _showMessage: function (messages, row) {
            var that = this;

            if (!that._isMobile) {
                return window.confirm(messages.title);
            }

            var template = kendo.template('<ul>' +
            '<li class="km-actionsheet-title">#:title#</li>' +
                            '<li><a href="\\#" class="k-button k-grid-delete">#:confirmDelete#</a></li>' +
                        '</ul>');

            var html = $(template(messages)).appendTo(that.view.element);

            var actionSheet = that._actionSheet = new kendo.mobile.ui.ActionSheet(html, {
                cancel: messages.cancelDelete,
                cancelTemplate: '<li class="km-actionsheet-cancel"><a class="k-button" href="\\#">#:cancel#</a></li>',
                close: function () {
                    this.destroy();
                },
                command: function (e) {
                    var item = $(e.currentTarget).parent();
                    if (!item.hasClass("km-actionsheet-cancel")) {
                        that._removeRow(row);
                    }
                },
                popup: that._actionSheetPopupOptions
            });

            actionSheet.open(row);

            return false;
        },

        _confirmation: function (row) {
            var that = this,
                editable = that.options.editable,
        confirmation = editable === true || typeof editable === STRING ? that.options.messages.editable.confirmation : editable.confirmation;

            if (confirmation !== false && confirmation != null) {

                if (typeof confirmation === FUNCTION) {
                    confirmation = confirmation(that._modelForContainer(row));
                }

                return that._showMessage({
                    confirmDelete: editable.confirmDelete || that.options.messages.editable.confirmDelete,
                    cancelDelete: editable.cancelDelete || that.options.messages.editable.cancelDelete,
                    title: confirmation === true ? that.options.messages.editable.confirmation : confirmation
                }, row);
            }

            return true;
        },

        cancelChanges: function () {
            this.dataSource.cancelChanges();
        },

        saveChanges: function () {
            var that = this;

            if (((that.editable && that.editable.end()) || !that.editable) && !that.trigger(SAVECHANGES)) {
                that.dataSource.sync();
            }
        },

        addRow: function () {
            var that = this,
                index,
                dataSource = that.dataSource,
                mode = that._editMode(),
                createAt = that.options.editable.createAt || "",
                pageSize = dataSource.pageSize(),
                view = dataSource.view() || [];

            if ((that.editable && that.editable.end()) || !that.editable) {
                if (mode != "incell") {
                    that.cancelRow();
                }

                index = dataSource.indexOf(view[0]);

                if (createAt.toLowerCase() == "bottom") {
                    index += view.length;

                    if (pageSize && !dataSource.options.serverPaging && pageSize <= view.length) {
                        index -= 1;
                    }
                }

                if (index < 0) {
                    if (dataSource.page() > dataSource.totalPages()) {
                        index = (dataSource.page() - 1) * pageSize;
                    } else {
                        index = 0;
                    }
                }

                var model = dataSource.insert(index, {}),
                    id = model.uid,
                    table = that.lockedContent ? that.lockedTable : that.table,
                    row = table.find("tr[" + kendo.attr("uid") + "=" + id + "]"),
                    cell = row.children("td:not(.k-group-cell,.k-hierarchy-cell)").eq(that._firstEditableColumnIndex(row));

                if (mode === "inline" && row.length) {
                    that.editRow(row);
                } else if (mode === "popup") {
                    that.editRow(model);
                } else if (cell.length) {
                    that.editCell(cell);
                }

                if (createAt.toLowerCase() == "bottom" && that.lockedContent) {
                    //scroll the containers to the bottom
                    that.lockedContent[0].scrollTop = that.content[0].scrollTop = that.content[0].offsetHeight;
                }
            }
        },

        _firstEditableColumnIndex: function (container) {
            var that = this,
                column,
    columns = leafColumns(that.columns),
                idx,
    length,
                model = that._modelForContainer(container);

            for (idx = 0, length = columns.length; idx < length; idx++) {
                column = columns[idx];

                if (model && (!model.editable || model.editable(column.field)) && !column.command && column.field && column.hidden !== true) {
                    return idx;
                }
            }
            return -1;
        },

        _toolbar: function () {
            var that = this,
                wrapper = that.wrapper,
                            toolbar = that.options.toolbar,
                            editable = that.options.editable,
                container;

            if (toolbar) {
                container = that.wrapper.find(".k-grid-toolbar");

                if (!container.length) {
                    if (!isFunction(toolbar)) {
                        toolbar = (typeof toolbar === STRING ? toolbar : that._toolbarTmpl(toolbar).replace(templateHashRegExp, "\\#"));
                        toolbar = proxy(kendo.template(toolbar), that);
                    }

                    container = $('<div class="k-header k-grid-toolbar" />')
            .html(toolbar({}))
            .prependTo(wrapper);

                    that.angular("compile", function () {
                        return {
                            elements: container.get()
                        };
                    });
                }

                if (editable && editable.create !== false) {
                    container.on(CLICK + NS, ".k-grid-add", function (e) {
                        e.preventDefault(); that.addRow();
                    })
                    .on(CLICK + NS, ".k-grid-cancel-changes", function (e) {
                        e.preventDefault(); that.cancelChanges();
                    })
                    .on(CLICK + NS, ".k-grid-save-changes", function (e) {
                        e.preventDefault(); that.saveChanges();
                    });
                }

                container.on(CLICK + NS, ".k-grid-excel", function (e) {
                    e.preventDefault();

                    that.saveAsExcel();
                });

                container.on(CLICK + NS, ".k-grid-pdf", function (e) {
                    e.preventDefault();

                    that.saveAsPDF();
                });
            }
        },

        _toolbarTmpl: function (commands) {
            var that = this,
                idx,
                length,
                html = "";

            if (isArray(commands)) {
                for (idx = 0, length = commands.length; idx < length; idx++) {
                    html += that._createButton(commands[idx]);
                }
            }
            return html;
        },

        _createButton: function (command) {
            var template = command.template || COMMANDBUTTONTMPL,
                commandName = typeof command === STRING ? command : command.name || command.text,
                className = defaultCommands[commandName] ? defaultCommands[commandName].className : "k-grid-" + (commandName || "").replace(/\s/g, ""),
                options = {
                    className: className, text: commandName, imageClass: "", attr: "", iconClass: ""
                },
        messages = this.options.messages.commands,
        attributeClassMatch;

            if (!commandName && !(isPlainObject(command) && command.template)) {
                throw new Error("Custom commands should have name specified");
            }

            if (isPlainObject(command)) {
                if (command.className && inArray(options.className, command.className.split(" ")) < 0) {
                    command.className += " " + options.className;
                } else if (command.className === undefined) {
                    command.className = options.className;
                }

                if (commandName === "edit" && isPlainObject(command.text)) {
                    command = extend(true, {}, command);
                    command.text = command.text.edit;
                }

                if (command.attr) {
                    if (isPlainObject(command.attr)) {
                        command.attr = stringifyAttributes(command.attr);
                    }

                    if (typeof command.attr === STRING) {
                        attributeClassMatch = command.attr.match(/class="(.+?)"/);

                        if (attributeClassMatch && inArray(attributeClassMatch[1], command.className.split(" ")) < 0) {
                            command.className += " " + attributeClassMatch[1];
                        }
                    }
                }

                options = extend(true, options, defaultCommands[commandName], {
                    text: messages[commandName]
                }, command);
            } else {
                options = extend(true, options, defaultCommands[commandName], {
                    text: messages[commandName]
                });
            }

            return kendo.template(template)(options);
        },

        _hasFooters: function () {
            return !!this.footerTemplate ||
                !!this.groupFooterTemplate ||
                (this.footer && this.footer.length > 0) ||
                this.wrapper.find(".k-grid-footer").length > 0;
        },

        _groupable: function () {
            var that = this;

            if (that._groupableClickHandler) {
                that.table.add(that.lockedTable).off(CLICK + NS, that._groupableClickHandler);
            } else {
                that._groupableClickHandler = function (e) {
                    var element = $(this),
                    group = element.closest("tr");

                    if (element.hasClass('k-i-collapse')) {
                        that.collapseGroup(group);
                    } else {
                        that.expandGroup(group);
                    }
                    e.preventDefault();
                    e.stopPropagation();
                };
            }

            if (that._isLocked()) {
                that.lockedTable.on(CLICK + NS, ".k-grouping-row .k-i-collapse, .k-grouping-row .k-i-expand", that._groupableClickHandler);
            } else {
                that.table.on(CLICK + NS, ".k-grouping-row .k-i-collapse, .k-grouping-row .k-i-expand", that._groupableClickHandler);
            }

            that._attachGroupable();
        },

        _attachGroupable: function () {
            var that = this,
                wrapper = that.wrapper,
                groupable = that.options.groupable,
                draggables = HEADERCELLS + "[" + kendo.attr("field") + "]",
                filter = that.content ? ".k-grid-header:first " + draggables : "table:first>.k-grid-header " + draggables;

            if (groupable && groupable.enabled !== false) {

                if (!wrapper.has("div.k-grouping-header")[0]) {
                    $("<div>&nbsp;</div>").addClass("k-grouping-header").prependTo(wrapper);
                }

                if (that.groupable) {
                    that.groupable.destroy();
                }

                that.groupable = new Groupable(wrapper, extend({
                }, groupable, {
                    draggable: that._draggableInstance,
                    groupContainer: ">div.k-grouping-header",
                    dataSource: that.dataSource,
                    draggableElements: filter,
                    filter: filter,
                    allowDrag: that.options.reorderable
                }));
            }
        },

        _continuousItems: function (filter, cell) {
            if (!this.lockedContent) {
                return;
            }

            var that = this;

            var elements = that.table.add(that.lockedTable);

            var lockedItems = $(filter, elements[0]);
            var nonLockedItems = $(filter, elements[1]);
            var columns = cell ? lockedColumns(that.columns).length : 1;
            var nonLockedColumns = cell ? that.columns.length - columns : 1;
            var result = [];

            for (var idx = 0; idx < lockedItems.length; idx += columns) {
                push.apply(result, lockedItems.slice(idx, idx + columns));
                push.apply(result, nonLockedItems.splice(0, nonLockedColumns));
            }

            return result;
        },

        _selectable: function () {
            var that = this,
                multi,
                cell,
                notString = [],
                isLocked = that._isLocked(),
                selectable = that.options.selectable;

            if (selectable) {

                if (that.selectable) {
                    that.selectable.destroy();
                }

                selectable = kendo.ui.Selectable.parseOptions(selectable);

                multi = selectable.multiple;
                cell = selectable.cell;

                if (that._hasDetails()) {
                    notString[notString.length] = ".k-detail-row";
                }
                if (that.options.groupable || that._hasFooters()) {
                    notString[notString.length] = ".k-grouping-row,.k-group-footer";
                }

                notString = notString.join(",");

                if (notString !== "") {
                    notString = ":not(" + notString + ")";
                }

                var elements = that.table;
                if (isLocked) {
                    elements = elements.add(that.lockedTable);
                }

                var filter = ">" + (cell ? SELECTION_CELL_SELECTOR : "tbody>tr" + notString);
                that.selectable = new kendo.ui.Selectable(elements, {
                    filter: filter,
                    aria: true,
                    multiple: multi,
                    change: function () {
                        that.trigger(CHANGE);
                    },
                    useAllItems: isLocked && multi && cell,
                    relatedTarget: function (items) {
                        if (cell || !isLocked) {
                            return;
                        }

                        var related;
                        var result = $();
                        for (var idx = 0, length = items.length; idx < length; idx++) {
                            related = that._relatedRow(items[idx]);

                            if (inArray(related[0], items) < 0) {
                                result = result.add(related);
                            }
                        }

                        return result;
                    },
                    continuousItems: function () {
                        return that._continuousItems(filter, cell);
                    }
                });

                if (that.options.navigatable) {
                    elements.on("keydown" + NS, function (e) {
                        var current = that.current();
                        var target = e.target;
                        if (e.keyCode === keys.SPACEBAR && $.inArray(target, elements) > -1 &&
                            !current.is(".k-edit-cell,.k-header") &&
                            current.parent().is(":not(.k-grouping-row,.k-detail-row,.k-group-footer)")) {
                            e.preventDefault();
                            e.stopPropagation();
                            current = cell ? current : current.parent();

                            if (isLocked && !cell) {
                                current = current.add(that._relatedRow(current));
                            }

                            if (multi) {
                                if (!e.ctrlKey) {
                                    that.selectable.clear();
                                } else {
                                    if (current.hasClass(SELECTED)) {
                                        current.removeClass(SELECTED);
                                        that.trigger(CHANGE);
                                        return;
                                    }
                                }
                            } else {
                                that.selectable.clear();
                            }

                            that.selectable.value(current);
                        }
                    });
                }
            }
        },

        _clipboard: function () {
            var options = this.options;
            var selectable = options.selectable;
            if (selectable && options.allowCopy) {
                var grid = this;
                if (!options.navigatable) {
                    grid.table.add(grid.lockedTable)
                        .attr("tabindex", 0)
                        .on("mousedown" + NS + " keydown" + NS, ".k-detail-cell", function (e) {
                            if (e.target !== e.currentTarget) {
                                e.stopImmediatePropagation();
                            }
                        })
                        .on("mousedown" + NS, NAVROW + ">" + NAVCELL, proxy(tableClick, grid));
                }
                grid.copyHandler = proxy(grid.copySelection, grid);
                grid.updateClipBoardState = function () {
                    if (grid.areaClipBoard) {
                        grid.areaClipBoard.val(grid.getTSV()).focus().select();
                    }
                };
                grid.bind("change", grid.updateClipBoardState);
                grid.wrapper.on("keydown", grid.copyHandler);
                grid.clearAreaHandler = proxy(grid.clearArea, grid);
                grid.wrapper.on("keyup", grid.clearAreaHandler);
            }
        },

        copySelection: function (e) {
            if ((e instanceof jQuery.Event && !(e.ctrlKey || e.metaKey)) ||
                $(e.target).is("input:visible,textarea:visible") ||
                (window.getSelection && window.getSelection().toString()) ||
                (document.selection && document.selection.createRange().text)) {
                return;
            }


            if (!this.areaClipBoard) {
                this.areaClipBoard =
                    $("<textarea />")
                    .css({
                        position: "fixed",
                        top: "50%",
                        left: "50%",
                        opacity: 0,
                        width: 0,
                        height: 0
                    })
                    .appendTo(this.wrapper);
            }

            this.areaClipBoard.val(this.getTSV()).focus().select();

        },

        getTSV: function () {
            var grid = this;
            var selected = grid.select();
            var delimeter = "\t";
            var allowCopy = grid.options.allowCopy;
            if ($.isPlainObject(allowCopy) && allowCopy.delimeter) {
                delimeter = allowCopy.delimeter;
            }
            var text = "";
            if (selected.length) {
                if (selected.eq(0).is("tr")) {
                    selected = selected.find("td:not(.k-group-cell)");
                }

                var result = [];
                var cellsOffset = this.columns.length;
                var lockedCols = grid._isLocked() && lockedColumns(grid.columns).length;
                var inLockedArea = true;

                $.each(selected, function (idx, cell) {
                    cell = $(cell);
                    var tr = cell.closest("tr");
                    var rowIndex = tr.index();
                    var cellIndex = cell.index();
                    if (lockedCols && inLockedArea) {
                        inLockedArea = $.contains(grid.lockedTable[0], cell[0]);
                    }
                    if (grid._groups() && inLockedArea) {
                        cellIndex -= grid._groups();
                    }
                    cellIndex = inLockedArea ? cellIndex : (cellIndex + lockedCols);
                    if (cellsOffset > cellIndex) {
                        cellsOffset = cellIndex;
                    }
                    var cellText = cell.text();
                    if (!result[rowIndex]) {
                        result[rowIndex] = [];
                    }
                    result[rowIndex][cellIndex] = cellText;

                });

                var rowsOffset = result.length;
                result = $.each(result, function (idx, val) {
                    if (val) {
                        result[idx] = val.slice(cellsOffset);
                        if (rowsOffset > idx) {
                            rowsOffset = idx;
                        }
                    }
                });

                $.each(result.slice(rowsOffset), function (idx, val) {
                    if (val) {
                        text += val.join(delimeter) + "\r\n";
                    } else {
                        text += "\r\n";
                    }
                });
            }
            return text;
        },

        clearArea: function (e) {
            if (this.areaClipBoard && e && e.target === this.areaClipBoard[0]) {
                if (this.options.navigatable) {
                    $(this.current()).closest("table").focus();
                } else {
                    this.table.focus();
                }
            }

            if (this.areaClipBoard) {
                this.areaClipBoard.remove();
                this.areaClipBoard = null;
            }
        },

        _minScreenSupport: function () {
            var any = this.hideMinScreenCols();

            if (any) {
                this.minScreenResizeHandler = proxy(this.hideMinScreenCols, this);
                $(window).on("resize", this.minScreenResizeHandler);
            }
        },
        hideMinScreenCols: function () {
            var cols = this.columns,
                any = false,
                screenWidth = (window.innerWidth > 0) ? window.innerWidth : screen.width;

            for (var i = 0; i < cols.length; i++) {
                var col = cols[i];
                //should provide px/em support
                var minWidth = col.minScreenWidth;
                if (minWidth !== undefined && minWidth !== null) {
                    any = true;
                    if (minWidth > screenWidth) {
                        this.hideColumn(col);
                    } else {
                        this.showColumn(col);
                    }
                }
            }
            return any;
        },

        _relatedRow: function (row) {
            var lockedTable = this.lockedTable;
            row = $(row);

            if (!lockedTable) {
                return row;
            }

            var table = row.closest(this.table.add(this.lockedTable));
            var index = table.find(">tbody>tr").index(row);

            table = table[0] === this.table[0] ? lockedTable : this.table;

            return table.find(">tbody>tr").eq(index);
        },

        clearSelection: function () {
            var that = this;
            that.selectable.clear();
            that.trigger(CHANGE);
        },

        select: function (items) {
            var that = this,
        selectable = that.selectable;

            items = $(items);
            if (items.length) {
                if (!selectable.options.multiple) {
                    selectable.clear();
                    items = items.first();
                }

                if (that._isLocked()) {
                    items = items.add(items.map(function () {
                        return that._relatedRow(this);
                    }));
                }

                selectable.value(items);
                return;
            }

            return selectable.value();
        },

        current: function (element) {
            var that = this,
                scrollable = that.options.scrollable,
            current = that._current,
                    table = that.table.add(that.thead.parent());

            if (element !== undefined && element.length) {
                if (!current || current[0] !== element[0]) {
                    if (current) {
                        current.removeClass(FOCUSED).removeAttr("id");
                        table.removeAttr("aria-activedescendant");
                    }

                    element.attr("id", that._cellId);
                    that._current = element.addClass(FOCUSED);

                    table.attr("aria-activedescendant", that._cellId);

                    if (element.length && scrollable) {
                        var content = element.closest("table").parent();
                        if (content.is(".k-grid-content")) {
                            that._scrollTo(element.parent()[0], that.content[0]);
                        } else if (content.is(".k-grid-content-locked")) {
                            that._scrollTo(that._relatedRow(element.parent())[0], that.content[0]);
                            if (!scrollable.virtual) {
                                that.lockedContent[0].scrollTop = that.content[0].scrollTop;
                            }
                        }

                        if (!content.is(".k-grid-content-locked,.k-grid-header-locked")) {
                            if (scrollable.virtual) {
                                that._scrollTo(element[0], that.content.find(">.k-virtual-scrollable-wrap")[0]);
                            } else {
                                that._scrollTo(element[0], that.content[0]);
                            }
                        }
                    }
                }
            }

            return that._current;
        },

        _removeCurrent: function () {
            if (this._current) {
                this._current.removeClass(FOCUSED);
                this._current = null;
            }
        },

        _scrollTo: function (element, container) {
            var elementToLowercase = element.tagName.toLowerCase(),
                isHorizontal = elementToLowercase === "td" || elementToLowercase === "th",
                elementOffset = element[isHorizontal ? "offsetLeft" : "offsetTop"],
elementOffsetDir = element[isHorizontal ? "offsetWidth" : "offsetHeight"],
containerScroll = container[isHorizontal ? "scrollLeft" : "scrollTop"],
containerOffsetDir = container[isHorizontal ? "clientWidth" : "clientHeight"],
bottomDistance = elementOffset + elementOffsetDir,
result = 0;

            if (containerScroll > elementOffset) {
                result = elementOffset;
            } else if (bottomDistance > (containerScroll + containerOffsetDir)) {
                if (elementOffsetDir <= containerOffsetDir) {
                    result = (bottomDistance - containerOffsetDir);
                } else {
                    result = elementOffset;
                }
            } else {
                result = containerScroll;
            }
            container[isHorizontal ? "scrollLeft" : "scrollTop"] = result;
        },

        _navigatable: function () {
            var that = this,
                currentProxy = proxy(that.current, that),
                table = that.table.add(that.lockedTable),
                headerTable = that.thead.parent().add($(">table", that.lockedHeader)),
                isLocked = that._isLocked(),
                dataTable = table,
                isRtl = kendo.support.isRtl(that.element);

            if (!that.options.navigatable) {
                return;
            }

            if (that.options.scrollable) {
                dataTable = table.add(headerTable);
                headerTable.attr(TABINDEX, -1);
            }

            dataTable.off("mousedown" + NS + " focus" + NS + " focusout" + NS + " keydown" + NS);

            headerTable.on("keydown" + NS, function (e) {
                if (e.altKey && e.keyCode == keys.DOWN) {
                    currentProxy().find(".k-grid-filter, .k-header-column-menu").click();
                    e.stopImmediatePropagation();
                }
            })
            .find("a.k-link").attr("tabIndex", -1);

            table
    .attr(TABINDEX, math.max(table.attr(TABINDEX) || 0, 0))
    .on("mousedown" + NS + " keydown" + NS, ".k-detail-cell", function (e) {
        if (e.target !== e.currentTarget) {
            e.stopImmediatePropagation();
        }
    });

            dataTable
        .on((kendo.support.touch ? "touchstart" + NS : "mousedown" + NS), NAVROW + ">" + NAVCELL, proxy(tableClick, that))
        .on("focus" + NS, function () {
            if (kendo.support.touch) {
                return;
            }

            var current = currentProxy();
            if (current && current.is(":visible")) {
                current.addClass(FOCUSED);
            } else {
                currentProxy($(this).find(FIRSTNAVITEM));
            }

            table.attr(TABINDEX, -1);
            headerTable.attr(TABINDEX, -1);
            $(this).attr(TABINDEX, 0);
        })
            .on("focusout" + NS, function () {
                var current = currentProxy();
                if (current) {
                    current.removeClass(FOCUSED);
                }
            })
        .on("keydown" + NS, function (e) {
            var key = e.keyCode,
                handled = false,
                canHandle = !e.isDefaultPrevented() && !$(e.target).is(":button,a,:input,a>.k-icon"),
                pageable = that.options.pageable,
                dataSource = that.dataSource,
                isInCell = that._editMode() == "incell",
                active,
                currentIndex,
                row,
                index,
                tableToFocus,
                shiftKey = e.shiftKey,
                relatedRow = proxy(that._relatedRow, that),
                current = currentProxy();

            if (current && current.is("th")) {
                canHandle = true;
            }

            if (canHandle && key == keys.UP) {
                currentProxy(moveVertical(current, e.currentTarget, table, headerTable, true, lockedColumns(that.columns).length));
                handled = true;
            } else if (canHandle && key == keys.DOWN) {
                currentProxy(moveVertical(current, e.currentTarget, table, headerTable, false, lockedColumns(that.columns).length));
                handled = true;
            } else if (canHandle && key == (isRtl ? keys.RIGHT : keys.LEFT)) {
                currentProxy(moveLeft(current, e.currentTarget, table, headerTable, relatedRow));
                handled = true;
            } else if (canHandle && key == (isRtl ? keys.LEFT : keys.RIGHT)) {
                currentProxy(moveRight(current, e.currentTarget, table, headerTable, relatedRow));
                handled = true;
            } else if (canHandle && pageable && keys.PAGEDOWN == key) {
                dataSource.page(dataSource.page() + 1);
                handled = true;
            } else if (canHandle && pageable && keys.PAGEUP == key) {
                dataSource.page(dataSource.page() - 1);
                handled = true;
            } else if (key == keys.ENTER || keys.F2 == key) {
                current = current ? current : table.find(FIRSTNAVITEM);

                if (!current.length) {
                    return;
                }

                if (!$(e.target).is("table") && !$.contains(current[0], e.target)) {
                    current = $(e.target).closest("[role=gridcell]");
                }

                if (current.is("th")) {
                    current.find(".k-link").click();
                    handled = true;
                } else if (current.parent().is(".k-master-row,.k-grouping-row")) {
                    current.parent().find(".k-icon:first").click();
                    handled = true;
                } else {
                    var focusable = current.find(":kendoFocusable:first");
                    if (!current.hasClass("k-edit-cell") && focusable[0] && current.hasClass("k-state-focused")) {
                        focusable.focus();
                        handled = true;
                    } else if (that.options.editable && !$(e.target).is(":button,.k-button,textarea")) {
                        var container = $(e.target).closest("[role=gridcell]");
                        if (!container[0]) {
                            container = current;
                        }

                        that._handleEditing(container, false, isInCell ? e.currentTarget : table[0]);
                        handled = true;
                    }
                }
            } else if (keys.ESC == key) {
                active = activeElement();
                if (current && $.contains(current[0], active) && !current.hasClass("k-edit-cell") && !current.parent().hasClass("k-grid-edit-row")) {
                    focusTable(e.currentTarget, true);
                    handled = true;
                } else if (that._editContainer && (!current || that._editContainer.has(current[0]) || current[0] === that._editContainer[0])) {
                    if (isInCell) {
                        that.closeCell(true);
                    } else {
                        currentIndex = $(current).parent().index();
                        if (active) {
                            active.blur();
                        }
                        that.cancelRow();
                        if (currentIndex >= 0) {
                            that.current(table.find(">tbody>tr").eq(currentIndex).children().filter(NAVCELL).first());
                        }
                    }

                    if (browser.msie && browser.version < 9) {
                        document.body.focus();
                    }
                    focusTable(isInCell ? e.currentTarget : table[0], true);
                    handled = true;
                }
            } else if (keys.TAB == key) {
                var cell;

                current = $(current);
                if (that.options.editable && isInCell) {
                    cell = $(activeElement()).closest(".k-edit-cell");

                    if (cell[0] && cell[0] !== current[0]) {
                        current = cell;
                    }
                }

                cell = tabNext(current, e.currentTarget, table, relatedRow, shiftKey);

                if (!current.is("th") && cell.length && that.options.editable && isInCell) {
                    that._handleEditing(current, cell, cell.closest(table));
                    handled = true;
                }
            }

            if (handled) {
                //prevent browser scrolling
                e.preventDefault();
                //required in hierarchy
                e.stopPropagation();
            }
        });
        },

        _handleEditing: function (current, next, table) {
            var that = this,
                active = $(activeElement()),
                mode = that._editMode(),
                isIE = browser.msie,
                oldIE = isIE && browser.version < 9,
                editContainer = that._editContainer,
                focusable,
                isEdited;

            table = $(table);
            if (mode == "incell") {
                isEdited = current.hasClass("k-edit-cell");
            } else {
                isEdited = current.parent().hasClass("k-grid-edit-row");
            }

            if (that.editable) {
                if ($.contains(editContainer[0], active[0])) {
                    if (browser.opera || oldIE) {
                        active.change().triggerHandler("blur");
                    } else {
                        active.blur();
                        if (isIE) {
                            //IE10 with jQuery 1.9.x does not trigger blur handler
                            //numeric textbox does trigger change
                            active.blur();
                        }
                    }
                }

                if (!that.editable) {
                    focusTable(table);
                    return;
                }

                if (that.editable.end()) {
                    if (mode == "incell") {
                        that.closeCell();
                    } else {
                        that.saveRow();
                        isEdited = true;
                    }
                } else {
                    if (mode == "incell") {
                        that.current(editContainer);
                    } else {
                        that.current(editContainer.children().filter(DATA_CELL).first());
                    }
                    focusable = editContainer.find(":kendoFocusable:first")[0];
                    if (focusable) {
                        focusable.focus();
                    }
                    return;
                }
            }

            if (next) {
                that.current(next);
            }

            if (oldIE) {
                document.body.focus();
            }
            focusTable(table, true);
            if ((!isEdited && !next) || next) {
                if (mode == "incell") {
                    that.editCell(that.current());
                } else {
                    that.editRow(that.current().parent());
                }
            }
        },

        _wrapper: function () {
            var that = this,
                table = that.table,
                height = that.options.height,
                wrapper = that.element;

            if (!wrapper.is("div")) {
                wrapper = wrapper.wrap("<div/>").parent();
            }

            that.wrapper = wrapper.addClass("k-grid k-widget");

            if (height) {
                that.wrapper.css(HEIGHT, height);
                table.css(HEIGHT, "auto");
            }

            that._initMobile();
        },

        _initMobile: function () {
            var options = this.options;
            var that = this;

            this._isMobile = (options.mobile === true && kendo.support.mobileOS) ||
                                options.mobile === "phone" ||
                                options.mobile === "tablet";

            if (this._isMobile) {
                var html = this.wrapper.addClass("k-grid-mobile").wrap(
                        '<div data-' + kendo.ns + 'role="view" ' +
                        'data-' + kendo.ns + 'init-widgets="false"></div>'
                    )
                    .parent();

                this.pane = kendo.mobile.ui.Pane.wrap(html);
                this.view = this.pane.view();
                this._actionSheetPopupOptions = $(document.documentElement).hasClass("km-root") ? {
                    modal: false
                } : {
                    align: "bottom center",
                    position: "bottom center",
                    effect: "slideIn:up"
                };

                if (options.height) {
                    this.pane.element.parent().css(HEIGHT, options.height);
                }

                this._editAnimation = "slide";

                this.view.bind("show", function () {
                    if (that._isLocked()) {
                        that._updateTablesWidth();
                        that._applyLockedContainersWidth();
                        that._syncLockedContentHeight();
                        that._syncLockedHeaderHeight();
                        that._syncLockedFooterHeight();
                    }
                });
            }
        },

        _tbody: function () {
            var that = this,
                table = that.table,
                tbody;

            tbody = table.find(">tbody");

            if (!tbody.length) {
                tbody = $("<tbody/>").appendTo(table);
            }

            that.tbody = tbody.attr("role", "rowgroup");
        },

        _scrollable: function () {
            var that = this,
                header,
                table,
                options = that.options,
                scrollable = options.scrollable,
                hasVirtualScroll = scrollable !== true && scrollable.virtual && !that.virtualScrollable,
                scrollbar = !kendo.support.kineticScrollNeeded || hasVirtualScroll ? kendo.support.scrollbar() : 0;

            if (scrollable) {
                header = that.wrapper.children(".k-grid-header");

                if (!header[0]) {
                    header = $('<div class="k-grid-header" />').insertBefore(that.table);
                }

                // workaround for IE issue where scroll is not raised if container is same width as the scrollbar
                header.css((isRtl ? "padding-left" : "padding-right"), scrollable.virtual ? scrollbar + 1 : scrollbar);
                table = $('<table role="grid" />');
                if (isIE7) {
                    table.attr("cellspacing", 0);
                }

                table.width(that.table[0].style.width);

                table.append(that.thead);
                header.empty().append($('<div class="k-grid-header-wrap" />').append(table));


                that.content = that.table.parent();

                if (that.content.is(".k-virtual-scrollable-wrap, .km-scroll-container")) {
                    that.content = that.content.parent();
                }

                if (!that.content.is(".k-grid-content, .k-virtual-scrollable-wrap")) {
                    that.content = that.table.wrap('<div class="k-grid-content" />').parent();
                }
                if (hasVirtualScroll) {
                    that.virtualScrollable = new VirtualScrollable(that.content, {
                        dataSource: that.dataSource,
                        itemHeight: function () {
                            return that._averageRowHeight();
                        }
                    });
                }

                that.scrollables = header.children(".k-grid-header-wrap");

                // the footer may exists if rendered from the server
                var footer = that.wrapper.find(".k-grid-footer");

                if (footer.length) {
                    that.scrollables = that.scrollables.add(footer.children(".k-grid-footer-wrap"));
                }

                if (scrollable.virtual) {
                    that.content.find(">.k-virtual-scrollable-wrap").unbind("scroll" + NS).bind("scroll" + NS, function () {
                        that.scrollables.scrollLeft(this.scrollLeft);
                        if (that.lockedContent) {
                            that.lockedContent[0].scrollTop = this.scrollTop;
                        }
                    });
                } else {
                    that.content.unbind("scroll" + NS).bind("scroll" + NS, function () {
                        that.scrollables.scrollLeft(this.scrollLeft);
                        if (that.lockedContent) {
                            that.lockedContent[0].scrollTop = this.scrollTop;
                        }
                    });

                    var touchScroller = that.content.data("kendoTouchScroller");
                    if (touchScroller) {
                        touchScroller.destroy();
                    }

                    touchScroller = kendo.touchScroller(that.content);
                    if (touchScroller && touchScroller.movable) {
                        that.touchScroller = touchScroller;
                        touchScroller.movable.bind("change", function (e) {
                            that.scrollables.scrollLeft(-e.sender.x);
                            if (that.lockedContent) {
                                that.lockedContent.scrollTop(-e.sender.y);
                            }
                        });

                        that.one(DATABOUND, function (e) {
                            e.sender.wrapper.addClass("k-grid-backface");
                        });
                    }
                }
            }
        },

        _setContentWidth: function (scrollLeft) {
            var that = this,
                hiddenDivClass = 'k-grid-content-expander',
            hiddenDiv = '<div class="' + hiddenDivClass + '"></div>',
            resizable = that.resizable,
            expander;

            if (that.options.scrollable && that.wrapper.is(":visible")) {
                expander = that.table.parent().children('.' + hiddenDivClass);
                that._setContentWidthHandler = proxy(that._setContentWidth, that);
                if (!that.dataSource || !that.dataSource.view().length) {
                    if (!expander[0]) {
                        expander = $(hiddenDiv).appendTo(that.table.parent());
                        if (resizable) {
                            resizable.bind("resize", that._setContentWidthHandler);
                        }
                    }
                    if (that.thead) {
                        expander.width(that.thead.width());
                        if (scrollLeft) {
                            that.content.scrollLeft(scrollLeft);
                        }
                    }
                } else if (expander[0]) {
                    expander.remove();
                    if (resizable) {
                        resizable.unbind("resize", that._setContentWidthHandler);
                    }
                }

                that._applyLockedContainersWidth();
            }
        },

        _applyLockedContainersWidth: function () {
            if (this.options.scrollable && this.lockedHeader) {
                var headerTable = this.thead.parent(),
                    headerWrap = headerTable.parent(),
                            contentWidth = this.wrapper[0].clientWidth,
                            groups = this._groups(),
                            scrollbar = kendo.support.scrollbar(),
                            cols = this.lockedHeader.find(">table>colgroup>col:not(.k-group-col, .k-hierarchy-col)"),
                            nonLockedCols = headerTable.find(">colgroup>col:not(.k-group-col, .k-hierarchy-col)"),
                            width = columnsWidth(cols),
                            nonLockedColsWidth = columnsWidth(nonLockedCols),
                            footerWrap;

                if (groups > 0) {
                    width += this.lockedHeader.find(".k-group-cell:first").outerWidth() * groups;
                }

                if (width >= contentWidth) {
                    width = contentWidth - 3 * scrollbar;
                }

                this.lockedHeader
                            .add(this.lockedContent)
                    .width(width);

                headerWrap[0].style.width = headerWrap.parent().width() - width - 2 + "px";

                headerTable.add(this.table).width(nonLockedColsWidth);

                if (this.virtualScrollable) {
                    contentWidth -= scrollbar;
                }

                this.content[0].style.width = contentWidth - width - 2 + "px";

                if (this.lockedFooter && this.lockedFooter.length) {
                    this.lockedFooter.width(width);
                    footerWrap = this.footer.find(".k-grid-footer-wrap");
                    footerWrap[0].style.width = headerWrap[0].clientWidth + "px";
                    footerWrap.children().first().width(nonLockedColsWidth);
                }
            }
        },

        _setContentHeight: function () {
            var that = this,
        options = that.options,
        height = that.wrapper.innerHeight(),
        header = that.wrapper.children(".k-grid-header"),
        scrollbar = kendo.support.scrollbar();

            if (options.scrollable && that.wrapper.is(":visible")) {

                height -= header.outerHeight();

                if (that.pager) {
                    height -= that.pager.element.outerHeight();
                }

                if (options.groupable) {
                    height -= that.wrapper.children(".k-grouping-header").outerHeight();
                }

                if (options.toolbar) {
                    height -= that.wrapper.children(".k-grid-toolbar").outerHeight();
                }

                if (that.footerTemplate) {
                    height -= that.wrapper.children(".k-grid-footer").outerHeight();
                }

                var isGridHeightSet = function (el) {
                    var initialHeight, newHeight;
                    if (el[0].style.height) {
                        return true;
                    } else {
                        initialHeight = el.height();
                    }

                    el.height("auto");
                    newHeight = el.height();

                    if (initialHeight != newHeight) {
                        el.height("");
                        return true;
                    }
                    el.height("");
                    return false;
                };

                if (isGridHeightSet(that.wrapper)) { // set content height only if needed
                    if (height > scrollbar * 2) { // do not set height if proper scrollbar cannot be displayed
                        if (that.lockedContent) {
                            scrollbar = that.table[0].offsetWidth > that.table.parent()[0].clientWidth ? scrollbar : 0;
                            that.lockedContent.height(height - scrollbar);
                        }

                        that.content.height(height);
                    } else {
                        that.content.height(scrollbar * 2 + 1);
                    }
                }
            }
        },

        _averageRowHeight: function () {
            var that = this,
                itemsCount = that._items(that.tbody).length,
                rowHeight = that._rowHeight;

            if (itemsCount === 0) {
                return rowHeight;
            }

            if (!that._rowHeight) {
                that._rowHeight = rowHeight = that.table.outerHeight() / itemsCount;
                that._sum = rowHeight;
                that._measures = 1;
            }

            var currentRowHeight = that.table.outerHeight() / itemsCount;

            if (rowHeight !== currentRowHeight) {
                that._measures++;
                that._sum += currentRowHeight;
                that._rowHeight = that._sum / that._measures;
            }
            return rowHeight;
        },

        _dataSource: function () {
            var that = this,
                options = that.options,
                pageable,
                dataSource = options.dataSource;

            dataSource = isArray(dataSource) ? { data: dataSource } : dataSource;

            if (isPlainObject(dataSource)) {
                extend(dataSource, {
                    table: that.table, fields: that.columns
                });

                pageable = options.pageable;

                if (isPlainObject(pageable) && pageable.pageSize !== undefined) {
                    dataSource.pageSize = pageable.pageSize;
                }
            }

            if (that.dataSource && that._refreshHandler) {
                that.dataSource.unbind(CHANGE, that._refreshHandler)
                                .unbind(PROGRESS, that._progressHandler)
                                .unbind(ERROR, that._errorHandler);
            } else {
                that._refreshHandler = proxy(that.refresh, that);
                that._progressHandler = proxy(that._requestStart, that);
                that._errorHandler = proxy(that._error, that);
            }

            that.dataSource = DataSource.create(dataSource)
                                .bind(CHANGE, that._refreshHandler)
                                .bind(PROGRESS, that._progressHandler)
                                .bind(ERROR, that._errorHandler);
        },

        _error: function () {
            this._progress(false);
        },

        _requestStart: function () {
            this._progress(true);
        },

        _modelChange: function (e) {
            var that = this,
                tbody = that.tbody,
                model = e.model,
                row = that.tbody.find("tr[" + kendo.attr("uid") + "=" + model.uid + "]"),
                relatedRow,
                cell,
                column,
                isAlt = row.hasClass("k-alt"),
                tmp,
                idx = that._items(tbody).index(row),
                isLocked = that.lockedContent,
                selectable,
                selectableRow,
                childCells,
                originalCells,
                length;

            if (isLocked) {
                relatedRow = that._relatedRow(row);
            }

            if (row.add(relatedRow).children(".k-edit-cell").length && !that.options.rowTemplate) {
                row.add(relatedRow).children(":not(.k-group-cell,.k-hierarchy-cell)").each(function () {
                    cell = $(this);
                    column = leafColumns(that.columns)[that.cellIndex(cell)];

                    if (column.field === e.field) {
                        if (!cell.hasClass("k-edit-cell")) {
                            that._displayCell(cell, column, model);
                            $('<span class="k-dirty"/>').prependTo(cell);
                        } else {
                            cell.addClass("k-dirty-cell");
                        }
                    }
                });

            } else if (!row.hasClass("k-grid-edit-row")) {

                selectableRow = $().add(row);

                if (isLocked) {
                    tmp = (isAlt ? that.lockedAltRowTemplate : that.lockedRowTemplate)(model);

                    selectableRow = selectableRow.add(relatedRow);

                    relatedRow.replaceWith(tmp);
                }

                that.angular("cleanup", function () {
                    return {
                        elements: selectableRow.get()
                    };
                });

                tmp = (isAlt ? that.altRowTemplate : that.rowTemplate)(model);

                row.replaceWith(tmp);

                tmp = that._items(tbody).eq(idx);

                var angularData = [{
                    dataItem: model
                }];

                if (isLocked) {
                    row = row.add(relatedRow);

                    relatedRow = that._relatedRow(tmp)[0];
                    adjustRowHeight(tmp[0], relatedRow);

                    tmp = tmp.add(relatedRow);
                    angularData.push({
                        dataItem: model
                    });
                }

                that.angular("compile", function () {
                    return {
                        elements: tmp.get(),
                        data: angularData
                    };
                });

                selectable = that.options.selectable;
                if (selectable && row.hasClass("k-state-selected")) {
                    that.select(tmp);
                }

                originalCells = selectableRow.children(":not(.k-group-cell,.k-hierarchy-cell)");
                childCells = tmp.children(":not(.k-group-cell,.k-hierarchy-cell)");

                for (idx = 0, length = that.columns.length; idx < length; idx++) {
                    column = that.columns[idx];

                    cell = childCells.eq(idx);
                    if (selectable && originalCells.eq(idx).hasClass("k-state-selected")) {
                        cell.addClass("k-state-selected");
                    }

                    if (column.field === e.field) {
                        $('<span class="k-dirty"/>').prependTo(cell);
                    }
                }

                that.trigger("itemChange", {
                    item: tmp, data: model, ns: ui
                });
            }
        },

        _pageable: function () {
            var that = this,
                wrapper,
                pageable = that.options.pageable;

            if (pageable) {
                wrapper = that.wrapper.children("div.k-grid-pager");

                if (!wrapper.length) {
                    wrapper = $('<div class="k-pager-wrap k-grid-pager"/>').appendTo(that.wrapper);
                }

                if (that.pager) {
                    that.pager.destroy();
                }

                if (typeof pageable === "object" && pageable instanceof kendo.ui.Pager) {
                    that.pager = pageable;
                } else {
                    that.pager = new kendo.ui.Pager(wrapper, extend({
                    }, pageable, {
                        dataSource: that.dataSource
                    }));
                }
            }
        },

        _footer: function () {
            var that = this,
                aggregates = that.dataSource.aggregates(),
                html = "",
                footerTemplate = that.footerTemplate,
                options = that.options,
                footerWrap,
                footer = that.footer || that.wrapper.find(".k-grid-footer");

            if (footerTemplate) {
                html = $(that._wrapFooter(footerTemplate(aggregates)));

                if (footer.length) {
                    var tmp = html;

                    that.angular("cleanup", function () {
                        return {
                            elements: footer.get()
                        };
                    });

                    footer.replaceWith(tmp);
                    footer = that.footer = tmp;
                } else {
                    if (options.scrollable) {
                        footer = that.footer = options.pageable ? html.insertBefore(that.wrapper.children("div.k-grid-pager")) : html.appendTo(that.wrapper);
                    } else {
                        footer = that.footer = html.insertBefore(that.tbody);
                    }
                }

                that.angular("compile", function () {
                    return {
                        elements: footer.find("td:not(.k-group-cell, .k-hierarchy-cell)").get(),
                        data: map(that.columns, function (col, i) {
                            return {
                                column: col,
                                aggregate: aggregates[col.field]
                            };
                        })
                    };
                });

            } else if (footer && !that.footer) {
                that.footer = footer;
            }

            if (footer.length) {
                if (options.scrollable) {
                    footerWrap = footer.attr("tabindex", -1).children(".k-grid-footer-wrap");
                    that.scrollables = that.scrollables
                        .filter(function () {
                            return !$(this).is(".k-grid-footer-wrap");
                        })
                        .add(footerWrap);
                }

                if (that._footerWidth) {
                    footer.find("table").css('width', that._footerWidth);
                }

                if (footerWrap) {
                    var offset = that.content.scrollLeft();

                    var hasVirtualScroll = options.scrollable !== true && options.scrollable.virtual && !that.virtualScrollable;
                    if (hasVirtualScroll) {
                        offset = that.wrapper.find('.k-virtual-scrollable-wrap').scrollLeft();
                    }
                    footerWrap.scrollLeft(offset);
                }
            }

            if (that.lockedContent) {
                that._appendLockedColumnFooter();
                that._applyLockedContainersWidth();
                that._syncLockedFooterHeight();
            }
        },

        _wrapFooter: function (footerRow) {
            var that = this,
                html = "",
                scrollbar = !kendo.support.mobileOS ? kendo.support.scrollbar() : 0;

            if (that.options.scrollable) {
                html = $('<div class="k-grid-footer"><div class="k-grid-footer-wrap"><table' + (isIE7 ? ' cellspacing="0"' : '') + '><tbody>' + footerRow + '</tbody></table></div></div>');
                that._appendCols(html.find("table"));
                html.css((isRtl ? "padding-left" : "padding-right"), scrollbar); // Update inner fix.

                return html;
            }

            return '<tfoot class="k-grid-footer">' + footerRow + '</tfoot>';
        },

        _columnMenu: function () {
            var that = this,
                menu,
    columns = leafColumns(that.columns),
    column,
    options = that.options,
    columnMenu = options.columnMenu,
    menuOptions,
    sortable,
    filterable,
    cells,
    hasMultiColumnHeaders = grep(that.columns, function (item) {
        return item.columns !== undefined;
    }).length > 0,
    isMobile = this._isMobile,
    initCallback = function (e) {
        that.trigger(COLUMNMENUINIT, {
            field: e.field, container: e.container
        });
    },
    closeCallback = function (element) {
        focusTable(element.closest("table"), true);
    },
    $angular = options.$angular;

            if (columnMenu) {
                if (typeof columnMenu == "boolean") {
                    columnMenu = {};
                }

                cells = leafDataCells(that.thead);

                for (var idx = 0, length = cells.length; idx < length; idx++) {
                    column = columns[idx];
                    var cell = cells.eq(idx);

                    if (!column.command && (column.field || cell.attr("data-" + kendo.ns + "field"))) {
                        menu = cell.data("kendoColumnMenu");
                        if (menu) {
                            menu.destroy();
                        }

                        sortable = column.sortable !== false && columnMenu.sortable !== false && options.sortable !== false ? extend({}, options.sortable, {
                            compare: (column.sortable || {
                            }).compare
                        }) : false;

                        filterable = options.filterable && column.filterable !== false && columnMenu.filterable !== false ? extend({ pane: that.pane }, options.filterable, column.filterable) : false;

                        if (column.filterable && column.filterable.dataSource) {
                            filterable.forceUnique = false;
                            filterable.checkSource = column.filterable.dataSource;
                        }

                        if (filterable) {
                            filterable.format = column.format;
                        }

                        menuOptions = {
                            dataSource: that.dataSource,
                            values: column.values,
                            columns: columnMenu.columns,
                            sortable: sortable,
                            filterable: filterable,
                            messages: columnMenu.messages,
                            owner: that,
                            closeCallback: closeCallback,
                            init: initCallback,
                            pane: that.pane,
                            filter: isMobile ? ":not(.k-column-active)" : "",
                            lockedColumns: !hasMultiColumnHeaders && column.lockable !== false && lockedColumns(columns).length > 0
                        };

                        if ($angular) {
                            menuOptions.$angular = $angular;
                        }

                        cell.kendoColumnMenu(menuOptions);
                    }
                }
            }
        },

        _headerCells: function () {
            return this.thead.find("th").filter(function () {
                var th = $(this);
                return !th.hasClass("k-group-cell") && !th.hasClass("k-hierarchy-cell");
            });
        },

        _filterable: function () {
            var that = this,
                columns = leafColumns(that.columns),
                filterMenu,
                cells,
                cell,
                filterInit = function (e) {
                    that.trigger(FILTERMENUINIT, {
                        field: e.field, container: e.container
                    });
                },
                closeCallback = function (element) {
                    focusTable(element.closest("table"), true);
                },
                        filterable = that.options.filterable;
            if (filterable && typeof filterable.mode == STRING && filterable.mode.indexOf("menu") == -1) {
                filterable = false;
            }

            if (filterable && !that.options.columnMenu) {
                cells = leafDataCells(that.thead);//that._headerCells();

                for (var idx = 0, length = cells.length; idx < length; idx++) {
                    cell = cells.eq(idx);

                    if (columns[idx].filterable !== false && !columns[idx].command && (columns[idx].field || cell.attr("data-" + kendo.ns + "field"))) {
                        filterMenu = cell.data("kendoFilterMenu");

                        if (filterMenu) {
                            filterMenu.destroy();
                        }

                        var columnFilterable = columns[idx].filterable;

                        var options = extend({
                        },
                            filterable,
                            columnFilterable,
                        {
                            dataSource: that.dataSource,
                            values: columns[idx].values,
                            format: columns[idx].format,
                            closeCallback: closeCallback,
                            init: filterInit,
                            pane: that.pane
                        }
                        );

                        if (columnFilterable && columnFilterable.messages) {
                            options.messages = extend(true, {
                            }, filterable.messages, columnFilterable.messages);
                        }
                        if (columnFilterable && columnFilterable.dataSource) {
                            options.forceUnique = false;
                            options.checkSource = columnFilterable.dataSource;
                        }

                        if (columnFilterable && columnFilterable.multi) {
                            cell.kendoFilterMultiCheck(options);
                        } else {
                            cell.kendoFilterMenu(options);
                        }
                    }
                }
            }
        },

        _filterRow: function () {
            var that = this;
            if (!that._hasFilterRow()) {
                return;
            }

            var columns = leafColumns(that.columns),
                filterable = that.options.filterable,
                rowheader = that.thead.find(".k-filter-row");

            this._updateHeader(this.dataSource.group().length);

            for (var i = 0; i < columns.length; i++) {
                var suggestDataSource,
                    col = columns[i],
                    operators = that.options.filterable.operators,
                    customDataSource = false,
                    th = $("<th/>"),
                    field = col.field;

                if (col.hidden) {
                    th.hide();
                }
                rowheader.append(th);
                if (field && col.filterable !== false) {
                    var cellOptions = col.filterable && col.filterable.cell || {};

                    suggestDataSource = that.options.dataSource;
                    if (suggestDataSource instanceof DataSource) {
                        suggestDataSource = that.options.dataSource.options;
                    }

                    var messages = extend(true, {
                    }, filterable.messages);
                    if (col.filterable) {
                        extend(true, messages, col.filterable.messages);
                    }

                    if (cellOptions.enabled === false) {
                        th.html("&nbsp;");
                        continue;
                    }
                    if (cellOptions.dataSource) {
                        suggestDataSource = cellOptions.dataSource;
                        customDataSource = true;
                    }
                    if (col.filterable && col.filterable.operators) {
                        operators = col.filterable.operators;
                    }

                    $("<span/>").attr(kendo.attr("field"), field)
                        .kendoFilterCell({
                            dataSource: that.dataSource,
                            suggestDataSource: suggestDataSource,
                            customDataSource: customDataSource,
                            field: field,
                            messages: messages,
                            values: col.values,
                            template: cellOptions.template,
                            delay: cellOptions.delay,
                            inputWidth: cellOptions.inputWidth,
                            suggestionOperator: cellOptions.suggestionOperator,
                            minLength: cellOptions.minLength,
                            dataTextField: cellOptions.dataTextField,
                            operator: cellOptions.operator,
                            operators: operators,
                            showOperators: cellOptions.showOperators
                        }).appendTo(th);
                } else {
                    th.html("&nbsp;");
                }
            }
        },

        _sortable: function () {
            var that = this,
columns = leafColumns(that.columns),
column,
                sorterInstance,
cell,
sortable = that.options.sortable;

            if (sortable) {
                var cells = leafDataCells(that.thead);

                for (var idx = 0, length = cells.length; idx < length; idx++) {
                    column = columns[idx];

                    if (column.sortable !== false && !column.command && column.field) {
                        cell = cells.eq(idx);

                        sorterInstance = cell.data("kendoColumnSorter");

                        if (sorterInstance) {
                            sorterInstance.destroy();
                        }

                        cell.attr("data-" + kendo.ns + "field", column.field)
                            .kendoColumnSorter(
                                                        extend({
                                                        }, sortable, column.sortable, {
                                                            dataSource: that.dataSource,
                                                            aria: true,
                                                            filter: ":not(.k-column-active)"
                                                        })
                                                    );
                    }
                }
                cells = null;
            }
        },

        _columns: function (columns) {
            var that = this,
                table = that.table,
                encoded,
                cols = table.find("col"),
                lockedCols,
                dataSource = that.options.dataSource;

            // using HTML5 data attributes as a configuration option e.g. <th data-field="foo">Foo</foo>
            columns = columns.length ? columns : map(table.find("th"), function (th, idx) {
                th = $(th);
                var sortable = th.attr(kendo.attr("sortable")),
                    filterable = th.attr(kendo.attr("filterable")),
                    type = th.attr(kendo.attr("type")),
                    groupable = th.attr(kendo.attr("groupable")),
                    field = th.attr(kendo.attr("field")),
                    title = th.attr(kendo.attr("title")),
                    menu = th.attr(kendo.attr("menu"));

                if (!field) {
                    field = th.text().replace(/\s|[^A-z0-9]/g, "");
                }

                return {
                    field: field,
                    type: type,
                    title: title,
                    sortable: sortable !== "false",
                    filterable: filterable !== "false",
                    groupable: groupable !== "false",
                    menu: menu,
                    template: th.attr(kendo.attr("template")),
                    width: cols.eq(idx).css("width")
                };
            });

            encoded = !(that.table.find("tbody tr").length > 0 && (!dataSource || !dataSource.transport));

            if (that.options.scrollable) {
                var initialColumns = columns;
                lockedCols = lockedColumns(columns);
                columns = nonLockedColumns(columns);

                if (lockedCols.length > 0 && columns.length === 0) {
                    throw new Error("There should be at least one non locked column");
                }

                normalizeHeaderCells(that.element.find("tr:has(th):first").find("th:not(.k-group-cell)"), initialColumns);
                columns = lockedCols.concat(columns);
            }

            that.columns = normalizeColumns(columns, encoded);
        },

        _groups: function () {
            var group = this.dataSource.group();

            return group ? group.length : 0;
        },

        _tmpl: function (rowTemplate, columns, alt, skipGroupCells) {
            var that = this,
                    //settings = extend({}, kendo.Template, that.options.templateSettings),
                settings = extend({
                }, kendo.Template, that.options.templateSettings),
                    idx,
                length = columns.length,
                template,
                state = {
                    storage: {
                    }, count: 0
                },
                column,
                    type,
                hasDetails = that._hasDetails(),
                className = [],
                groups = that._groups();

            if (!rowTemplate) {
                rowTemplate = "<tr";

                if (alt) {
                    className.push("k-alt");
                }

                if (hasDetails) {
                    className.push("k-master-row");
                }

                if (className.length) {
                    rowTemplate += ' class="' + className.join(" ") + '"';
                }

                if (length) { // data item is an object
                    rowTemplate += ' ' + kendo.attr("uid") + '="#=' + kendo.expr("uid", settings.paramName) + '#"';
                }

                rowTemplate += " role='row'>";

                if (groups > 0 && !skipGroupCells) {
                    rowTemplate += groupCells(groups);
                }

                if (hasDetails) {
                    rowTemplate += '<td class="k-hierarchy-cell"><a class="k-icon k-plus" href="\\#" tabindex="-1"></a></td>';
                }

                for (idx = 0; idx < length; idx++) {
                    column = columns[idx];
                    template = column.template;
                    type = typeof template;

                    rowTemplate += "<td" + stringifyAttributes(column.attributes) + " role='gridcell'>";
                    rowTemplate += that._cellTmpl(column, state);

                    rowTemplate += "</td>";
                }

                rowTemplate += "</tr>";
            }
            settings.paramName = 'd';
            rowTemplate = kendo.template(rowTemplate, settings);

            if (state.count > 0) {
                return proxy(rowTemplate, state.storage);
            }

            return rowTemplate;
        },

        _headerCellText: function (column) {
            var that = this,
                settings = extend({}, kendo.Template, that.options.templateSettings),
                template = column.headerTemplate,
                type = typeof (template),
                text = column.title || column.field || "";

            if (type === FUNCTION) {
                text = kendo.template(template, settings)({
                });
            } else if (type === STRING) {
                text = template;
            }
            return text;
        },

        _cellTmpl: function (column, state) {
            var that = this,
                settings = extend({
                }, kendo.Template, that.options.templateSettings),
                template = column.template,
                paramName = settings.paramName,
                field = column.field,
                html = "",
                idx,
                length,
                format = column.format,
                type = typeof template,
                columnValues = column.values;

            if (column.command) {
                if (isArray(column.command)) {
                    for (idx = 0, length = column.command.length; idx < length; idx++) {
                        html += that._createButton(column.command[idx]);
                    }
                    return html.replace(templateHashRegExp, "\\#");
                }
                return that._createButton(column.command).replace(templateHashRegExp, "\\#");
            }
            if (type === FUNCTION) {
                state.storage["tmpl" + state.count] = template;
                html += "#=this.tmpl" + state.count + "(" + paramName + ")#";
                state.count++;
            } else if (type === STRING) {
                html += template;
            } else if (columnValues && columnValues.length && isPlainObject(columnValues[0]) && "value" in columnValues[0] && field) {
                html += "#var v =" + kendo.stringify(convertToObject(columnValues)).replace(templateHashRegExp, "\\#") + "#";
                html += "#var f = v[";

                if (!settings.useWithBlock) {
                    html += paramName + ".";
                }

                html += field + "]#";
                html += "${f != null ? f : ''}";
            } else {
                html += column.encoded ? "#:" : "#=";

                if (format) {
                    html += 'kendo.format(\"' + format.replace(formatRegExp, "\\$1") + '\",';
                }

                if (field) {
                    field = kendo.expr(field, paramName);
                    html += field + "==null?'':" + field;
                } else {
                    html += "''";
                }

                if (format) {
                    html += ")";
                }

                html += "#";
            }
            return html;
        },

        _templates: function () {
            var that = this,
                options = that.options,
                dataSource = that.dataSource,
                groups = dataSource.group(),
                footer = that.footer || that.wrapper.find(".k-grid-footer"),
                aggregates = dataSource.aggregate(),
                columnLeafs = leafColumns(that.columns),
                columnsLocked = leafColumns(lockedColumns(that.columns)),
                columns = options.scrollable ? leafColumns(nonLockedColumns(that.columns)) : columnLeafs;

            if (options.scrollable && columnsLocked.length) {
                if (options.rowTemplate || options.altRowTemplate) {
                    throw new Error("Having both row template and locked columns is not supported");
                }

                that.rowTemplate = that._tmpl(options.rowTemplate, columns, false, true);
                that.altRowTemplate = that._tmpl(options.altRowTemplate || options.rowTemplate, columns, true, true);

                that.lockedRowTemplate = that._tmpl(options.rowTemplate, columnsLocked);
                that.lockedAltRowTemplate = that._tmpl(options.altRowTemplate || options.rowTemplate, columnsLocked, true);
            } else {
                that.rowTemplate = that._tmpl(options.rowTemplate, columns);
                that.altRowTemplate = that._tmpl(options.altRowTemplate || options.rowTemplate, columns, true);
            }

            if (that._hasDetails()) {
                that.detailTemplate = that._detailTmpl(options.detailTemplate || "");
            }

            if ((that._group && !isEmptyObject(aggregates)) || (!isEmptyObject(aggregates) && !footer.length) ||
                grep(columnLeafs, function (column) { return column.footerTemplate; }).length) {

                that.footerTemplate = that._footerTmpl(columnLeafs, aggregates, "footerTemplate", "k-footer-template");
            }

            if (groups && grep(columnLeafs, function (column) { return column.groupFooterTemplate; }).length) {
                aggregates = $.map(groups, function (g) {
                    return g.aggregates;
                });

                that.groupFooterTemplate = that._footerTmpl(columns, aggregates, "groupFooterTemplate", "k-group-footer", columnsLocked.length);

                if (options.scrollable && columnsLocked.length) {
                    that.lockedGroupFooterTemplate = that._footerTmpl(columnsLocked, aggregates, "groupFooterTemplate", "k-group-footer");
                }
            }
        },

        _footerTmpl: function (columns, aggregates, templateName, rowClass, skipGroupCells) {
            var that = this,
                settings = extend({}, kendo.Template, that.options.templateSettings),
                paramName = settings.paramName,
                html = "",
                idx,
                length,
                template,
                type,
                storage = {
                },
                count = 0,
                scope = {
                },
                groups = that._groups(),
                fieldsMap = that.dataSource._emptyAggregates(aggregates),
                column;

            html += '<tr class="' + rowClass + '">';

            if (groups > 0 && !skipGroupCells) {
                html += groupCells(groups);
            }

            if (that._hasDetails()) {
                html += '<td class="k-hierarchy-cell">&nbsp;</td>';
            }

            for (idx = 0, length = columns.length; idx < length; idx++) {
                column = columns[idx];
                template = column[templateName];
                type = typeof template;

                html += "<td" + stringifyAttributes(column.footerAttributes) + ">";

                if (template) {
                    if (type !== FUNCTION) {
                        scope = fieldsMap[column.field] ? extend({
                        }, settings, {
                            paramName: paramName + "['" + column.field + "']"
                        }) : {};
                        template = kendo.template(template, scope);
                    }

                    storage["tmpl" + count] = template;
                    html += "#=this.tmpl" + count + "(" + paramName + ")#";
                    count++;
                } else {
                    html += "&nbsp;";
                }

                html += "</td>";
            }

            html += '</tr>';

            html = kendo.template(html, settings);

            if (count > 0) {
                return proxy(html, storage);
            }

            return html;
        },

        _detailTmpl: function (template) {
            var that = this,
                html = "",
                settings = extend({
                }, kendo.Template, that.options.templateSettings),
                paramName = settings.paramName,
                templateFunctionStorage = {},
                templateFunctionCount = 0,
                groups = that._groups(),
                colspan = visibleColumns(leafColumns(that.columns)).length,
                type = typeof template;

            html += '<tr class="k-detail-row">';
            if (groups > 0) {
                html += groupCells(groups);
            }
            html += '<td class="k-hierarchy-cell"></td><td class="k-detail-cell"' + (colspan ? ' colspan="' + colspan + '"' : '') + ">";

            if (type === FUNCTION) {
                templateFunctionStorage["tmpl" + templateFunctionCount] = template;
                html += "#=this.tmpl" + templateFunctionCount + "(" + paramName + ")#";
                templateFunctionCount++;
            } else {
                html += template;
            }

            html += "</td></tr>";

            html = kendo.template(html, settings);

            if (templateFunctionCount > 0) {
                return proxy(html, templateFunctionStorage);
            }

            return html;
        },

        _hasDetails: function () {
            var that = this;

            return that.options.detailTemplate !== null || (that._events[DETAILINIT] || []).length;
        },
        _hasFilterRow: function () {
            var filterable = this.options.filterable;
            var hasFiltering = filterable &&
                    typeof filterable.mode == STRING &&
            filterable.mode.indexOf("row") != -1;
            var columns = this.columns;
            var columnsWithoutFiltering = $.grep(columns, function (col, idx) {
                return col.filterable === false;
            });

            if (columns.length && columnsWithoutFiltering.length == columns.length) {
                hasFiltering = false;
            }

            return hasFiltering;
        },

        _details: function () {
            var that = this;

            if (that.options.scrollable && that._hasDetails() && lockedColumns(that.columns).length) {
                throw new Error("Having both detail template and locked columns is not supported");
            }

            that.table.on(CLICK + NS, ".k-hierarchy-cell .k-plus, .k-hierarchy-cell .k-minus", function (e) {
                var button = $(this),
                    expanding = button.hasClass("k-plus"),
                    masterRow = button.closest("tr.k-master-row"),
                    detailRow,
                    detailTemplate = that.detailTemplate,
                    data,
                    hasDetails = that._hasDetails();

                button.toggleClass("k-plus", !expanding)
                    .toggleClass("k-minus", expanding);

                detailRow = masterRow.next();

                if (hasDetails && !detailRow.hasClass("k-detail-row")) {
                    data = that.dataItem(masterRow);

                    detailRow = $(detailTemplate(data))
                        .addClass(masterRow.hasClass("k-alt") ? "k-alt" : "")
                        .insertAfter(masterRow);

                    that.angular("compile", function () {
                        return {
                            elements: detailRow.get(),
                            data: [{
                                dataItem: data
                            }]
                        };
                    });

                    that.trigger(DETAILINIT, {
                        masterRow: masterRow, detailRow: detailRow, data: data, detailCell: detailRow.find(".k-detail-cell")
                    });
                }

                that.trigger(expanding ? DETAILEXPAND : DETAILCOLLAPSE, {
                    masterRow: masterRow, detailRow: detailRow
                });
                detailRow.toggle(expanding);

                if (that._current) {
                    that._current.attr("aria-expanded", expanding);
                }

                e.preventDefault();
                return false;
            });
        },

        dataItem: function (tr) {
            tr = $(tr)[0];
            if (!tr) {
                return null;
            }

            var rows = this.tbody.children(),
            classesRegEx = /k-grouping-row|k-detail-row|k-group-footer/,
                idx = tr.sectionRowIndex,
                j, correctIdx;

            correctIdx = idx;

            for (j = 0; j < idx; j++) {
                if (classesRegEx.test(rows[j].className)) {
                    correctIdx--;
                }
            }

            return this._data[correctIdx];
        },

        expandRow: function (tr) {
            $(tr).find('> td .k-plus, > td .k-i-expand').click();
        },

        collapseRow: function (tr) {
            $(tr).find('> td .k-minus, > td .k-i-collapse').click();
        },

        _createHeaderCells: function (columns, rowSpan) {
            var that = this,
        idx,
                th,
    text,
    html = "",
    length,
        leafs = leafColumns(that.columns),
        field;

            for (idx = 0, length = columns.length; idx < length; idx++) {
                th = columns[idx].column || columns[idx];
                text = that._headerCellText(th);
                field = "";

                var index = inArray(th, leafs);

                if (!th.command) {
                    if (th.field) {
                        field = kendo.attr("field") + "='" + th.field + "' ";
                    }

                    html += "<th role='columnheader' " + field;

                    if (rowSpan && !columns[idx].colSpan) {
                        html += " rowspan='" + rowSpan + "'";
                    }

                    if (columns[idx].colSpan > 1) {
                        html += 'colspan="' + (columns[idx].colSpan - hiddenLeafColumnsCount(th.columns)) + '" ';
                        html += kendo.attr("colspan") + "='" + columns[idx].colSpan + "'";
                    }

                    if (th.title) {
                        html += kendo.attr("title") + '="' + th.title.replace(/'/g, "\'") + '" ';
                    }

                    if (th.groupable !== undefined) {
                        html += kendo.attr("groupable") + "='" + th.groupable + "' ";
                    }

                    if (th.aggregates && th.aggregates.length) {
                        html += kendo.attr("aggregates") + "='" + th.aggregates + "'";
                    }

                    if (index > -1) {
                        html += kendo.attr("index") + "='" + index + "'";
                    }

                    html += stringifyAttributes(th.headerAttributes);

                    html += ">" + text + "</th>";
                } else {
                    html += "<th" + stringifyAttributes(th.headerAttributes);

                    if (rowSpan && !columns[idx].colSpan) {
                        html += " rowspan='" + rowSpan + "'";
                    }

                    if (index > -1) {
                        html += kendo.attr("index") + "='" + index + "'";
                    }

                    html += ">" + text + "</th>";
                }
            }
            return html;
        },

        _appendLockedColumnContent: function () {
            var columns = this.columns,
        idx,
        colgroup = this.table.find("colgroup"),
        cols = colgroup.find("col:not(.k-group-col,.k-hierarchy-col)"),
        length,
        lockedCols = $(),
        skipHiddenCount = 0,
        container,
        colSpan,
        spanIdx,
        colOffset = 0;

            for (idx = 0, length = columns.length; idx < length; idx++) {
                if (columns[idx].locked) {

                    if (isVisible(columns[idx])) {
                        colSpan = 1;

                        if (columns[idx].columns) {
                            colSpan = leafColumns(columns[idx].columns).length - hiddenLeafColumnsCount(columns[idx].columns);
                        }

                        colSpan = colSpan || 1;
                        for (spanIdx = 0; spanIdx < colSpan; spanIdx++) {
                            lockedCols = lockedCols.add(cols.eq(idx + colOffset + spanIdx - skipHiddenCount));
                        }
                        colOffset += colSpan - 1;
                    } else {
                        skipHiddenCount++;
                    }
                }
            }

            container = $('<div class="k-grid-content-locked"><table' + (isIE7 ? ' cellspacing="0"' : '') + '><colgroup/><tbody></tbody></table></div>');
            // detach is required for IE8, otherwise it switches to compatibility mode
            colgroup.detach();
            container.find("colgroup").append(lockedCols);
            colgroup.insertBefore(this.table.find("tbody"));

            this.lockedContent = container.insertBefore(this.content);
            this.lockedTable = container.children("table");
        },

        _appendLockedColumnFooter: function () {
            var that = this;
            var footer = that.footer;
            var cells = footer.find(".k-footer-template>td");
            var cols = footer.find(".k-grid-footer-wrap>table>colgroup>col");
            var html = $('<div class="k-grid-footer-locked"><table><colgroup /><tbody><tr class="k-footer-template"></tr></tbody></table></div>');
            var idx, length;
            var groups = that._groups();
            var lockedCells = $(), lockedCols = $();

            lockedCells = lockedCells.add(cells.filter(".k-group-cell"));
            for (idx = 0, length = leafColumns(lockedColumns(that.columns)).length; idx < length; idx++) {
                lockedCells = lockedCells.add(cells.eq(idx + groups));
            }

            lockedCols = lockedCols.add(cols.filter(".k-group-col"));
            for (idx = 0, length = leafColumns(visibleLockedColumns(that.columns)).length; idx < length; idx++) {
                lockedCols = lockedCols.add(cols.eq(idx + groups));
            }

            lockedCells.appendTo(html.find("tr"));
            lockedCols.appendTo(html.find("colgroup"));
            that.lockedFooter = html.prependTo(footer);
        },

        _appendLockedColumnHeader: function (container) {
            var that = this,
                columns = this.columns,
                idx,
                                    html,
                                    length,
                                    colgroup,
                                    tr,
                trFilter,
                table,
                                    header,
                filtercellCells,
                rows = [],
                skipHiddenCount = 0,
                cols = $(),
                hasFilterRow = that._hasFilterRow(),
                filterCellOffset = 0,
                filterCells = $(),
                cell,
                leafColumnsCount = 0,
                cells = $();

            colgroup = that.thead.prev().find("col:not(.k-group-col,.k-hierarchy-col)");
            header = that.thead.find("tr:first .k-header:not(.k-group-cell,.k-hierarchy-cell)");
            filtercellCells = that.thead.find(".k-filter-row").find("th:not(.k-group-cell,.k-hierarchy-cell)");

            var colOffset = 0;
            for (idx = 0, length = columns.length; idx < length; idx++) {
                if (columns[idx].locked) {
                    cell = header.eq(idx);
                    leafColumnsCount = leafColumns(columns[idx].columns || []).length;

                    if (isVisible(columns[idx])) {
                        var colSpan;

                        if (columns[idx].columns) {
                            colSpan = leafColumnsCount - hiddenLeafColumnsCount(columns[idx].columns);
                        }

                        colSpan = colSpan || 1;
                        for (var spanIdx = 0; spanIdx < colSpan; spanIdx++) {
                            cols = cols.add(colgroup.eq(idx + colOffset + spanIdx - skipHiddenCount));
                        }
                        colOffset += colSpan - 1;
                    }

                    mapColumnToCellRows([columns[idx]], childColumnsCells(cell), rows, 0, 0);

                    leafColumnsCount = leafColumnsCount || 1;
                    for (var j = 0; j < leafColumnsCount; j++) {
                        filterCells = filterCells.add(filtercellCells.eq(filterCellOffset + j));
                    }
                    filterCellOffset += leafColumnsCount;
                }

                if (columns[idx].columns) {
                    skipHiddenCount += hiddenLeafColumnsCount(columns[idx].columns);
                }

                if (!isVisible(columns[idx])) {
                    skipHiddenCount++;
                }
            }

            if (rows.length) {
                html = '<div class="k-grid-header-locked" style="width:1px"><table' + (isIE7 ? ' cellspacing="0"' : '') + '><colgroup/><thead>';
                html += new Array(rows.length + 1).join("<tr></tr>");
                html += (hasFilterRow ? '<tr class="k-filter-row" />' : '') + '</thead></table></div>';

                table = $(html);

                colgroup = table.find("colgroup");
                colgroup.append(that.thead.prev().find("col.k-group-col").add(cols));

                tr = table.find("thead tr:not(.k-filter-row)");
                for (idx = 0, length = rows.length; idx < length; idx++) {
                    cells = toJQuery(rows[idx]);
                    tr.eq(idx).append(that.thead.find("tr:eq(" + idx + ") .k-group-cell").add(cells));
                }

                var count = removeEmptyRows(this.thead);
                if (rows.length < count) {
                    removeRowSpanValue(table, count - rows.length);
                }

                trFilter = table.find(".k-filter-row");
                trFilter.append(that.thead.find(".k-filter-row .k-group-cell").add(filterCells));

                this.lockedHeader = table.prependTo(container);
                this.thead.find(".k-group-cell").remove();

                this._syncLockedHeaderHeight();
            }
        },

        _removeLockedContainers: function () {
            var elements = this.lockedHeader
        .add(this.lockedContent)
        .add(this.lockedFooter);

            kendo.destroy(elements);
            elements.off(NS).remove();

            this.lockedHeader = this.lockedContent = this.lockedFooter = null;
            this.selectable = null;
        },

        _thead: function () {
            var that = this,
                columns = that.columns,
                hasDetails = that._hasDetails() && columns.length,
                hasFilterRow = that._hasFilterRow(),
                idx,
                length,
                html = "",
                thead = that.table.find(">thead"),
                hasTHead = that.element.find("thead:first").length > 0,
                tr,
                text,
                th;

            if (!thead.length) {
                thead = $("<thead/>").insertBefore(that.tbody);
            }

            if (that.lockedHeader && that.thead) {
                tr = that.thead.find("tr:has(th):not(.k-filter-row)").html("");
                tr.remove();
                tr = $();

                that._removeLockedContainers();
            } else if (hasTHead) {
                tr = that.element.find("thead:first tr:has(th):not(.k-filter-row)");
            } else {
                tr = that.element.find("tr:has(th):first");
            }

            if (!tr.length) {
                tr = thead.children().first();
                if (!tr.length) {
                    var rows = [{
                        rowSpan: 1, cells: [], index: 0
                    }];
                    that._prepareColumns(rows, columns);

                    for (idx = 0; idx < rows.length; idx++) {
                        html += "<tr>";
                        if (hasDetails) {
                            html += '<th class="k-hierarchy-cell">&nbsp;</th>';
                        }
                        html += that._createHeaderCells(rows[idx].cells, rows[idx].rowSpan);
                        html += "</tr>";
                    }

                    tr = $(html);
                }
            }

            if (hasFilterRow) {
                var filterRow = $("<tr/>");
                filterRow.addClass("k-filter-row");
                if (hasDetails) {
                    filterRow.prepend('<th class="k-hierarchy-cell">&nbsp;</th>');
                }

                var existingFilterRow = thead.find(".k-filter-row");
                if (existingFilterRow.length) {
                    kendo.destroy(existingFilterRow);
                    existingFilterRow.remove();
                }

                thead.append(filterRow);
            }

            if (!tr.children().length) {
                html = "";
                if (hasDetails) {
                    html += '<th class="k-hierarchy-cell">&nbsp;</th>';
                }

                html += that._createHeaderCells(columns);

                tr.html(html);
            } else if (hasDetails && !tr.find(".k-hierarchy-cell")[0]) {
                tr.prepend('<th class="k-hierarchy-cell">&nbsp;</th>');
            }

            tr.attr("role", "row").find("th").addClass("k-header");

            if (!that.options.scrollable) {
                thead.addClass("k-grid-header");
            }

            tr.find("script").remove().end().prependTo(thead);

            if (that.thead) {
                that._destroyColumnAttachments();
            }

            //this.angular("cleanup", function () {
            //    return {
            //        elements: thead.find("th").get()
            //    };
            //});

            //this.angular("compile", function () {
            //    return {
            //        elements: thead.find("th").get(),
            //        data: map(columns, function (col) { return { column: col }; })
            //    };
            //});

            that.thead = thead.attr("role", "rowgroup");

            that._sortable();

            that._filterable();

            that._filterRow();

            that._scrollable();

            that._updateCols();

            that._columnMenu();

            if (this.options.scrollable && lockedColumns(this.columns).length) {

                that._appendLockedColumnHeader(that.thead.closest(".k-grid-header"));

                that._appendLockedColumnContent();

                that.lockedContent.bind("DOMMouseScroll" + NS + " mousewheel" + NS, proxy(that._wheelScroll, that));

                that._applyLockedContainersWidth();
            }

            that._updateColumnCellIndex();

            that._updateFirstColumnClass();

            that._resizable();

            that._draggable();

            that._reorderable();

            if (that.groupable) {
                that._attachGroupable();
            }
        },

        _updateFirstColumnClass: function () {
            var that = this,
                columns = that.columns || [],
                hasDetails = that._hasDetails() && columns.length;

            if (!hasDetails && !that._groups()) {
                var rows = $();

                var tr = that.thead.find(">tr:not(.k-filter-row):not(:first)");
                columns = nonLockedColumns(columns);

                if (tr.length && columns[0] && !columns[0].columns) {
                    rows = rows.add(tr);
                }

                if (that._isLocked()) {
                    tr = that.lockedHeader.find("thead>tr:not(.k-filter-row):not(:first)");
                    columns = lockedColumns(that.columns);

                    if (tr.length && columns[0] && !columns[0].columns) {
                        rows = rows.add(tr);
                    }
                }

                rows.each(function () {
                    var ths = $(this).find("th");
                    ths.removeClass("k-first");
                    ths.eq(0).addClass("k-first");
                });
            }
        },

        _prepareColumns: function (rows, columns, parentCell, parentRow) {
            var row = parentRow || rows[rows.length - 1];

            var childRow = rows[row.index + 1];
            var totalColSpan = 0;

            for (var idx = 0; idx < columns.length; idx++) {
                var cell = {
                    column: columns[idx], colSpan: 0
                };
                row.cells.push(cell);

                if (columns[idx].columns && columns[idx].columns.length) {
                    if (!childRow) {
                        childRow = {
                            rowSpan: 0, cells: [], index: rows.length
                        };
                        rows.push(childRow);
                    }
                    cell.colSpan = columns[idx].columns.length;
                    this._prepareColumns(rows, columns[idx].columns, cell, childRow);
                    totalColSpan += cell.colSpan - 1;
                    row.rowSpan = rows.length - row.index;
                }
            }
            if (parentCell) {
                parentCell.colSpan += totalColSpan;
            }
        },

        _wheelScroll: function (e) {
            if (e.ctrlKey) {
                return;
            }

            var content = this.content;

            if (this.options.scrollable.virtual) {
                content = this.virtualScrollable.verticalScrollbar;
            }

            var scrollTop = content.scrollTop(),
                delta = kendo.wheelDeltaY(e);

            if (delta) {
                e.preventDefault();
                //In Firefox DOMMouseScroll event cannot be canceled
                $(e.currentTarget).one("wheel" + NS, false);

                content.scrollTop(scrollTop + (-delta));
            }
        },

        _isLocked: function () {
            return this.lockedHeader != null;
        },

        _updateCols: function (table) {
            table = table || this.thead.parent().add(this.table);

            this._appendCols(table, this._isLocked());
        },

        _updateLockedCols: function (table) {
            if (this._isLocked()) {
                table = table || this.lockedHeader.find("table").add(this.lockedTable);

                normalizeCols(table, visibleLeafColumns(visibleLockedColumns(this.columns)), this._hasDetails(), this._groups());
            }
        },

        _appendCols: function (table, locked) {
            if (locked) {
                normalizeCols(table, visibleLeafColumns(visibleNonLockedColumns(this.columns)), this._hasDetails(), 0);
            } else {
                normalizeCols(table, visibleLeafColumns(visibleColumns(this.columns)), this._hasDetails(), this._groups());
            }
        },

        _autoColumns: function (schema) {
            if (schema && schema.toJSON) {
                var that = this,
                    field;

                schema = schema.toJSON();

                for (field in schema) {
                    that.columns.push({
                        field: field
                    });
                }

                that._thead();

                that._templates();
            }
        },

        _rowsHtml: function (data, templates) {
            var that = this,
                html = "",
                idx,
                rowTemplate = templates.rowTemplate,
                altRowTemplate = templates.altRowTemplate,
                length;

            for (idx = 0, length = data.length; idx < length; idx++) {
                if (idx % 2) {
                    html += altRowTemplate(data[idx]);
                } else {
                    html += rowTemplate(data[idx]);
                }

                that._data.push(data[idx]);
            }

            return html;
        },

        _groupRowHtml: function (group, colspan, level, groupHeaderBuilder, templates, skipColspan) {
            var that = this,
                html = "",
            idx,
            length,
            field = group.field,
            column = grep(leafColumns(that.columns), function (column) {
                return column.field == field;
            })[0] || {},
            template = column.groupHeaderTemplate,
            text = (column.title || field) + ': ' + formatGroupValue(group.value, column.format, column.values),
            footerDefaults = that._groupAggregatesDefaultObject || {},
            aggregates = extend({}, footerDefaults, group.aggregates),
            data = extend({
            }, {
                field: group.field, value: group.value, aggregates: aggregates
            }, group.aggregates[group.field]),
            rowTemplate = templates.rowTemplate,
            altRowTemplate = templates.altRowTemplate,
            groupFooterTemplate = templates.groupFooterTemplate,
            groupItems = group.items;

            if (template) {
                text = typeof template === FUNCTION ? template(data) : kendo.template(template)(data);
            }

            html += groupHeaderBuilder(colspan, level, text);

            if (group.hasSubgroups) {
                for (idx = 0, length = groupItems.length; idx < length; idx++) {
                    html += that._groupRowHtml(groupItems[idx], skipColspan ? colspan : colspan - 1, level + 1, groupHeaderBuilder, templates, skipColspan);
                }
            } else {
                html += that._rowsHtml(groupItems, templates);
            }

            if (groupFooterTemplate) {
                html += groupFooterTemplate(aggregates);
            }
            return html;
        },

        collapseGroup: function (group) {
            group = $(group);

            var level,
            groupable = this.options.groupable,
                    showFooter = groupable.showFooter,
                    footerCount = showFooter ? 0 : 1,
                    offset,
                    relatedGroup = $(),
                    idx,
                    length,
            tr;

            if (this._isLocked()) {
                if (!group.closest("div").hasClass("k-grid-content-locked")) {
                    relatedGroup = group.nextAll("tr");
                    group = this.lockedTable.find(">tbody>tr:eq(" + group.index() + ")");
                } else {
                    relatedGroup = this.tbody.children("tr:eq(" + group.index() + ")").nextAll("tr");
                }
            }

            level = group.find(".k-group-cell").length;
            group.find(".k-icon").addClass("k-i-expand").removeClass("k-i-collapse");
            group.find("td:first").attr("aria-expanded", false);
            group = group.nextAll("tr");

            for (idx = 0, length = group.length; idx < length; idx++) {
                tr = group.eq(idx);
                offset = tr.find(".k-group-cell").length;

                if (tr.hasClass("k-grouping-row")) {
                    footerCount++;
                } else if (tr.hasClass("k-group-footer")) {
                    footerCount--;
                }

                if (offset <= level || (tr.hasClass("k-group-footer") && footerCount < 0)) {
                    break;
                }

                tr.hide();
                relatedGroup.eq(idx).hide();
            }
        },

        expandGroup: function (group) {
            group = $(group);

            var that = this,
                showFooter = that.options.groupable.showFooter,
                level,
                tr,
                offset,
                relatedGroup = $(),
                idx,
                length,
                footersVisibility = [],
                    groupsCount = 1;

            if (this._isLocked()) {
                if (!group.closest("div").hasClass("k-grid-content-locked")) {
                    relatedGroup = group.nextAll("tr");
                    group = this.lockedTable.find(">tbody>tr:eq(" + group.index() + ")");
                } else {
                    relatedGroup = this.tbody.children("tr:eq(" + group.index() + ")").nextAll("tr");
                }
            }

            level = group.find(".k-group-cell").length;
            group.find(".k-icon").addClass("k-i-collapse").removeClass("k-i-expand");
            group.find("td:first").attr("aria-expanded", true);
            group = group.nextAll("tr");

            for (idx = 0, length = group.length; idx < length; idx++) {
                tr = group.eq(idx);
                offset = tr.find(".k-group-cell").length;
                if (offset <= level) {
                    break;
                }

                if (offset == level + 1 && !tr.hasClass("k-detail-row")) {
                    tr.show();
                    relatedGroup.eq(idx).show();

                    if (tr.hasClass("k-grouping-row") && tr.find(".k-icon").hasClass("k-i-collapse")) {
                        that.expandGroup(tr);
                    }

                    if (tr.hasClass("k-master-row") && tr.find(".k-icon").hasClass("k-minus")) {
                        tr.next().show();
                        relatedGroup.eq(idx + 1).show();
                    }
                }

                if (tr.hasClass("k-grouping-row")) {
                    if (showFooter) {
                        footersVisibility.push(tr.is(":visible"));
                    }
                    groupsCount++;
                }

                if (tr.hasClass("k-group-footer")) {
                    if (showFooter) {
                        tr.toggle(footersVisibility.pop());
                    }
                    if (groupsCount == 1) {
                        tr.show();
                        relatedGroup.eq(idx).show();
                    } else {
                        groupsCount--;
                    }
                }
            }
        },

        _updateHeader: function (groups) {
            var that = this,
container = that._isLocked() ? that.lockedHeader.find("thead") : that.thead,
filterCells = container.find("tr.k-filter-row").find("th.k-group-cell").length,
length = container.find("tr:first").find("th.k-group-cell").length,
rows = container.children("tr:not(:first)").filter(function () {
    return !$(this).children(":visible").length;
});

            if (groups > length) {
                $(new Array(groups - length + 1).join('<th class="k-group-cell k-header">&nbsp;</th>')).prependTo(container.children("tr:not(.k-filter-row)"));
                if (that.element.is(":visible")) {
                    rows.find("th.k-group-cell").hide();
                }
            } else if (groups < length) {
                container.find("tr").each(function () {
                    $(this).find("th.k-group-cell")
                        .filter(":eq(" + groups + ")," + ":gt(" + groups + ")").remove();
                });
            }
            if (groups > filterCells) {
                $(new Array(groups - filterCells + 1).join('<th class="k-group-cell k-header">&nbsp;</th>')).prependTo(container.find(".k-filter-row"));
            }
        },

        _firstDataItem: function (data, grouped) {
            if (data && grouped) {
                if (data.hasSubgroups) {
                    data = this._firstDataItem(data.items[0], grouped);
                } else {
                    data = data.items[0];
                }
            }
            return data;
        },

        _updateTablesWidth: function () {
            var that = this,
tables;

            if (!that._isLocked()) {
                return;
            }

            tables =
            $(">.k-grid-footer>.k-grid-footer-wrap>table", that.wrapper)
            .add(that.thead.parent())
            .add(that.table);

            that._footerWidth = tableWidth(tables.eq(0));
            tables.width(that._footerWidth);

            tables =
            $(">.k-grid-footer>.k-grid-footer-locked>table", that.wrapper)
            .add(that.lockedHeader.find(">table"))
            .add(that.lockedTable);

            tables.width(tableWidth(tables.eq(0)));
        },

        hideColumn: function (column) {
            var that = this,
                cell,
                tables,
                idx,
                cols,
                colWidth,
                position,
                row,
                width = 0,
                parents = [],
                headerCellIndex,
                length,
                footer = that.footer || that.wrapper.find(".k-grid-footer"),
                columns = that.columns,
                visibleLocked = that.lockedHeader ? leafDataCells(that.lockedHeader.find(">table>thead")).filter(isCellVisible).length : 0,
                columnIndex;

            if (typeof column == "number") {
                column = columns[column];
            } else if (isPlainObject(column)) {
                column = grep(flatColumns(columns), function (item) {
                    return item === column;
                })[0];
            } else {
                column = grep(flatColumns(columns), function (item) {
                    return item.field === column;
                })[0];
            }

            if (!column || !isVisible(column)) {
                return;
            }


            if (column.columns && column.columns.length) {
                position = columnVisiblePosition(column, columns);

                setColumnVisibility(column, false);

                setCellVisibility(elements($(">table>thead", that.lockedHeader), that.thead, ">tr:eq(" + position.row + ")>th"), position.cell, false);

                for (idx = 0; idx < column.columns.length; idx++) {
                    this.hideColumn(column.columns[idx]);
                }

                that.trigger(COLUMNHIDE, {
                    column: column
                });

                return;
            }

            columnIndex = inArray(column, visibleColumns(leafColumns(columns)));
            setColumnVisibility(column, false);

            that._setParentsVisibility(column, false);

            that._templates();

            that._updateCols();
            that._updateLockedCols();

            var container = that.thead;

            headerCellIndex = columnIndex;
            if (that.lockedHeader && visibleLocked > columnIndex) {
                container = that.lockedHeader.find(">table>thead");
            } else {
                headerCellIndex -= visibleLocked;
            }

            cell = leafDataCells(container).filter(isCellVisible).eq(headerCellIndex);
            cell[0].style.display = "none";

            setCellVisibility(elements($(">table>thead", that.lockedHeader), that.thead, ">tr.k-filter-row>th"), columnIndex, false);
            if (footer[0]) {
                that._updateCols(footer.find(">.k-grid-footer-wrap>table"));
                that._updateLockedCols(footer.find(">.k-grid-footer-locked>table"));
                setCellVisibility(footer.find(".k-footer-template>td"), columnIndex, false);
            }

            if (that.lockedTable && visibleLocked > columnIndex) {
                hideColumnCells(that.lockedTable.find(">tbody>tr"), columnIndex);
            } else {
                hideColumnCells(that.tbody.children(), columnIndex - visibleLocked);
            }

            if (that.lockedTable) {
                that._updateTablesWidth();
                that._applyLockedContainersWidth();
                that._syncLockedContentHeight();
                that._syncLockedHeaderHeight();
                that._syncLockedFooterHeight();
            } else {
                cols = that.thead.prev().find("col");
                for (idx = 0, length = cols.length; idx < length; idx += 1) {
                    colWidth = cols[idx].style.width;
                    if (colWidth && colWidth.indexOf("%") == -1) {
                        width += parseInt(colWidth, 10);
                    } else {
                        width = 0;
                        break;
                    }
                }

                tables = $(">.k-grid-header table:first,>.k-grid-footer table:first", that.wrapper).add(that.table);
                that._footerWidth = null;

                if (width) {
                    tables.each(function () {
                        this.style.width = width + "px";
                    });

                    that._footerWidth = width;
                }
                if (browser.msie && browser.version == 8) {
                    tables.css("display", "inline-table");
                    setTimeout(function () {
                        tables.css("display", "table");
                    }, 1);
                }
            }

            that._updateFirstColumnClass();
            that.trigger(COLUMNHIDE, {
                column: column
            });
        },

        _setParentsVisibility: function (column, visible) {
            var columns = this.columns;
            var idx;
            var parents = [];
            var parent;
            var position;
            var cell;
            var colSpan;

            var predicate = visible ?
                function (p) {
                    return visibleColumns(p.columns).length && p.hidden;
                } :
                function (p) {
                    return !visibleColumns(p.columns).length && !p.hidden;
                };


            if (columnParents(column, columns, parents) && parents.length) {
                for (idx = parents.length - 1; idx >= 0; idx--) {
                    parent = parents[idx];
                    position = columnPosition(parent, columns);
                    cell = elements($(">table>thead", this.lockedHeader), this.thead, ">tr:eq(" + position.row + ")>th:not(.k-group-cell):not(.k-hierarchy-cell)").eq(position.cell);

                    if (predicate(parent)) {
                        setColumnVisibility(parent, visible);
                        cell[0].style.display = visible ? "" : "none";
                    }

                    if (cell.filter("[" + kendo.attr("colspan") + "]").length) {
                        colSpan = parseInt(cell.attr(kendo.attr("colspan")), 10);
                        cell[0].colSpan = (colSpan - hiddenLeafColumnsCount(parent.columns)) || 1;
                    }
                }
            }
        },

        showColumn: function (column) {
            var that = this,
                idx,
                                        length,
                cell,
                tables,
                width,
                row,
                headerCellIndex,
                position,
                colWidth,
                cols,
                columns = that.columns,
                footer = that.footer || that.wrapper.find(".k-grid-footer"),
                lockedColumnsCount = that.lockedHeader ? leafDataCells(that.lockedHeader.find(">table>thead")).length : 0,
                columnIndex;

            if (typeof column == "number") {
                column = columns[column];
            } else if (isPlainObject(column)) {
                column = grep(flatColumns(columns), function (item) {
                    return item === column;
                })[0];
            } else {
                column = grep(flatColumns(columns), function (item) {
                    return item.field === column;
                })[0];
            }

            if (!column || isVisible(column)) {
                return;
            }

            if (column.columns && column.columns.length) {
                position = columnVisiblePosition(column, columns);

                setColumnVisibility(column, true);

                setCellVisibility(elements($(">table>thead", that.lockedHeader), that.thead, ">tr:eq(" + position.row + ")>th"), position.cell, true);

                for (idx = 0; idx < column.columns.length; idx++) {
                    this.showColumn(column.columns[idx]);
                }

                that.trigger(COLUMNSHOW, {
                    column: column
                });

                return;
            }

            columnIndex = inArray(column, leafColumns(columns));

            setColumnVisibility(column, true);

            that._setParentsVisibility(column, true);

            that._templates();
            that._updateCols();
            that._updateLockedCols();

            var container = that.thead;

            headerCellIndex = columnIndex;
            if (that.lockedHeader && lockedColumnsCount > columnIndex) {
                container = that.lockedHeader.find(">table>thead");
            } else {
                headerCellIndex -= lockedColumnsCount;
            }

            cell = leafDataCells(container).eq(headerCellIndex);
            cell[0].style.display = "";

            setCellVisibility(elements($(">table>thead", that.lockedHeader), that.thead, ">tr.k-filter-row>th"), columnIndex, true);
            if (footer[0]) {
                that._updateCols(footer.find(">.k-grid-footer-wrap>table"));
                that._updateLockedCols(footer.find(">.k-grid-footer-locked>table"));
                setCellVisibility(footer.find(".k-footer-template>td"), columnIndex, true);
            }

            if (that.lockedTable && lockedColumnsCount > columnIndex) {
                showColumnCells(that.lockedTable.find(">tbody>tr"), columnIndex);
            } else {
                showColumnCells(that.tbody.children(), columnIndex - lockedColumnsCount);
            }

            if (that.lockedTable) {
                that._updateTablesWidth();
                that._applyLockedContainersWidth();
                that._syncLockedContentHeight();
                that._syncLockedHeaderHeight();
            } else {
                tables = $(">.k-grid-header table:first,>.k-grid-footer table:first", that.wrapper).add(that.table);
                if (!column.width) {
                    tables.width("");
                } else {
                    width = 0;
                    cols = that.thead.prev().find("col");
                    for (idx = 0, length = cols.length; idx < length; idx += 1) {
                        colWidth = cols[idx].style.width;
                        if (colWidth.indexOf("%") > -1) {
                            width = 0;
                            break;
                        }
                        width += parseInt(colWidth, 10);
                    }

                    that._footerWidth = null;
                    if (width) {
                        tables.each(function () {
                            this.style.width = width + "px";
                        });
                        that._footerWidth = width;
                    }
                }
            }

            that._updateFirstColumnClass();

            that.trigger(COLUMNSHOW, {
                column: column
            });
        },

        _progress: function (toggle) {
            var element = this.element;

            if (this.lockedContent) {
                element = this.wrapper;
            } else if (this.element.is("table")) {
                element = this.element.parent();
            } else if (this.content && this.content.length) {
                element = this.content;
            }

            kendo.ui.progress(element, toggle);
        },

        _resize: function (size, force) {
            if (this.content) {
                this._setContentWidth();
                this._setContentHeight();
            }
            if (this.virtualScrollable && (force || this._rowHeight)) {
                if (force) {
                    this._rowHeight = null;
                }
                this.virtualScrollable.repaintScrollbar();
            }
        },

        _isActiveInTable: function () {
            var active = activeElement();

            return this.table[0] === active ||
                $.contains(this.table[0], active) ||
                (this._isLocked() &&
                    (this.lockedTable[0] === active || $.contains(this.lockedTable[0], active))
                );
        },

        refresh: function (e) {
            var that = this,
                length,
                idx,
                html = "",
                data = that.dataSource.view(),
                navigatable = that.options.navigatable,
                currentIndex,
                current = $(that.current()),
                isCurrentInHeader = false,
                groups = (that.dataSource.group() || []).length,
                offsetLeft = that.content && that.content.scrollLeft(),
                colspan = groups + visibleLeafColumns(visibleColumns(that.columns)).length;

            if (e && e.action === "itemchange" && that.editable) { // skip rebinding if editing is in progress
                return;
            }

            e = e || {
            };

            if (that.trigger("dataBinding", {
                action: e.action || "rebind", index: e.index, items: e.items
            })) {
                return;
            }

            //that._angularItems("cleanup");

            if (navigatable && (that._isActiveInTable() || (that._editContainer && that._editContainer.data("kendoWindow")))) {
                isCurrentInHeader = current.is("th");
                currentIndex = 0;
                if (isCurrentInHeader) {
                    currentIndex = that.thead.find("th:not(.k-group-cell)").index(current);
                }
            }

            that._destroyEditable();

            that._progress(false);

            that._hideResizeHandle();

            that._data = [];

            if (!that.columns.length) {
                that._autoColumns(that._firstDataItem(data[0], groups));
                colspan = groups + that.columns.length;
            }

            that._group = groups > 0 || that._group;

            if (that._group) {
                that._templates();
                that._updateCols();
                that._updateLockedCols();
                that._updateHeader(groups);
                that._group = groups > 0;
            }

            that._renderContent(data, colspan, groups);

            that._renderLockedContent(data, colspan, groups);

            that._footer();

            that._setContentHeight();

            that._setContentWidth(offsetLeft);

            if (that.lockedTable) {
                //requires manual trigger of scroll to sync both tables
                if (that.options.scrollable.virtual) {
                    that.content.find(">.k-virtual-scrollable-wrap").trigger("scroll");
                } else if (that.touchScroller) {
                    that.touchScroller.movable.trigger("change");
                } else {
                    that.content.trigger("scroll");
                }
            }

            if (currentIndex >= 0) {
                that._removeCurrent();
                if (!isCurrentInHeader) {
                    that.current(that.table.add(that.lockedTable).find(FIRSTNAVITEM).first());
                } else {
                    that.current(that.thead.find("th:not(.k-group-cell)").eq(currentIndex));
                }

                if (that._current) {
                    focusTable(that._current.closest("table")[0], true);
                }
            }

            if (that.touchScroller) {
                that.touchScroller.contentResized();
            }

            if (that.selectable) {
                that.selectable.resetTouchEvents();
            }

            //that._angularItems("compile");

            that.trigger(DATABOUND);
        },

        _angularItems: function (cmd) {

            kendo.ui.DataBoundWidget.fn._angularItems.call(this, cmd);

            this._angularGroupItems(cmd);
        },

        _angularGroupItems: function (cmd) {
            var that = this;

            if (that._group) {
                that.angular(cmd, function () {
                    return {
                        elements: that.tbody.children(".k-grouping-row"),
                        data: $.map(groupRows(that.dataSource.view()), function (dataItem) {
                            return {
                                dataItem: dataItem
                            };
                        })
                    };
                });
            }
        },

        _renderContent: function (data, colspan, groups) {
            var that = this,
    idx,
    length,
                html = "",
                isLocked = that.lockedContent != null,
                templates = {
                    rowTemplate: that.rowTemplate,
                    altRowTemplate: that.altRowTemplate,
                    groupFooterTemplate: that.groupFooterTemplate
                };

            colspan = isLocked ? colspan - visibleLeafColumns(visibleLockedColumns(that.columns)).length : colspan;

            if (groups > 0) {

                colspan = isLocked ? colspan - groups : colspan;

                if (that.detailTemplate) {
                    colspan++;
                }

                if (that.groupFooterTemplate) {
                    that._groupAggregatesDefaultObject = that.dataSource.aggregates();
                }

                for (idx = 0, length = data.length; idx < length; idx++) {
                    html += that._groupRowHtml(data[idx], colspan, 0, isLocked ? groupRowLockedContentBuilder : groupRowBuilder, templates, isLocked);
                }
            } else {
                html += that._rowsHtml(data, templates);
            }

            that.tbody = appendContent(that.tbody, that.table, html);
        },

        _renderLockedContent: function (data, colspan, groups) {
            var html = "",
                idx,
length,
templates = {
    rowTemplate: this.lockedRowTemplate,
    altRowTemplate: this.lockedAltRowTemplate,
    groupFooterTemplate: this.lockedGroupFooterTemplate
};

            if (this.lockedContent) {

                var table = this.lockedTable;

                if (groups > 0) {
                    colspan = colspan - visibleColumns(leafColumns(nonLockedColumns(this.columns))).length;
                    for (idx = 0, length = data.length; idx < length; idx++) {
                        html += this._groupRowHtml(data[idx], colspan, 0, groupRowBuilder, templates);
                    }
                } else {
                    html = this._rowsHtml(data, templates);
                }

                appendContent(table.children("tbody"), table, html);

                this._syncLockedContentHeight();
            }
        },

        _adjustRowsHeight: function (table1, table2) {
            var rows = table1[0].rows,
                length = rows.length,
idx,
rows2 = table2[0].rows,
containers = table1.add(table2),
containersLength = containers.length,
heights = [];

            for (idx = 0; idx < length; idx++) {
                if (!rows2[idx]) {
                    break;
                }

                if (rows[idx].style.height) {
                    rows[idx].style.height = rows2[idx].style.height = "";
                }

                var offsetHeight1 = rows[idx].offsetHeight;
                var offsetHeight2 = rows2[idx].offsetHeight;
                var height = 0;

                if (offsetHeight1 > offsetHeight2) {
                    height = offsetHeight1;
                } else if (offsetHeight1 < offsetHeight2) {
                    height = offsetHeight2;
                }

                heights.push(height);
            }

            for (idx = 0; idx < containersLength; idx++) {
                containers[idx].style.display = "none";
            }

            for (idx = 0; idx < length; idx++) {
                if (heights[idx]) {
                    //add one to resolve row misalignment in IE
                    rows[idx].style.height = rows2[idx].style.height = (heights[idx] + 1) + "px";
                }
            }

            for (idx = 0; idx < containersLength; idx++) {
                containers[idx].style.display = "";
            }
        }
    });

    if (kendo.ExcelMixin) {
        kendo.ExcelMixin.extend(Grid.prototype);
    }

    if (kendo.PDFMixin) {
        kendo.PDFMixin.extend(Grid.prototype);

        Grid.prototype._drawPDF = function (progress) {
            var result = new $.Deferred();
            var grid = this;
            var dataSource = grid.dataSource;
            var allPages = grid.options.pdf.allPages;

            this._initPDFProgress(progress);

            // This group will be our document containing all pages
            var doc = new kendo.drawing.Group();
            var startingPage = dataSource.page();

            function resolve() {
                if (allPages && startingPage !== undefined) {
                    dataSource.unbind("change", exportPage);
                    dataSource.one("change", function () {
                        result.resolve(doc);
                    });

                    dataSource.page(startingPage);
                } else {
                    result.resolve(doc);
                }
            }

            function exportPage() {
                grid._drawPDFShadow()
                .done(function (group) {
                    var pageNum = dataSource.page();
                    var totalPages = allPages ? dataSource.totalPages() : 1;

                    var args = {
                        page: group,
                        pageNumber: pageNum,
                        progress: pageNum / totalPages,
                        totalPages: totalPages
                    };

                    progress.notify(args);
                    doc.append(args.page);

                    if (pageNum < totalPages) {
                        dataSource.page(pageNum + 1);
                    } else {
                        resolve();
                    }
                })
                .fail(function (err) {
                    result.reject(err);
                });
            }

            if (allPages) {
                dataSource.bind("change", exportPage);
                dataSource.page(1);
            } else {
                exportPage();
            }

            return result.promise();
        };

        Grid.prototype._initPDFProgress = function (deferred) {
            var loading = $("<div class='k-loading-pdf-mask'><div class='k-loading-color'/></div>");
            loading.prepend(this.wrapper.clone().css({
                position: "absolute", top: 0, left: 0
            }));

            this.wrapper.append(loading);

            var pb = $("<div class='k-loading-pdf-progress'>")
            .appendTo(loading)
            .kendoProgressBar({
                type: "chunk",
                chunkCount: 10,
                min: 0,
                max: 1,
                value: 0
            }).data("kendoProgressBar");

            deferred.progress(function (e) {
                pb.value(e.progress);
            })
            .always(function () {
                kendo.destroy(loading);
                loading.remove();
            });
        };
    }

    function syncTableHeight(table1, table2) {
        table1 = table1[0];
        table2 = table2[0];

        if (table1.rows.length !== table2.rows.length) {
            var lockedHeigth = table1.offsetHeight;
            var tableHeigth = table2.offsetHeight;

            var row;
            var diff;
            if (lockedHeigth > tableHeigth) {
                row = table2.rows[table2.rows.length - 1];

                if (filterRowRegExp.test(row.className)) {
                    row = table2.rows[table2.rows.length - 2];
                }

                diff = lockedHeigth - tableHeigth;
            } else {
                row = table1.rows[table1.rows.length - 1];

                if (filterRowRegExp.test(row.className)) {
                    row = table1.rows[table1.rows.length - 2];
                }

                diff = tableHeigth - lockedHeigth;
            }
            row.style.height = row.offsetHeight + diff + "px";
        }
    }

    function adjustRowHeight(row1, row2) {
        var height;
        var offsetHeight1 = row1.offsetHeight;
        var offsetHeight2 = row2.offsetHeight;

        if (offsetHeight1 > offsetHeight2) {
            height = offsetHeight1 + "px";
        } else if (offsetHeight1 < offsetHeight2) {
            height = offsetHeight2 + "px";
        }

        if (height) {
            row1.style.height = row2.style.height = height;
        }
    }


    function getCommand(commands, name) {
        var idx, length, command;

        if (typeof commands === STRING && commands === name) {
            return commands;
        }

        if (isPlainObject(commands) && commands.name === name) {
            return commands;
        }

        if (isArray(commands)) {
            for (idx = 0, length = commands.length; idx < length; idx++) {
                command = commands[idx];

                if ((typeof command === STRING && command === name) || (command.name === name)) {
                    return command;
                }
            }
        }
        return null;
    }

    function focusTable(table, direct) {
        var msie = browser.msie;
        if (direct === true) {
            table = $(table);
            var condition = true || msie && table.parent().is(".k-grid-content,.k-grid-header-wrap"),
                scrollTop, scrollLeft;
            if (condition) {
                scrollTop = table.parent().scrollTop();
                scrollLeft = table.parent().scrollLeft();
            }

            if (msie) {
                try {
                    //The setActive method does not cause the document to scroll to the active object in the current page
                    table[0].setActive();
                } catch (e) {
                    table[0].focus();
                }
            } else {
                table[0].focus(); //because preventDefault bellow, IE cannot focus the table alternative is unselectable=on
            }

            if (condition) {
                table.parent().scrollTop(scrollTop);
                table.parent().scrollLeft(scrollLeft);
            }

        } else {
            $(table).one("focusin", function (e) {
                e.preventDefault();
            }).focus();
        }
    }

    function tableClick(e) {
        var currentTarget = $(e.currentTarget),
            isHeader = currentTarget.is("th"),
            table = this.table.add(this.lockedTable),
            headerTable = this.thead.parent().add($(">table", this.lockedHeader)),
            isInput = $(e.target).is(":button,a,:input,a>.k-icon,textarea,span.k-icon,span.k-link,.k-input,.k-multiselect-wrap"),
            currentTable = currentTarget.closest("table")[0];

        if (kendo.support.touch) {
            return;
        }

        if (isInput && currentTarget.find(kendo.roleSelector("filtercell")).length) {
            this.current(currentTarget);
            return;
        }

        if (currentTable !== table[0] && currentTable !== table[1] && currentTable !== headerTable[0] && currentTable !== headerTable[1]) {
            return;
        }

        if ($(e.target).is("a.k-i-collapse, a.k-i-expand")) {
            return;
        }

        if (this.options.navigatable) {
            this.current(currentTarget);
        }

        if (isHeader || !isInput) {
            setTimeout(function () {
                //Do not focus if widget, because in IE8 a DDL will be closed
                if (!(isIE8 && $(kendo._activeElement()).hasClass("k-widget"))) {
                    //DOMElement.focus() only for header, because IE doesn't really focus the table
                    focusTable(currentTable, true);
                }
            });
        }

        if (isHeader) {
            e.preventDefault(); //if any problem occurs, call preventDefault only for the clicked header links
        }
    }

    function verticalTable(current, downTable, upTable, up) {
        current = $(current);
        if (up) {
            var temp = downTable;
            downTable = upTable;
            upTable = temp;
        }

        if (downTable.not(current).length != downTable.length) {
            return current;
        }

        return current[0] == upTable[0] ?
                    downTable.eq(0) : downTable.eq(1);
    }

    function moveVertical(current, currentTable, dataTable, headerTable, up, lockedColumns) {
        var row, index;
        var nextFn = up ? "prevAll" : "nextAll";

        if (current) {
            row = current.parent()[nextFn](NAVROW).first();
            if (!row[0] && (up || current.is("th")) || (!up && current[0].rowSpan > 1)) {
                currentTable = verticalTable(currentTable, dataTable, headerTable, up);
                focusTable(currentTable, true);
                if (up && !current.is(".k-header")) {
                    return leafDataCells(currentTable.find("thead:first")).eq(current.index());
                }
                row = currentTable.find((up ? ">thead>" : ">tbody>") + NAVROW).first();
            }

            if (!up && current[0].colSpan > 1 && current.is(".k-header")) { // is not leaf header column
                current = childColumnsCells(current).eq(1);
            } else {
                if (current.is(".k-header") && up) {
                    var parents = parentColumnsCells(current);
                    current = parents.eq(parents.length - 2);
                } else {
                    index = current.attr(kendo.attr("index"));
                    if (index === undefined || up) {
                        index = current.index();
                    } else if (currentTable.parent().prev().hasClass("k-grid-content-locked")) {
                        index -= lockedColumns;
                    }
                    current = row.children().eq(index);
                }
            }

            if (!current[0] || !current.is(NAVCELL)) {
                current = row.children(NAVCELL).first();
            }
        } else {
            current = dataTable.find(FIRSTNAVITEM);
        }

        return current;
    }

    function moveLeft(current, currentTable, dataTable, headerTable, relatedRow) {
        var isLocked = dataTable.length > 1;

        if (current) {
            if (current.prevAll(":visible")[0]) {
                current = current.prevAll(DATA_CELL).first();
            } else if (isLocked) {
                if (currentTable == dataTable[1]) {
                    focusTable(dataTable[0]);
                    current = relatedRow(current.parent()).children(DATA_CELL).last();
                } else if (currentTable == headerTable[1]) {
                    focusTable(headerTable[0]);
                    current = headerTable.eq(0).find("tr>" + DATA_CELL).last();
                }
            }
        } else {
            current = dataTable.find(FIRSTNAVITEM);
        }

        return current;
    }

    function moveRight(current, currentTable, dataTable, headerTable, relatedRow) {
        var isLocked = dataTable.length > 1;

        if (current) {
            if (current.nextAll(":visible")[0]) {
                current = current.nextAll(DATA_CELL).first();
            } else if (isLocked) {
                if (currentTable == dataTable[0]) {
                    focusTable(dataTable[1]);
                    current = relatedRow(current.parent()).children(DATA_CELL).first();
                } else if (currentTable == headerTable[0]) {
                    focusTable(headerTable[1]);
                    current = headerTable.eq(1).find("tr>" + DATA_CELL).first();
                }
            }
        } else {
            current = dataTable.find(FIRSTNAVITEM);
        }

        return current;
    }

    function tabNext(current, currentTable, dataTable, relatedRow, back) {
        var isLocked = dataTable.length == 2;
        var switchRow = true;
        var next = back ? current.prevAll(DATA_CELL + ":first") : current.nextAll(":visible:first");

        if (!next.length) {
            next = current.parent();
            if (isLocked) {
                switchRow = (back && currentTable == dataTable[0]) || (!back && currentTable == dataTable[1]);
                next = relatedRow(next);
            }

            if (switchRow) {
                next = next[back ? "prevAll" : "nextAll"]("tr:not(.k-grouping-row):not(.k-detail-row):visible:first");
            }
            next = next.children(DATA_CELL + (back ? ":last" : ":first"));
        }

        return next;
    }

    function groupRowBuilder(colspan, level, text) {
        return '<tr class="k-grouping-row">' + groupCells(level) +
            '<td colspan="' + colspan + '" aria-expanded="true">' +
            '<p class="k-reset">' +
            '<a class="k-icon k-i-collapse" href="#" tabindex="-1"></a>' + text +
        '</p></td></tr>';
    }

    function groupRowLockedContentBuilder(colspan, level, text) {
        return '<tr class="k-grouping-row">' +
            '<td colspan="' + colspan + '" aria-expanded="true">' +
            '<p class="k-reset">&nbsp;</p></td></tr>';
    }

    ui.plugin(GridNew);
    ui.plugin(VirtualScrollable);

})(jQuery);

